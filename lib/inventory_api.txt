*** Keywords ***
INVENTORY API
    [Arguments]    ${connection_type}=https                            #http or https
    ...            ${server}=${QA_INVENTORY}                        #qa-api.4info.com
    ...            ${port}=${QA_INVENTORY_PORT}                        #443 for https or 8080 for http
    ...            ${uri}=                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...               ${request_type}=GET                                #GET, POST, PUT
    ...               ${data}=None                                        #POST or PUT normally goes with data
    ...            ${expected_status_code}=200                        #normally 200 for working condition, 400 for failure
    ...            ${success}=NA                                    #true if response is 200, false if response is 400
    Run Keyword If    '${request_type}'=='GET'    API GET            connection_type=${connection_type}
    ...                server=${server}
    ...                port=${port}
    ...                uri=${uri}
    ...                request_type=${request_type}
    ...                expected_status_code=${expected_status_code}
    ...                success=${success}
    Run Keyword If    '${request_type}'=='POST'    API POST        connection_type=${connection_type}
    ...                server=${server}
    ...                port=${port}
    ...                uri=${uri}
    ...                data=${data}
    ...                request_type=${request_type}
    ...                expected_status_code=${expected_status_code}
    ...                success=${success}

    Run Keyword If    '${request_type}'=='PUT'    API PUT            connection_type=${connection_type}
    ...                server=${server}
    ...                port=${port}
    ...                uri=${uri}
    ...                data=${data}
    ...                request_type=${request_type}
    ...                expected_status_code=${expected_status_code}
    ...                success=${success}
######################
#Inventory API 1.1.1
#####################
Extract clusters for List page
    [Arguments]        ${clusters_result}=${body}            ${id}=NA        ${name}=NA
    [Documentation]        Take the response from Get All Cluster API, find the matching cluster id and name from response (fail if id/name not found or not match)
    Log     ${cluster_result}
    Log     ${id}
    Set Test Variable        ${cluster_index_found}            NA
    ${cluster_array}=                Get Json Value                ${cluster_result}            /cluster
    Log     ${cluster_array}
    ${cluster_count}=            Get Count                 ${cluster_array}                "id"
    :FOR    ${index}    IN RANGE   0    ${cluster_count}
    \        Log     Index: ${index}
    \        ${string_temp}=                Get Json Value         ${cluster_result}        /cluster/${index}/id
    \        Run Keyword If        '${string_temp}'=='$id}'    Set Test Variable        ${cluster_found}            ${index}
    Log        Found Parent at position: ${cluster_found}
    Json Value Should Equal        ${cluster_result}        /cluster/${cluster_found}/name        ${name}


Get All Cluster From Group ID Compare API vs DB
    [Arguments]        ${groupid}=1
    [Documentation]        Perform Get All Cluster API call, compare the total count to sql query from qa-db.
    #api portion
    Set Test Variable     ${uri_link}        /inventory-api/cluster/clusters?groupId=${groupId}
    INVENTORY API     uri=${uri_link}            expected_status_code=200    success=true
    Log        ${body}
    ${body}=                Decode Bytes To String        ${body}        UTF-8
    Log        ${body}
    ${count_api}=        Get Count        ${body}            "id":
    #DB portion
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select id,name,status from cluster where id in (select cluster_id from groups_cluster where group_id=${groupid});
    Disconnect From Database
      Log Many         @{query_results}
      #${new_query_results}=        Decode Bytes To String        ${query_results}         UTF-8
    ${count_db}=            Get Length         ${query_results}
    Should Be Equal As Integers        ${count_db}    ${count_api}


Remove Cluster via DB
    [Arguments]         ${cluster_name}=Regression_cluster
    [Documentation]        Using sql query, remove all cluster starting with the given cluster name (more than 1 may be removed).
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}         Query        select id from rhino.cluster where name like '${cluster_name}%';
    ${count}=            Get Length     ${query_results}
    :FOR    ${index}    IN RANGE   0    ${count}
    \        Log     Index: ${index}
    \        ${temp_cluster_id}=        Set Variable  ${query_results[${index}][0]}
    \        Delete All Filter Via Elastic        cluster_id=${temp_cluster_id}
    \        execute_sql_string    delete from rhino.groups_cluster where cluster_id ='${temp_cluster_id}';
    \        execute_sql_string    delete from rhino.cluster_placement where cluster_id ='${temp_cluster_id}' ;
    \        execute_sql_string    delete from rhino.cluster where id='${temp_cluster_id}';
    Disconnect From Database


Remove Exact Cluster via DB
    [Arguments]         ${cluster_name}=Regression_cluster
    [Documentation]        Using sql query, remove cluster with exact name.
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}         Query        select id from rhino.cluster where name='${cluster_name}';
    ${count}=            Get Length     ${query_results}
    Run Keyword If         ${count}>0        Set Test Variable       ${temp_cluster_id}   ${query_results[0][0]}
    Run Keyword If         ${count}>0        Delete All Filter Via Elastic        cluster_id=${temp_cluster_id}
    Run Keyword If         ${count}>0        execute_sql_string    delete from rhino.groups_cluster where cluster_id ='${temp_cluster_id}';
    Run Keyword If         ${count}>0        execute_sql_string    delete from rhino.cluster_placement where cluster_id ='${temp_cluster_id}' ;
    Run Keyword If       ${count}>0     execute_sql_string    delete from rhino.groups_cluster where cluster_id='${temp_cluster_id}';
    Run Keyword If       ${count}>0     execute_sql_string    delete from rhino.target_list where target_cluster = '${temp_cluster_id}';
    Run Keyword If         ${count}>0        execute_sql_string    delete from rhino.cluster where id='${temp_cluster_id}';
    execute_sql_string    commit;
    Disconnect From Database



Get Cluster Id
    [Arguments]         ${cluster_name}=Regression_cluster_001
    [Documentation]        Perform database look up of cluster name and translate it to cluster_id
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}         Query        select id from rhino.cluster where name='${cluster_name}';
    Set Test Variable        ${temp}      ${queryResults[0][0]}
    Disconnect From Database
    ${cluster_id}=    Convert To String     ${temp}
    Set Test Variable        ${cluster_id}        ${cluster_id}


Get Cluster Timestamp (DT)
    [Arguments]         ${cluster_id}=${cluster_id}
    [Documentation]        generate cluster dt (timestamp) by provide cluster id
    Get Cluster History for Inventory API 1.3.1 using API    clusterId=${cluster_id}
    #Geting Cluster history also store the timestamp into ${cluster_dt}


 ###########
 #Inventory 1.2.1
 ############
 Get Cluster Detail API vs DB
    [Arguments]        ${clusterId}=1
    [Documentation]        Use the api to get Cluster detail and compare the result against sql query
    #api portion
    Set Test Variable     ${uri_link}        /inventory-api/cluster/cluster/${clusterId}
    INVENTORY API     uri=${uri_link}            expected_status_code=200    success=true
    #DB portion
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select id,name,status,modified_dt,last_modified_by from cluster where id=${clusterId};
    Disconnect From Database

    Set Test Variable    ${id}             ${query_results[0][0]}
    ${id}=          Convert To String          ${id}
      Json Value Should Equal        ${body}            /cluster/id                    ${id}

    Set Test Variable    ${name}             ${query_results[0][1]}
    ${name}=          Convert To String          ${name}
      Json Value Should Equal        ${body}            /cluster/name                "${name}"

      Set Test Variable        ${status}             ${query_results[0][2]}
      ${status}=          Convert To String          ${status}
      Json Value Should Equal        ${body}            /cluster/status                ${status}

      Set Test Variable        ${lastModifiedBy}             ${query_results[0][4]}
      ${lastModifiedBy}=          Convert To String          ${lastModifiedBy}
      Json Value Should Equal        ${body}            /cluster/lastModifiedBy        "${lastModifiedBy}"


####################
# 1.2.5 Get list of filters for a cluster, based on keyword
####################

Get list of filters for a cluster based on keywrod using Inventory API
    [Arguments]     ${data}=
    ...             ${url}=
    ...             ${response_code}=200
    ...             ${success}=false
    Create Session   docker      https://${QA_INVENTORY}:${QA_INVENTORY_PORT}
    ${headers}    Create Dictionary     Content-type=application/json       Accept=application/json
    Log     ${url}
    Log     ${data}
    ${resp}=    RequestsLibrary.Post Request     docker     ${url}     data=${data}     headers=${headers}
    Log    Response: '${resp.content}'
    Set Suite Variable       ${body}     ${resp.content}
    Log     ${body}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp      ${body}    "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp      ${body}    "success":true
    Run Keyword If  '${response_code}'=='200'   Should Be Valid Json     ${body}


###################
#1.2.4 Change Cluster name
########################

#########################
#1.2.6 Suggest Auto complete
########################
Suggest Auto complete
    [Arguments]     ${uri}=
    ...             ${clusterId}=
    ...             ${data}=
    ...             ${expected_status_code}=200
    ...             ${success}=NA
    Set Test Variable   ${uri1}     ${uri}/${clusterId}/autocomplete
    Log     ${data}
    INVENTORY API    uri=${uri1}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=POST                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${expected_status_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#CLUSTER
Update Cluster
    [Arguments]        ${uri}=     ${data}=    ${expected_status_code}=200        ${success}=NA
    [Documentation]        use this keyword to update cluster name, it's pretty much the same as making a put call
    INVENTORY API  uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...               request_type=PUT                                        #GET, POST, PUT
    ...               data=${data}                                            #POST or PUT normally goes with data
    ...            expected_status_code=${expected_status_code}            #normally 200 for working condition, 400 for failure
    ...            success=${success}                                    #true if response is 200, false if response is 400

Get All clusters By GroupId via DB
    [Arguments]        ${groupid}=1
    [Documentation]        Use sql to get all cluster for a specific group id.
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select COUNT(*) from rhino.groups_cluster where group_id=1;
    Set Test Variable    ${clusters_count_db}      ${queryResults[0][0]}
    Disconnect From Database



Get clusters name By ClusterId via DB
    [Arguments]        ${clusterid}=${cluster_id}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select name from rhino.cluster where id=${clusterid};
    Set Test Variable    ${clusters_count_db}      ${queryResults[0][0]}
    Disconnect From Database

#######################
#1.3.1 Get History List
#######################
#CLUSTER
Get Cluster History for Inventory API 1.3.1 using API
    [Documentation]        Use api to get cluster history
    [Arguments]     ${clusterId}=0
    ...             ${response_code}=200
    ...             ${success}=NA
    Set Test Variable   ${uri}  /inventory-api/cluster/history/${clusterId}
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Run Keyword If  '${response_code}'=='200'    Get Cluster Timestamp

 #Get the first history time stamp
Get Cluster Timestamp
    [Documentation]        cluster return timestamp (dt parameter) use this keyword to extract and store it.
    ${cluster_dt}=    Get Json Value        ${body}        /changes/0/dt
    Set Test Variable     ${cluster_dt}        ${cluster_dt}

#Get Cluster History for Inventory API 1.3.1 from DB and compare result
#    [Arguments]     ${clusterId}=0
#    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
#    @{query_results}     Query    select distinct modified_dt as lastModifiedTime, last_modified_by as lastModifiedBy from `cluster` where id = ${clusterId};
#    ${DB_listOfClusterHistory}=   Create Dictionary         lastModifiedTime=${query_results[0][0]}
#    ...                                                     last_modified_by=${query_results[0][1]}
#    Disconnect From Database
#    ${db_lastModifiedTime}          Get From Dictionary     ${DB_listOfClusterHistory}    lastModifiedTime
#    ${response_lastModifiedTime}=   Get Json Value          ${body}                     /changes/lastModifiedBy
#    Should Be Equal      ${db_lastModifiedTime}      ${response_lastModifiedTime}
#    ${db_last_modified_by}          Get From Dictionary     ${DB_listOfClusterHistory}    last_modified_by
#    ${response_last_modified_by}=   Get Json Value          ${body}                     /changes/last_modified_by
#    Should Be Equal      ${db_last_modified_by}      ${response_last_modified_by}


# Compare API result with Elastic search is pending task.

#####################
#1.41 Get History
##################

Get Cluster History using Inventory API
    [Documentation]        Use API to get Cluster History, including timestamp
    [Arguments]     ${clusterId}=
    ...             ${timestamp}=
    ...                ${response_code}=200
    ...                ${success}=true
    Set Test Variable     ${uri}        /inventory-api/cluster/history/${clusterId}/${timestamp}
    Run Keyword If  '${response_code}'=='200'    Set Test Variable    ${success}        true
    Run Keyword If  '${response_code}'=='400'    Set Test Variable    ${success}        false
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Run Keyword If  '${response_code}'=='200'    Json Value Should Equal        ${body}    /cluster/id        ${clusterId}
    Run Keyword If  '${response_code}'=='200'    Json Value Should Equal        ${body}    /cluster/dt        ${timestamp}


Get Cluster History for Inventory API 1.4.1 from DB
    [Documentation]        Get cluster history from DB
    [Arguments]     ${clusterId}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_ClusterHistory}     Query    select id, name, status, last_modified_by as lastModifiedBy, modified_dt as lastModifiedTime from `cluster` where id = ${clusterId}
    ${Inventory_api_ClusterHistory}=   Create Dictionary        id=${query_results_ClusterHistory[0][0]}
    ...                                                         name=${query_results_ClusterHistory[0][1]}
    ...                                                         status=${query_results_ClusterHistory[0][2]}
    ...                                                            lastModifiedBy=${query_results_ClusterHistory[0][3]}
    ...                                                            lastModifiedTime=${query_results_ClusterHistory[0][4]}
    Set Test Variable       ${ClusterHistory_db}        ${Inventory_api_ClusterHistory}
    Log    ${ClusterHistory_db}
    Disconnect From Database


Compare Cluster History for Inventory API 1.4.1 vs DB
    [Documentation]        Compare the data extract from db by sql query against api call
    [Arguments]     ${clusterId}=
    ...             ${DDMMYYSSFlag}=1
    Log    ${ClusterHistory_db}
    ${id}                   Get From Dictionary     ${ClusterHistory_db}        id
    ${id}=                  Convert To Integer   ${id}
    ${response_id}=         Get Json Value         ${body}         /cluster/id
    ${response_id}=         Convert To Integer   ${response_id}
    Should Be Equal         ${response_id}      ${id}

    ${clusterName}           Get From Dictionary     ${ClusterHistory_db}     name
    ${response_Name}=        Get Json Value         ${body}         /cluster/name
    Should Be Equal         ${response_Name}      "${clusterName}"

    ${clusterlastModifiedBy}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedBy
    ${response_lastModifiedBy}=        Get Json Value            ${body}                    /cluster/lastModifiedBy
    Should Be Equal         ${response_lastModifiedBy}          "${clusterlastModifiedBy}"

    ${clusterlastModifiedTime}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedTime
    ${response_lastModifiedTime}=        Get Json Value            ${body}                    /cluster/lastModifiedTime
    #Should Be Equal         ${response_lastModifiedTime}          "${clusterlastModifiedTime}"
    Compare Date Time DB vs API for Inventory    DB_date_time=${clusterlastModifiedTime}
    ...                             API_date_time=${response_lastModifiedTime}

    ${clusterstatus}           Get From Dictionary       ${ClusterHistory_db}     status
    ${response_status}=        Get Json Value            ${body}                    /cluster/status
    ${response_status}=            Convert To Integer        ${response_status}
    Should Be Equal         ${response_status}          ${clusterstatus}



Get Elastic Search History Change
    [Documentation]    Use API to get History list of cluster
    [Arguments]     ${clusterId}=
    ...                ${response_code}=200
    ...                ${success}=true
    Set Test Variable   ${elastic_search_uri}   /history/${clusterId}/_search
    INVENTORY API    uri=${elastic_search_uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Set Suite Variable       ${elastic_search_body}     ${body}
    Run Keyword If  '${response_code}'=='400'    Should Match Regexp     ${elastic_search_body}    "success":false
    ${Response_clusterId}=      Get Json Value         ${elastic_search_body}   /cluster/id
    Run Keyword If  '${response_code}'=='200'   Should Be Equal      ${clusterId}      ${Response_clusterId}

# try string validation.


#####################
#1.4.3 Export History
#####################

Get Inventory API 1.4.3 Export History
    [Documentation]    Exporting cluster History base on cluster id and timestamp
    [Arguments]     ${clusterId}=51
    ...             ${timestamp}=1497058102874
    ...                ${response_code}=200
    ...                ${success}=true
    Set Test Variable     ${uri}        /inventory-api/cluster/history/${clusterId}/${timestamp}/export
    Run Keyword If  '${response_code}'=='200'    Set Test Variable    ${success}        true
    Run Keyword If  '${response_code}'=='400'    Set Test Variable    ${success}        false
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Run Keyword If  '${response_code}'=='200'    Should Match Regexp        ${body}    ID: ${clusterId}

Get Inventory API 1.4.3 Export History from DB
    [Documentation]    Use sql to get history of cluster from db
    [Arguments]     ${clusterId}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_ClusterHistory}     Query    select id, name, last_modified_by as lastModifiedBy, modified_dt as lastModifiedTime from `cluster` where id = ${clusterId}
    ${Inventory_api_ClusterHistory}=   Create Dictionary        id=${query_results_parentAdGroup[0][0]}
    ...                                                         name=${query_results_parentAdGroup[0][1]}
    ...                                                         status=${query_results_parentAdGroup[0][2]}
    ...                                                            lastModifiedBy=${query_results_parentAdGroup[0][3]}
    Set Test Variable   ${ClusterHistory_db}    ${Inventory_api_ClusterHistory}
    Disconnect From Database


Compare 1.4.3 Export History API result with Database
    [Documentation]        Validation data DB vs API call
    ${id}                   Get From Dictionary     ${ClusterHistory_db}        id
    ${id}=                  Convert To Integer      ${id}
    ${response_id}=         Get Json Value          ${body}         /ID
    ${response_id}=         Convert To Integer      ${response_id}
    Should Be Equal         ${response_id}          ${id}

    {clusterName}           Get From Dictionary     ${ClusterHistory_db}     name
    {response_Name}=        Get Json Value          ${body}         /Name
    Should Be Equal         ${response_Name}        ${clusterName}

    {clusterlastModifiedBy}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedBy
    {response_lastModifiedBy}=        Get Json Value            ${body}                    /Modified By
    Should Be Equal         ${response_lastModifiedBy}          ${clusterlastModifiedBy}

    {clusterlastModifiedTime}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedTime
    {response_lastModifiedTime}=        Get Json Value            ${body}                    /Modified Times
    Should Be Equal         ${response_lastModifiedTime}          ${clusterlastModifiedTime}


#######################
#1.5.1 Create Cluster
########################
Create Cluster
    [Documentation]        Use this api to create cluster
    [Arguments]         ${cluster_name}=Regression_cluster_1        ${username}=${QA_DEFAULT_USER}            ${groupId}=1    ${expected_status_code}=200
    Set Test Variable     ${uri}        /inventory-api/cluster/cluster?username=${username}&groupId=${groupId}
    Set Test Variable    ${data}        {"name":"${cluster_name}"}
    Run Keyword If  '${expected_status_code}'=='200'    Set Test Variable    ${success}        true
    Run Keyword If  '${expected_status_code}'=='400'    Set Test Variable    ${success}        false
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=POST                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${expected_status_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Run Keyword If    '${expected_status_code}'=='200'        Validate Create Cluster        cluster_name=${cluster_name}

Validate Create Cluster
    [Documentation]        This portion validate the data returned from creating cluster
    [Arguments]         ${cluster_name}=Regression_cluster_1
    Json Value Should Equal        ${body}        /success            true
    Json Value Should Equal      ${body}      /cluster/name       "${cluster_name}"
    ${cluster_id}=            Get Json Value                ${body}        /cluster/id
    Set Test Variable        ${cluster_id}            ${cluster_id}
#######################
#1.6.1 Ad filter to a Cluster
########################
#cluster Id is required, otherwise it is inherit from "Create Cluster"
Add Filter To Cluster
    [Documentation]        Use this API to add filter to the cluster
    [Arguments]         ${cluster_id}=${cluster_id}
    ...                    ${username}=${QA_DEFAULT_USER}
    ...                    ${data}={}
    ...                    ${response_code}=200
    ...                    ${valid_filter}=NA
    ...                    ${invalid_filter}=NA
    ...                 ${duplicated_filter}=NA
    ...                    ${exists_filter}=NA
    Set Test Variable     ${uri}        /inventory-api/cluster/cluster/${cluster_id}/add?username=${username}
    Log     Data: '${data}'
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=PUT                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=NA                                    #true if response is 200, false if response is 400
    Run Keyword If        '${response_code}'=='400'        Json Value Should Equal        ${body}        /success            false
    Run Keyword If        '${response_code}'=='200'        Json Value Should Equal        ${body}        /success            true
    Run Keyword If        '${response_code}'=='200'        Json Value Should Equal      ${body}      /cluster/id                       ${cluster_id}
    Run Keyword If        '${response_code}'=='200'        Json Value Should Equal      ${body}      /cluster/lastModifiedBy           "${username}"
    Run Keyword If        '${response_code}'=='200'        Validate List Of Keywords        keyword_string=${body}            keyword=id,name,status,lastModifiedBy,lastModifiedTime,createdTime,createdBy,hits,duplicated,invalid,valid,exists

    Run Keyword Unless        '${valid_filter}'=='NA'                    Json Value Should Equal      ${body}      /valid               ${valid_filter}
    Run Keyword Unless        '${invalid_filter}'=='NA'                Json Value Should Equal      ${body}      /invalid               ${invalid_filter}
    Run Keyword Unless        '${duplicated_filter}'=='NA'            Json Value Should Equal      ${body}      /duplicated           ${duplicated_filter}
    Run Keyword Unless        '${exists_filter}'=='NA'                Json Value Should Equal      ${body}      /exists               ${exists_filter}
    Sleep     10s

# com, net, org, edu, gov
Generate Filter
    [Documentation]        This keyword is used to generate random list of filter so that it can be use to added to a cluster (since it is random, it will not be mapped)
    [Arguments]         ${max}=1
    :FOR    ${index}    IN RANGE   0    ${max}
    \        Log     Index: ${index}
    \        ${random_domain_name}=        Generate Random String        5        [LETTERS]            #5 letters domain name
    \        ${random_domain_type}=        Generate Random String        1        12345                #domain type depend on random chance
    \        Run Keyword If                '${random_domain_type}'=='1'        Set Test Variable        ${temp_domain_type}            com
    \        Run Keyword If                '${random_domain_type}'=='2'        Set Test Variable        ${temp_domain_type}            net
    \        Run Keyword If                '${random_domain_type}'=='3'        Set Test Variable        ${temp_domain_type}            org
    \        Run Keyword If                '${random_domain_type}'=='4'        Set Test Variable        ${temp_domain_type}            edu
    \        Run Keyword If                '${random_domain_type}'=='5'        Set Test Variable        ${temp_domain_type}            gov
    \        Set Test Variable            ${string_temp}                        "${Index}${random_domain_name}.${temp_domain_type}"
    \        Run Keyword If            ${index}==0            Set Test Variable            ${filters}                ${string_temp}
    \        Run Keyword Unless        ${index}==0            Set Test Variable            ${filters}                ${filters},${string_temp}
    Set Test Variable            ${filters}            {"filters":[${filters}]}
#############
Add filters to a cluster using Inventory API 1.6.1
    [Documentation]        Same as above, just a different name (offshore)
    [Arguments]     ${clusterId}=
    ...             ${username}=
    ...             ${filter}=
    ...                ${response_code}=200
    ...                ${success}=true
    Set Test Variable     ${uri}        /inventory-api/cluster/cluster/${clusterId}/add?username=${username}
    #${missing_count}=        Get Count    ${data}            MISSING
    #Run Keyword If            '${missing_count}'>0        Remove Json Key Contain MISSING
    Set Test Variable        ${data}        {"filters": [${filter}]}
    Log                ${data}
    Run Keyword If  '${response_code}'=='200'     Set Test Variable     ${success}        true
    Run Keyword If  '${response_code}'=='400'     Set Test Variable     ${success}        false
    INVENTORY API    uri=${uri}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=PUT                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp            ${body}    "success":false
    Run Keyword If  '${response_code}'=='200'    Json Value Should Equal        ${body}    /cluster/id                    ${clusterId}


#Remove Json Key Contain MISSING
#    ${data}=        Remove String        ${data}        "filters":[MISSING]


Get Cluster History for Inventory API 1.6.1 from DB
    [Documentation]        Using sql query to get history data of cluster from db
    [Arguments]     ${clusterId}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_ClusterHistory}     Query    select distinct cluster.id, cluster.name, cluster.status, cluster.last_modified_by as lastModifiedBy, cluster.modified_dt as lastModifiedTime, groups_cluster.created_dt as createdTime from `cluster` as cluster inner join `groups_cluster` as groups_cluster on cluster.id=groups_cluster.cluster_id where cluster.id = ${clusterId}
    Log     ${query_results_ClusterHistory}
    ${Inventory_api_ClusterHistory}=   Create Dictionary        id=${query_results_ClusterHistory[0][0]}
    ...                                                         name=${query_results_ClusterHistory[0][1]}
    ...                                                         status=${query_results_ClusterHistory[0][2]}
    ...                                                            lastModifiedBy=${query_results_ClusterHistory[0][3]}
    ...                                                            lastModifiedTime=${query_results_ClusterHistory[0][4]}
    ...                                                         createdTime=${query_results_ClusterHistory[0][5]}
    Set Test Variable   ${ClusterHistory_db}    ${Inventory_api_ClusterHistory}
    Disconnect From Database


Compare Cluster History for Inventory API 1.6.1 vs DB
    [Documentation]        Compare api data vs DB data for cluster history
    ${id}                           Get From Dictionary     ${ClusterHistory_db}        id
    ${id}=                          Convert To Integer      ${id}
    ${response_id}=                 Get Json Value          ${body}         /cluster/id
    ${response_id}=                 Convert To Integer      ${response_id}
    Should Be Equal                 ${response_id}          ${id}

    ${clusterName}           Get From Dictionary     ${ClusterHistory_db}     name
    ${response_Name}=        Get Json Value         ${body}         /cluster/name
    Should Be Equal         ${response_Name}      "${clusterName}"

    ${clusterlastModifiedBy}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedBy
    ${response_lastModifiedBy}=        Get Json Value            ${body}                    /cluster/lastModifiedBy
    Should Be Equal         ${response_lastModifiedBy}          "${clusterlastModifiedBy}"

    ${clusterlastModifiedTime}           Get From Dictionary       ${ClusterHistory_db}     lastModifiedTime
    ${response_lastModifiedTime}=        Get Json Value            ${body}                    /cluster/lastModifiedTime
    #Should Be Equal         ${response_lastModifiedTime}          "${clusterlastModifiedTime}"
    Compare Date Time DB vs API for Inventory         DB_date_time=${clusterlastModifiedTime}
    ...                                 API_date_time=${response_lastModifiedTime}

    ${clusterstatus}           Get From Dictionary       ${ClusterHistory_db}     status
    ${response_status}=        Get Json Value            ${body}                    /cluster/status
    ${response_status}=            Convert To Integer        ${response_status}
    Should Be Equal         ${response_status}          ${clusterstatus}


Compare Date Time DB vs API for Inventory
    [Arguments]     ${DB_date_time}=2015-06-11 00:00
    ...             ${API_date_time}="06/11/2015 00:00"
    ...             ${DDMMYYSSFlag}=0
    Log    ${API_date_time}
    Log    ${DB_date_time}
    ${API_date_time}=    Remove String    ${API_date_time}    "
    Log    ${API_date_time}

    ${time_difference}    Subtract Date From Date
    ...                     date1=${DB_date_time}
    ...                     date2=${API_date_time}
    ...                     date1_format=%Y-%m-%d %H:%M
    ...                     date2_format=%m/%d/%Y %H:%M
    Log    ${time_difference}
    ${time_difference}=    Evaluate    abs(${time_difference})
    # Should Be True    ${time_difference} <= 60
    Should Be True    ${time_difference} > 0

#########################
#1.6.2 Delete filters for a cluster
################################
Delete Filter From Cluster
    [Documentation]        Using API to delete filter from a cluster
    [Arguments]         ${cluster_id}=${cluster_id}        ${username}=${QA_DEFAULT_USER}            ${data}={}        ${valid_filter}=NA
    Set Test Variable     ${uri}        /inventory-api/cluster/cluster/${cluster_id}/delete?username=${username}
    INVENTORY API
    ...            uri=${uri}                      #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...         request_type=PUT                #GET, POST, PUT
    ...         data=${data}                    #POST or PUT normally goes with data
    ...         expected_status_code=200           #normally 200 for working condition, 400 for failure
    ...         success=NA                  #true if response is 200, false if response is 400

    Json Value Should Equal        ${body}        /success            true
    Json Value Should Equal      ${body}      /cluster/id           ${cluster_id}
    Run Keyword Unless        '${valid_filter}'=='NA'                Json Value Should Equal      ${body}      /valid               ${valid_filter}
    Validate List Of Keywords        keyword_string=${body}            keyword=id,name,status,lastModifiedBy,lastModifiedTime,createdTime,createdBy,hits,duplicated,invalid,valid,exists

Delete All Filter Via Elastic
    [Documentation]        This keyword is use for cleanup after db dump only
    [Arguments]         ${cluster_id}=${cluster_id}
    Create Session      docker    http://${QA_ELASTIC}:${QA_ELASTIC_PORT}
    ${uri}=                Set Variable        /filter/${cluster_id}/_delete_by_query
    ${headers}          Create Dictionary     Content-type=application/json        Accept=application/json
    ${data}=            Set Variable        {"query":{"match_all":{}}}
    ${elastic_resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    Log    Response: '${elastic_resp.content}'
    Should Be Equal As Strings   ${elastic_resp.status_code}   200

######################################
Delete filters to a cluster using Inventory API 1.6.2
    [Documentation]    This api delete filter from a cluster
    [Arguments]     ${clusterId}=
    ...             ${username}=
    ...             ${filter}=
    ...                ${response_code}=200
    ...                ${success}=true
    Set Test Variable     ${uri}        /inventory-api/cluster/cluster/${clusterId}/delete?username=${username}
    Set Test Variable        ${data}        {"filters": [${filter}]}
    #${missing_count}=        Get Count    ${data}            MISSING
    #Run Keyword If            '${missing_count}'>0        Remove Json Key Contain MISSING
    Log                ${data}
    Run Keyword If  '${response_code}'=='200'     Set Test Variable     ${success}        true
    Run Keyword If  '${response_code}'=='400'     Set Test Variable     ${success}        false
    INVENTORY API
    ...            uri=${uri}                      #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...         request_type=PUT                #GET, POST, PUT
    ...         data=${data}                    #POST or PUT normally goes with data
    ...         expected_status_code=${response_code}           #normally 200 for working condition, 400 for failure
    ...         success=${success}                 #true if response is 200, false if response is 400

    Run Keyword If  '${response_code}'=='400'   Should Match Regexp            ${body}    "success":false
    Run Keyword If  '${response_code}'=='200'    Json Value Should Equal        ${body}    /cluster/id                    ${clusterId}

#Remove Json Key Contain MISSING
#    ${data}=        Remove String        ${data}        "filters":[MISSING]

#########################
#1.8.1 Clone a cluster
#########################
Create cluster using clone API
    [Documentation]     Use this api to create cluster using clone
    [Arguments]         ${cluster_name}
    ...                 ${old_cluster_id}
    ...                 ${username}=${QA_DEFAULT_USER}
    ...                 ${groupId}=1
    ...                 ${expected_status_code}=200
    Set Test Variable   ${uri}      /inventory-api/cluster/cluster/${old_cluster_id}/clone?username=${username}&groupId=${groupId}
    Set Test Variable   ${data}     {"name":"${cluster_name}"}
    Run Keyword If  '${expected_status_code}'=='200'     Set Test Variable     ${success}        true
    Run Keyword If  '${expected_status_code}'=='400'     Set Test Variable     ${success}        false
    INVENTORY API
    ...            uri=${uri}                      #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...         request_type=POST                #GET, POST, PUT
    ...         data=${data}                    #POST or PUT normally goes with data
    ...         expected_status_code=${expected_status_code}           #normally 200 for working condition, 400 for failure
    ...         success=${success}                 #true if response is 200, false if response is 400

    Run Keyword If  '${expected_status_code}'=='200'        Validate Create Cluster     cluster_name=${cluster_name}

#-------------------------------------------------------------------------------------------------------------
#########################
#2.1. Get list of exchange with inventory type
#########################

Get list of exchange with inventory type
    [Arguments]     ${url}=inventory-api/exchange/exchange-list
    ...             ${reason_code}=400
    ...             ${success}=false
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
#########################
# 2.2. Add Inventory Type to Exchange
#########################

Delete Inventory Type to Exchange
    [Arguments]         ${siteType}
    ...                 ${exchangeId}
    [Documentation]     Using sql query, remove Inventory Type to Exchange
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string    delete from rhino.partner_site where name like '${exchangeId}-${siteType}';
    execute_sql_string    commit;
    Disconnect From Database


Add Inventory Type to Exchange
    [Arguments]         ${exchangeId}=
    ...                 ${siteType}=""
    ...                 ${url}=inventory-api/exchange/inventory-type/${exchangeId}
    ...                 ${reason_code}=200
    ...                 ${success}=NA
    Log      ${url}
    Set Test Variable    ${data}     {"siteType":${siteType}}
    ${missing_count}=           Get Count           ${data}         MISSING
    Run Keyword If      '${missing_count}'>='1'     Remove Json Key Contain MISSING for Add Inventory Type to Exchange
    Log             ${data}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=POST                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400
    #Run Keyword If    '${resp.status_code}'=='200'    ${siteTypeId}    Get JSON Value    /siteTypeId

Remove Json Key Contain MISSING for Add Inventory Type to Exchange
    ${data}=    Remove String    ${data}    "siteType":"MISSING"
    Set Test Variable    ${data}    ${data}
#-------------------------------------------------------------------------------------------------------------
# 2.3.1 Get list of exchange partner protocol

Get list of exchange partner protocol
    [Arguments]    ${url}=inventory-api/exchange/exchange-protocol
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
# 2.3.2 Get list of exchange partner spec

Get list of exchange partner spec
    [Arguments]    ${url}=inventory-api/exchange/exchange-spec
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
# 2.3.3 Get list of exchange partner response type

Get list of exchange partner response type
    [Arguments]    ${url}=inventory-api/exchange/exchange-response-type
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
# 2.4. Get detail for exchange

Get detail for exchange
    [Arguments]     ${exchangeId}=192
    ...             ${url}=inventory-api/exchange/exchange
    ...             ${reason_code}=400
    ...             ${success}=false
    Set Test Variable    ${url}    ${url}/${exchangeId}
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
# 2.5. Create an exchange

Create an exchange
    [Arguments]     ${name}
    ...             ${spec}
    ...             ${protocol}
    ...             ${respType}
    ...             ${reason_code}=400
    ...             ${success}=false
    Set Test Variable    ${url}    inventory-api/exchange/exchange
    Set Test Variable    ${data}     {"name":${name}, "spec":${spec}, "protocol":${protocol}, "respType":${respType}}
    ${missing_count}=           Get Count           ${data}         MISSING
    Run Keyword If    '${missing_count}'>='1'    Remove Json Key Contain MISSING for Create an exchange
    Log    ${data}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=POST                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400


Remove Json Key Contain MISSING for Create an exchange
    ${data}=    Remove String    ${data}    "name":"MISSING",
    ${data}=    Remove String    ${data}    "spec":MISSING,
    ${data}=    Remove String    ${data}    "protocol":MISSING,
    ${data}=    Remove String    ${data}    "respType":MISSING
    ${data}=    Evaluate        '${data}'.replace(", }",'}').replace(",}",'}')
    Set Test Variable    ${data}    ${data}


Delete Exchange Newly created
    [Arguments]     ${ExchangeName}=
    ...             ${spec}=
    ...             ${protocol}=
    ...             ${respType}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string    delete from rhino.partner_site where partner_id in (SELECT id FROM rhino.partner where name like '${ExchangeName}');
    execute_sql_string    delete from rhino.target_list where target_exchange in (SELECT id FROM rhino.partner where name like '${ExchangeName}');
    execute_sql_string    delete from rhino.partner where name = '${ExchangeName}';    #and exch_spec=${spec} and exch_proto=${protocol} and exch_response_type=${respType};
    execute_sql_string    commit;
    @{query_result}     Query    select count(1) from rhino.partner where name = '${ExchangeName}';
    ${DB_Result}=   Create Dictionary      RecordCount=${query_result[0][0]}
    Set Test Variable       ${query_result_db}          ${DB_Result}
    Log    ${query_result_db}
    Disconnect From Database

#-------------------------------------------------------------------------------------------------------------

### 3.1. Get list of placements for given exchange and inventory type

Get list of placements for given exchange and inventory type
    [Arguments]     ${partnerId}=375
    ...             ${siteType}=sdk
    ...             ${groupId}=1
    ...             ${url}=inventory-api/placement/placements?partnerId=${partnerId}&siteType=${siteType}&groupId=${groupId}
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
       INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400

#-------------------------------------------------------------------------------------------------------------
### 3.2. Get master list of Placements Target RTB options

Get master list of Placements Target RTB options
    [Arguments]     ${url}=inventory-api/placement/bid-attributes
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=NA                                    #This api does not response with success status

#-------------------------------------------------------------------------------------------------------------
### 3.3. Create placement

Create placement
    [Arguments]     ${url}=inventory-api/placement?groupId=${groupId}
    ...             ${name}=
    ...             ${type}=
    ...             ${live}=
    ...             ${rtbBidAttributeId}=
    ...             ${rtb_value}=
    ...             ${defaultPlacement}=false
    ...             ${partnerSiteId}=
    ...             ${reason_code}=400
    ...             ${success}=false
    Log    ${url}
    Set Test Variable    ${data}     {"name":${name}, "type":${type}, "live":${live}, "rtbBidAttributeId":${rtbBidAttributeId}, "rtb_value":${rtb_value}, "defaultPlacement":${defaultPlacement}, "partnerSiteId":${partnerSiteId}}
    ${missing_count}=           Get Count           ${data}         MISSING
    Run Keyword If    '${missing_count}'>='1'    Remove Json Key Contain MISSING for Create placement
    Log    ${data}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=POST                                #GET, POST, PUT
    ...                   data=${data}                                        #POST or PUT normally goes with data
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400


Remove Json Key Contain MISSING for Create placement
    ${data}=    Remove String    ${data}    "name":"MISSING",
    ${data}=    Remove String    ${data}    "type":MISSING,
    ${data}=    Remove String    ${data}    "live":MISSING,
    ${data}=    Remove String    ${data}    "rtbBidAttributeId":MISSING
    ${data}=    Remove String    ${data}    "rtb_value":MISSING
    ${data}=    Remove String    ${data}    "defaultPlacement":MISSING
    ${data}=    Remove String    ${data}    "partnerSiteId":MISSING
    ${data}=    Evaluate        '${data}'.replace(", }",'}').replace(",}",'}')
    Set Test Variable    ${data}    ${data}

#-------------------------------------------------------------------------------------------------------------
### 3.4. Get default placement exists

Get default placement exists
    [Arguments]     ${url}=
    ...             ${reason_code}=400
    ...             ${success}=false
    Log      ${url}
    INVENTORY API    uri=${url}                                            #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...                   request_type=GET                                #GET, POST, PUT
    ...                expected_status_code=${reason_code}                        #normally 200 for working condition, 400 for failure
    ...                success=${success}                                    #true if response is 200, false if response is 400


#-------------------------------------------------------------------------------------------------------------
