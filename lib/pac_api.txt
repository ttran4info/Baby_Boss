*** Settings ***
Library         DateTime

*** Keywords ***
PAC API
    [Arguments]    ${connection_type}=https                         #http or https
    ...            ${server}=${QA_PAC}                              #qa-api.4info.com
    ...            ${port}=${QA_PAC_PORT}                           #443 for https or 8080 for http
    ...            ${uri}=                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            ${request_type}=GET                              #GET, POST, PUT
    ...            ${data}=None                                     #POST or PUT normally goes with data
    ...            ${expected_status_code}=200                      #normally 200 for working condition, 400 for failure
    ...            ${success}=NA                                    #true if response is 200, false if response is 400
    Run Keyword If  '${request_type}'=='GET'    API GET         connection_type=${connection_type}
    ...             server=${server}
    ...             port=${port}
    ...             uri=${uri}
    ...             request_type=${request_type}
    ...             expected_status_code=${expected_status_code}
    ...             success=${success}
    Run Keyword If  '${request_type}'=='POST'    API Post            connection_type=${connection_type}
    ...             server=${server}
    ...             port=${port}
    ...             uri=${uri}
    ...             data=${data}
    ...             request_type=${request_type}
    ...             expected_status_code=${expected_status_code}
    ...             success=${success}
    Run Keyword If  '${request_type}'=='PUT'    API PUT         connection_type=${connection_type}
    ...             server=${server}
    ...             port=${port}
    ...             uri=${uri}
    ...             data=${data}
    ...             request_type=${request_type}
    ...             expected_status_code=${expected_status_code}
    ...             success=${success}
    Run Keyword If  '${request_type}'=='PATCH'    API PATCH           connection_type=${connection_type}
    ...             server=${server}
    ...             port=${port}
    ...             uri=${uri}
    ...             data=${data}
    ...             request_type=${request_type}
    ...             expected_status_code=${expected_status_code}
    ...             success=${success}
    Run Keyword If  '${request_type}'=='DELETE'    API DELETE          connection_type=${connection_type}
    ...             server=${server}
    ...             port=${port}
    ...             uri=${uri}
    ...             data=${data}
    ...             request_type=${request_type}
    ...             expected_status_code=${expected_status_code}
    ...             success=${success}
######################
# Start date as today's date
######################
Get Start Date
    ${yyyy}    ${mm}    ${dd}    ${hours}    ${minutes}=    Get Time    year,month,day,hours,minutes    UTC + 40 minutes
    Set Suite Variable    ${todaysDate}   ${mm}/${dd}/${yyyy} ${hours}:${minutes}


#######################
#This first section contain Universal keywords that are not specific to any PAC api
###################################

Get UI element accesses from page URL
    Comment     Universal Get Request, could be use in any number of occasion that uses get request
    [Arguments]     ${uri}=     ${expected_status_code}=200     ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Accept=application/json
    #${resp}=   Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable      ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If     '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless     '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}


#Pac1.1

Get All Advertisers By Group Id
    [Arguments]     ${group_id}=1       ${expected_status_code}=200     ${success}=NA
    Comment     Pac1.1 api call
    Set Test Variable   ${uri_link}     /pac-api/partner/advertisers?groupId=${group_id}
    PAC API              request_type=GET   uri=${uri_link}         expected_status_code=${expected_status_code}    success=${success}


Get All Advertiser By GroupId via DB
    Comment     Use sql to get all advertiser base on group id, result is total count (live + paused, archive campaign not included)
    [Arguments]     ${groupid}=1
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(1) as cnt from (select distinct id from partner where id in (select distinct partner_id from campaign where (id in (select distinct campaign_id from campaign_groups where group_id=${groupid}) and (status != 3 and smb_list_status is null)))) as a;
    Set Test Variable    ${advertiser_count_db}      ${queryResults[0][0]}
    Disconnect From Database




Compare API data vs DB for Advertiser
    [Arguments]         ${group_id}=1   ${advertiser_name}=QA_REGRESSION
    Comment    Take an advertiser name, look up the information using pac 1.1 (get all advertiser). Compare Data to DB.
    Set Test Variable   ${group_id}             ${group_id}
    Set Test Variable   ${advertiser_name}      ${advertiser_name}
    Get All Advertisers By Group Id     group_id=${group_id}
    ${advertisers}=     Get Json Value          ${body}     /advertisers
    @{advertisers_list}=    String.Split String    ${advertisers}    }, {
    ${advertisers_count_api}=    Get Length    ${advertisers_list}
    Set Test Variable   ${index_found}      NA
    Log     Api List Lenght is -> ${advertisers_count_api}
    :FOR    ${index}    IN RANGE   0    ${advertisers_count_api}
    \       Log     Index: ${index}
    \       Log     Expected advertiser: ${advertiser_name}
    \       ${temp_advertiser_name}=    Get Json Value              ${body}         /advertisers/${index}/name
    \       ${temp_advertiser_name}=    Remove String       ${temp_advertiser_name}     "
    \       ${temp_advertiser_name}=    Remove String       ${temp_advertiser_name}     '
    \       Run Keyword If      '${temp_advertiser_name}'=='${advertiser_name}'             Set Test Variable       ${index_found}          ${index}
    \       Run Keyword If      '${temp_advertiser_name}'=='${advertiser_name}'             Exit For Loop
    Run Keyword Unless      '${index_found}'=='NA'      Extract Campaign Info From PAC1.1 And Compare to DB


Extract Campaign Info From PAC1.1 And Compare to DB
    Comment    If Desired advertiser name is found, use this keyword to perform the comparision (status,livecampaign,pending campaign,total campaign)
    ${api_advertiser_id}=                   Get Json Value      ${body}     /advertisers/${index_found}/id
    ${api_advertiser_name}=                 Get Json Value      ${body}     /advertisers/${index_found}/name
    ${api_advertiser_name}=                 Remove String       ${api_advertiser_name}      "
    ${api_advertiser_status}=               Get Json Value      ${body}     /advertisers/${index_found}/status
    ${api_advertiser_status}=               Remove String       ${api_advertiser_status}    "
    ${api_advertiser_liveCampaigns}=        Get Json Value      ${body}     /advertisers/${index_found}/liveCampaigns
    ${api_advertiser_pendingCampaigns}=     Get Json Value      ${body}     /advertisers/${index_found}/pendingCampaigns
    ${api_advertiser_totalCampaigns}=       Get Json Value      ${body}     /advertisers/${index_found}/totalCampaigns
    Log    ${api_advertiser_liveCampaigns}
    Log    ${api_advertiser_pendingCampaigns}
    Log    ${api_advertiser_totalCampaigns}
    Get Campaign Count For Advertiser Base On Group Id              campaign_status=live
    Set Test Variable           ${db_advertiser_liveCampaigns}          ${campaign_count_db}
    Log     ${db_advertiser_liveCampaigns}
    Get Campaign Count For Advertiser Base On Group Id              campaign_status=pending
    Set Test Variable           ${db_advertiser_pendingCampaigns}           ${campaign_count_db}
    Log     ${db_advertiser_pendingCampaigns}
    Get Campaign Count For Advertiser Base On Group Id              campaign_status=total
    Set Test Variable           ${db_advertiser_totalCampaigns}         ${campaign_count_db}
    Log     ${db_advertiser_totalCampaigns}
    Run Keyword If              ${db_advertiser_liveCampaigns}>=1   Set Test Variable   ${db_advertiser_status}     Active
    Run Keyword Unless          ${db_advertiser_liveCampaigns}>=1   Set Test Variable   ${db_advertiser_status}     Inactive
    Should Be Equal As Strings              ${api_advertiser_status}                ${db_advertiser_status}
    Should Be Equal As Strings              ${api_advertiser_liveCampaigns}         ${db_advertiser_liveCampaigns}
    Should Be Equal As Strings              ${api_advertiser_pendingCampaigns}      ${db_advertiser_pendingCampaigns}
    Should Be Equal As Strings              ${api_advertiser_totalCampaigns}        ${db_advertiser_totalCampaigns}


Get Campaign Count For Advertiser Base On Group Id
    Comment       Work in conjunction with "Extract Campaign Info From PAC1.1 And Compare to DB", ${group_id} is inherited.
    ...                 Campaign live = status 1 or 2 and start date in the past and end date in future
    ...                 Campaign pending = status 1 or 2 and start date in future, end date in future
    ...                 Campaign total = live campaign, pending campaign, ended campaign (do not include archived)
    [Arguments]         ${campaign_status}=live
    Run Keyword if    '${campaign_status}'=='live'    Set Test Variable     ${sql_query}    select count(1) as cnt from (select distinct campaign_id from campaign_groups where campaign_id in (select distinct id from campaign where partner_id=(select id from partner where name='${advertiser_name}') and status in(1) and start_time<NOW() and end_time>NOW()) and group_id='${group_id}') as a;
    Run Keyword if    '${campaign_status}'=='pending'    Set Test Variable     ${sql_query}    select count(1) as cnt from (select distinct campaign_id from campaign_groups where campaign_id in (select distinct id from campaign where partner_id=(select id from partner where name='${advertiser_name}') and status != 3 and start_time>NOW()) and group_id='${group_id}') as a;
    Run Keyword if    '${campaign_status}'=='total'    Set Test Variable     ${sql_query}    select count(1) as cnt from (select distinct c.id from campaign c join campaign_groups cg on c.id = cg.campaign_id join partner p on c.partner_id = p.id where c.status != 3 and cg.group_id = ${group_id} and p.name = '${advertiser_name}') as a;
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    ${sql_query}
    Set Test Variable    ${campaign_count_db}      ${queryResults[0][0]}
    Disconnect From Database


#----------------------------------------------------------------------------------------------------------------------------
#PAC 1.1.4

Get Average CPM by DataSource Id
    [Arguments]     ${datasourceId}=39
    ...             ${deviceTypeIds}=[1,2]
    ...             ${trafficTypeIds}=[]
    ...             ${creativeSizeIds}=[]
    ...             ${creativeType}="video"
    ...             ${expected_status_code}=400
    ...             ${success}=false
    # Set Test Variable   ${uri_link}     /pac-api/partner/channelCPM?datasourceId=${datasourceId}
    Set Test Variable   ${uri_link}     /pac-api/partner/forecastCPM
    Set Test Variable   ${data}    {"datasourceId":${datasourceId},"deviceTypeIds":${deviceTypeIds},"trafficTypeIds":${trafficTypeIds},"creativeSizeIds":${creativeSizeIds},"creativeType":${creativeType}}

    # ${missing_count}=           Get Count           ${data}         MISSING
    # Run Keyword If      '${missing_count}'>='1'     Remove Json Key Contain MISSING for Get Average CPM by DataSource via API
    # Log             ${data}


    PAC API     uri=${uri_link}
    ...         request_type=POST
    ...         data=${data}
    ...         expected_status_code=${expected_status_code}
    ...         success=${success}

    Run Keyword If    '${expected_status_code}'=='200'
    ...     Compare Average CPM value by datasource id API Response with Database    datasourceId=${datasourceId}
    ...     deviceTypeIds=${deviceTypeIds}
    ...     trafficTypeIds=${trafficTypeIds}
    ...     creativeSizeIds=${creativeSizeIds}
    ...     creativeType=${creativeType}


Compare Average CPM value by datasource id API Response with Database
    [Arguments]     ${datasourceId}=NA
    ...             ${deviceTypeIds}=NA
    ...             ${trafficTypeIds}=NA
    ...             ${creativeSizeIds}=NA
    ...             ${creativeType}=NA

    ${avgCpm}=    Get JSON Value    ${body}    /avgCpm
    Set Suite Variable    ${API_avgCpm}    ${avgCpm}

    Connect To Database    ${DB_API_MODULE_NAME}
    ...                    ${DB_NAME_RHINO}
    ...                    ${DB_USER}
    ...                    ${DB_PASSWORD}
    ...                    ${DB_HOST}
    ...                    ${DB_PORT}

    Log    ${deviceTypeIds}

    ${deviceTypeIds}=       Evaluate    '${deviceTypeIds}'.replace(']',')').replace('[','(')
    ${trafficTypeIds}=      Evaluate    '${trafficTypeIds}'.replace(']',')').replace('[','(')
    ${creativeSizeIds}=     Evaluate    '${creativeSizeIds}'.replace(']',')').replace('[','(')
    ${creativeType}=     Evaluate    '${creativeType}'.replace('"','')

    Set Test Variable    ${Sql}    select IFNULL(avg(cpm), 0) avgCpm from forecast_channel_cpm where target_datasource_id=${datasourceId}

    Run Keyword If    ${trafficTypeIds}!=()     Set Test Variable    ${Sql}    ${Sql} and traffic_type_id in ${trafficTypeIds}
    Run Keyword If    ${deviceTypeIds}!=()      Set Test Variable    ${Sql}    ${Sql} and device_type_id in ${deviceTypeIds}
    Run Keyword If    '${creativeType}'!='NA'   Set Test Variable    ${Sql}    ${Sql} and creative_type = '${creativeType}'

    Log     ${Sql}
    @{query_results}     Query    ${Sql};
    Set Test Variable    ${db_avgCpm}     ${queryResults[0][0]}
    Disconnect From Database
    Log    ${db_avgCpm}
    Log    ${API_avgCpm}
    Should Be Equal As Numbers    ${db_avgCpm}    ${API_avgCpm}




# Remove Json Key Contain MISSING for Get Average CPM by DataSource via API
#     ${data}=        Remove String       ${data}     "datasourceId":"MISSING",
#     ${data}=        Remove String       ${data}     "deviceTypeIds":["MISSING"],
#     ${data}=        Remove String       ${data}     "trafficTypeIds":["MISSING"],
#     ${data}=        Remove String       ${data}     "creativeSizeIds":["MISSING"],
#     ${data}=        Remove String       ${data}     "creativeType":"MISSING",
#     ${data}=        Evaluate    '${data}'.replace(", }",'}').replace(",}",'}')
#     Set Test Variable       ${data}     ${data}



#----------------------------------------------------------------------------------------------------------------------------


####################################
#pac1.2
####################################
Get All Camapigns By GroupId via DB
    Comment      Use sql to get all campaign belong to certain group id
    [Arguments]     ${groupid}=1        ${partnerId}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(id) from campaign where (id in (select campaign_id from campaign_groups where group_id=${groupid}) and partner_id=${partnerid} and status<>3);
    Set Test Variable    ${campaign_count_db}      ${queryResults[0][0]}
    Disconnect From Database

#############################
#pac1.3
##############################
Get UI element accesses from page URL PAC1.3
    [Arguments]     ${uri}=     ${expected_status_code}=200     ${success}=NA       ${validation}=YES
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Accept=application/json
    #${resp}=   Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable      ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If     '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless     '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${validation}'=='YES'      Check Validation If Response 200

Check Validation If Response 200
    ${campaign}=        Get Json Value          ${body}             /campaign
    Validate List Of Keywords       keyword_string=${campaign}          keyword=id,name,startDate,endDate,timezone,budget,statistics,impressionGoal,impressionDelivered,clicks,ctr,revenue,cost,margin

Validate Parent Adgroup
    [Arguments]     ${parent_id}=NA         ${parent_name}=NA       ${parent_statusDisplay}=NA      ${startDate}=NA     ${endDate}=NA
    ${parent}=          Get Json Value          ${body}             /bundles/0/parent
    Log     ${parent}
    Validate List Of Keywords       keyword_string=${parent}            keyword=id,name,status,startDate,endDate,timezone,budget,statistics,impressionGoal,impressionDelivered,clicks,ctr,revenue,cost,margin
    Extract Bundle Index From Parent Id         parent_id=${parent_id}
    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/id                            ${parent_id}
    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/name                          ${parent_name}
    #Run Keyword Unless     '${parent_status}'=='NA'    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/status                        ${parent_status}
    Run Keyword Unless      '${startDate}'=='NA'        Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/startDate                     ${startDate}
    Run Keyword Unless      '${endDate}'=='NA'          Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/endDate                       ${endDate}
    #Run Keyword Unless     '${parent_statusDisplay}'=='NA' Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/parent/statusDisplay                 ${parent_statusDisplay}
    #parent status is a bit of a combination, so we'll have to validate it differently

Validate Child Adgroup
    [Arguments]     ${parent_id}=NA
    ...             ${child_id}=NA
    ...             ${child_name}=NA
    ...             ${child_statusDisplay}="Live"
    ...             ${startDate}="${REGRESSION_START_DATE}"
    ...             ${endDate}="${REGRESSION_END_DATE}"
    ${child}=           Get Json Value          ${body}             /bundles/0/children
    Log    ${child}
    Validate List Of Keywords       keyword_string=${child}             keyword=id,name,status,startDate,endDate,timezone,budget,statistics,impressionGoal,impressionDelivered,clicks,ctr,revenue,cost,margin,cpm
    Extract Bundle Index From Parent Id     parent_id=${parent_id}
    Extract Child Index From Child Id       child_id=${child_id}
    Log     ${body}
    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/id                             ${child_id}
    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/name                           ${child_name}
    #Json Value Should Equal        ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/status                         ${child_status}
    Json Value Should Equal     ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/statusDisplay                  ${child_statusDisplay}
    ${StartDate_JSON}=    Get Json Value         ${body}         /campaign/startDate
    Log    ${StartDate_JSON}
    Log    ${startDate}
    Should Be Equal As Strings    ${StartDate_JSON}      ${startDate}
    ${EndDate_JSON}=    Get Json Value         ${body}         /campaign/endDate
    Should Be Equal As Strings    ${EndDate_JSON}      ${endDate}
    #${cpm_Json}=  Get JSON Value  /bundles/${bundle_index_found}/children/${child_index_found}/statistics/cpm
    #Get cpm for PAC_1.3.1 from db
    #Json Value Should Equal        ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/startDate                      ${startDate}
    #Json Value Should Equal        ${body}     /bundles/${bundle_index_found}/children/${child_index_found}/endDate                        ${endDate}


Get All Parent And Child By CampaignId via DB
    [Arguments]     ${campaignId}=1
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(*) from ad_group where status in (1,2) and bundle in (1) and campaign_id=${campaignId};
    Set Test Variable    ${parent_count_db}      ${queryResults[0][0]}
    @{query_results}     Query    select count(*) from ad_group where status in (1,2) and bundle in (0) and campaign_id=${campaignId};
    Set Test Variable    ${child_count_db}      ${queryResults[0][0]}
    ${parent_and_child_count_db}=      Evaluate    ${parent_count_db} + ${child_count_db}
    Set Test Variable       ${parent_and_child_count_db}    ${parent_and_child_count_db}
    Disconnect From Database

#here we enter a string
#enter a list of keywords folow by commas
#do a regex on each keyword against the string
Validate List Of Keywords
    [Arguments]    ${keyword_string}=${body}    ${keyword}=NA
    @{keyword_list}=    String.Split String    ${keyword}    ,
    ${keyword_count}=    Get Length    ${keyword_list}
    :FOR    ${index}    IN RANGE   0    ${keyword_count}
    \    Log     Index: ${index}
    \    ${keyword_temp}=    Get From List    ${keyword_list}    ${index}
    \    Log    ${keyword_temp}
    \    Should Match Regexp    ${keyword_string}    ${keyword_temp}

Get Parent Count From Campaign
    [Arguments]     ${campaign_result}=${body}
    ${bundles_array}=               Get Json Value              ${campaign_result}          /bundles
    Log     ${bundles_array}
    ${bundle_count}=            Get Count               ${bundles_array}                "parent"
    Set Test Variable           ${parent_count}         ${bundle_count}

Get Child Count From Bundle Index
    [Arguments]     ${campaign_result}=${body}          ${bundle_index}=0
    Log     ${bundle_index}
    ${child_array}=             Get Json Value              ${campaign_result}          /bundles/${bundle_index}/children
    Log     ${child_array}
    ${child_count}=             Get Count               ${child_array}              "id"
    Set Test Variable           ${child_count}          ${child_count}


#return the array position (0,1,2 etc)
Extract Bundle Index From Parent Id
    [Arguments]     ${campaign_result}=${body}          ${parent_id}=NA
    Log     ${campaign_result}
    Log     ${parent_id}
    Set Test Variable       ${bundle_index_found}           NA
    ${bundles_array}=               Get Json Value              ${campaign_result}          /bundles
    Log     ${bundles_array}
    ${bundle_count}=            Get Count               ${bundles_array}                "parent"
    :FOR    ${index}    IN RANGE   0    ${bundle_count}
    \       Log     Index: ${index}
    \       ${string_temp}=             Get Json Value      ${campaign_result}      /bundles/${index}/parent/id
    \       Run Keyword If      '${string_temp}'=='${parent_id}'    Set Test Variable       ${bundle_index_found}           ${index}
    Log     Found Parent at position: ${bundle_index_found}

#return the array position (0,1,2 etc)
#when there are multiple child, we want to find out what position is this child id belong to.
Extract Child Index From Child Id
    [Arguments]     ${campaign_result}=${body}          ${child_id}=NA
    Log     ${campaign_result}
    Log     ${child_id}
    Set Test Variable       ${child_index_found}            NA
    ${child_array}=             Get Json Value                      ${campaign_result}          /bundles/${bundle_index_found}/children
    ${child_count}=             Get Count               ${child_array}              "id"
    Log     ${child_count}
    :FOR    ${index}    IN RANGE   0    ${child_count}
    \       Log     Index: ${index}
    \       ${string_temp}=             Get Json Value      ${campaign_result}      /bundles/${bundle_index_found}/children/${index}/id
    \       Run Keyword If      '${string_temp}'=='${child_id}'     Set Test Variable       ${child_index_found}            ${index}
    Log     Found Child at position: ${child_index_found}
    Should Not Be Equal As Strings       ${child_index_found}       NA

##############
#1.3.1

Validate data for PAC_1.3.1 for response code 200
    Json Value Should Equal     ${body}     /campaign/id                            ${campaignId}
    Json Value Should Equal     ${body}     /campaign/name                          "05_RTB_Mopub"
    ${StartDate_JSON}=    Get Json Value         ${body}         /campaign/startDate
    Should Be Equal As Strings    ${StartDate_JSON}      ${startDate}
    ${EndDate_JSON}=    Get Json Value         ${body}         /campaign/endDate
    Log     ${EndDate_JSON}
    Log     ${endDate}
    Log     ${REGRESSION_END_DATE}
    Should Be Equal As Strings    ${EndDate_JSON}      ${endDate}

Get cpm for PAC_1.3.1 from db
    [Arguments]     ${childID}=
    ...             ${cpm_JSON}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select (cost_per_unit * 1000) as cpm from ad_group where status in (1,2) and bundle in (0) and id=${childID};
    Set Test Variable    ${cpm_db}      ${queryResults[0][0]}
    Log     ${cpm_db}
    Should be equal as strings  ${cpm_db}   ${cpm_Json}
    Disconnect From Database

##############
#1.3.2
###########
Get Audit Trail Log for Campaign From API
    [Arguments]     ${uri}=
    ...             ${expected_status_code}=200
    ...             ${expected_success}=NA
    ...             ${expected_reason_code}=
    ...             ${expected_reason_desc}=
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log    ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless  '${expected_success}'=='NA'  Should Match Regexp    ${body}   "success":${expected_success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${expected_success}
    Run keyword If  '${resp.status_code}'=='400'     Should Match Regexp    ${body}   "reason_code":${expected_reason_code}
    Run keyword If  '${resp.status_code}'=='200'     Validate keywords PAC1.3.2 for response 200


Validate keywords PAC1.3.2 for response 200
    Validate List Of Keywords       keyword_string=${body}          keyword=success,transaction_id,advertiserId,campaignId,advertiserName,campaignName,campaignAuditTrailList
    ${campaignAuditTrailList}=      Get Json Value          ${body}             /campaignAuditTrailList
    Validate List Of Keywords       keyword_string=${campaignAuditTrailList}          keyword=id,modifiedDate,userName,entityId,entityName,entityAction,prevVal,newVal


##############
#1.3.3
###########

Get Campaign Report History for Campaign From API
    [Arguments]     ${uri}=
    ...             ${expected_status_code}=200
    ...             ${expected_success}=NA
    ...             ${expected_reason_code}=
    ...             ${expected_reason_desc}=
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless  '${expected_success}'=='NA'  Should Match Regexp    ${body}   "success":${expected_success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${expected_success}
    Run keyword If  '${resp.status_code}'=='400'     Should Match Regexp    ${body}   "reason_code":${expected_reason_code}
    Run keyword If  '${resp.status_code}'=='200'     Validate keywords PAC1.3.3 for response 200



Validate keywords PAC1.3.3 for response 200
    Validate List Of Keywords       keyword_string=${body}                      keyword=success,transaction_id,advertiserId,campaignId,advertiserName,campaignName,reportHistoryList
    ${reportHistoryList}=           Get Json Value          ${body}             /reportHistoryList
    Log     ${reportHistoryList}
    Validate List Of Keywords       keyword_string=${reportHistoryList}          keyword=id,reportDate,measurementType,ftpRemoteHost,fileName,ftpTime


##############
#1.3.4
###########

Get Additional Report Campaign Summary
    [Arguments]     ${uri}=
    ...             ${campaign_id}=
    ...             ${expected_status_code}=200
    ...             ${expected_reason_code}=
    ...             ${expected_reason_desc}=
    ...             ${expected_success}=
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    Set Test Variable       ${uri1}     ${uri}/${campaign_id}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri1}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless  '${expected_success}'=='NA'  Should Match Regexp    ${body}   "success":${expected_success}

    PAC API        uri=${uri1}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${expected_success}
    Run keyword If  '${resp.status_code}'=='400'     Should Match Regexp    ${body}   "reason_code":${expected_reason_code}
    Run keyword If  '${resp.status_code}'=='400'     Should Match Regexp    ${body}   "reason_desc":${expected_reason_desc}


#---------------------------------------------------------------------------------------------------------------
# 1.3.5 Get list of parent Adgroup Id with no household targeting for a given campaign
#---------------------------------------------------------------------------------------------------------------
Get list of parent Adgroup Id with no household targeting for a given campaign
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log    ${body}
    #Run Keyword If  '${response_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${response_code}
    #Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Set Test Variable   ${keywords}     success,transaction_id,ids
    Run Keyword If    '${response_code}'=='200'    Validate List Of Keywords   ${body}    ${keywords}


#---------------------------------------------------------------------------------------------------------------
# 1.3.6 Get campaign and parent spend from campaign id
#---------------------------------------------------------------------------------------------------------------
Get campaign and parent spend from campaign id
    [Arguments]     ${campaignId}=
    ...             ${expected_status_code}=400
    ...             ${success}=false
    Set Test Variable    ${uri}    pac-api/campaign/spend-eCPM?campaignId=${campaignId}
    PAC API     uri=${uri}               request_type=GET
    ...         expected_status_code=${expected_status_code}
    ...         success=${success}
    Run Keyword If    '${expected_status_code}'=='200'    Get Parent List For Validations


Get Parent List For Validations
    ${parentList}=    Get JSON Value     ${body}    /parentList
    Log    ${parentList}
    Set Test Variable    ${parentIDs}   [
    ${id_count}=    Get Count    ${parentList}    "id"
    :FOR    ${index}    IN RANGE   0    ${id_count}
    \    Log     Index: ${index}
    \    ${temp_id}=    Get Json Value    ${parentList}     /${index}/id
    \    Log    ${temp_id}
    \    ${parentIDs}=    Catenate    ${parentIDs}"${temp_id}",
    Log    ${parentIDs}
    ${parentIDs}=    Catenate    ${parentIDs}]
    ${parentIDs}=       Evaluate    '${parentIDs}'.replace(',]',']')
    Log    ${parentIDs}
    Set Suite Variable    ${Parents}    ${parentIDs}


Get spend from Metamarkets API
    [Arguments]     ${campaignID}=
    ...             ${parent_ad_group_ids}=
    Log     ${campaignID}
    Log     ${parent_ad_group_ids}
    Create Session    docker    https://api.mmx.io
    Set Test Variable    ${url}    /query/dimension

    Set Test Variable    ${Authorization}    Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5NjI0YmZlMC01NzNhLTQ0ZmQtOWY5NC1mNDBhNzFlM2M5YjkiLCJ0eXBlIjoic3RhdGljIiwidmVyc2lvbiI6InYwIiwidXNlcm5hbWUiOiJzYWZmQDRpbmZvLmNvbSIsImlzcyI6ImRhc2gvcHJvZCIsImlhdCI6MTUxMTM4NjYzNSwiZXhwIjoxNTQyOTIyNjM1fQ.4K1iYoTQOeodpxrhWC4yWhYmzUlLBwXrWAaQ633Q81U
    ${headers}      Create Dictionary
    ...             Content-type=application/json
    ...             Accept=application/json
    ...             Authorization=${Authorization}
    Log    ${headers}
    Set Test Variable    ${interval}    "2017-01-01T00-07/2018-12-07T24-07"
    Set Test Variable    ${limit}       10
    Set Test Variable    ${dataView}    "4info-main/explore-new-wins"
    Set Test Variable    ${orderBy}     "total_spend_corrected"
    Comment    Post Request for Dimension Tables Campaign to get total spend
    Set Test Variable    ${data_Metamarkets_campaign}    {"interval":${interval}, "limit":${limit}, "dataView":${dataView}, "orderBy":${orderBy}, "metrics":[${orderBy}], "dimensionFilters": [{"dimension": "campaign_id", "values":["${campaignID}"]}], "dimension":"campaign_id"}
    Log    ${data_Metamarkets_campaign}
    ${campaign_Metamarkets}=    RequestsLibrary.Post Request
    ...                         docker
    ...                         uri=${url}
    ...                         data=${data_Metamarkets_campaign}
    ...                         headers=${headers}
    Log    Response: '${campaign_Metamarkets.content}'
    Set Suite Variable       ${campaign_Metamarkets}     ${campaign_Metamarkets.content}
    Log     ${campaign_Metamarkets}
    Comment    Post Request for Dimension Tables Parent Adgroup to get total spend
    Set Test Variable    ${data_Metamarkets_parent}    {"interval":${interval}, "limit":${limit}, "dataView":${dataView}, "orderBy":${orderBy}, "metrics":[${orderBy}], "dimensionFilters": [{"dimension": "parent_ad_group_id", "values":${parent_ad_group_ids}}], "dimension":"parent_ad_group_id"}
    ${parent_Metamarkets}=      RequestsLibrary.Post Request
    ...                         docker
    ...                         uri=${url}
    ...                         data=${data_Metamarkets_parent}
    ...                         headers=${headers}
    Log    Response: '${parent_Metamarkets.content}'
    Set Suite Variable       ${parent_Metamarkets}     ${parent_Metamarkets.content}
    Log     ${parent_Metamarkets}


Compare Campaign data for API with Dimension
    ${campaign_spend}    Get JSON Value    ${campaign_Metamarkets}    /result/0/total_spend_corrected
    ${campaign_spend}=    Convert to Number   ${campaign_spend}    2
    ${campaign_spend_response}    Get Json Value    ${body}    /spend
    ${campaign_spend_response}=    Convert to Number   ${campaign_spend_response}    2
    Should be Equal As Numbers    ${campaign_spend_response}    ${campaign_spend}


Compare Parent data for API with Dimension
    ${parent_count}    Get Count    ${body}    "id"
    :FOR    ${index}    IN RANGE   0    ${parent_count}
    \    Log     Index: ${index}
    \    ${parent_id}=    Get Json Value    ${body}    /parentList/${index}/id
    \    ${parent_spend}=    Get Json Value    ${body}    /parentList/${index}/spend
    \    Compare api parent spend with dimension result    parentID_apiResult=${parent_id}    spend_apiResult=${parent_spend}


Compare api parent spend with dimension result
    [Arguments]     ${parentID_apiResult}=
    ...             ${spend_apiResult}=
    ${dimension_parents}    Get JSON Value    ${parent_Metamarkets}     /result
    ${parent_dimension_count}    Get Count    ${parent_Metamarkets}    "parent_ad_group_id"
    :FOR    ${index1}    IN RANGE   0    ${parent_dimension_count}
    \    Log     Index: ${index1}
    \    ${temp_parent_id}=    Get Json Value    ${dimension_parents}    /${index1}/parent_ad_group_id
    \    ${temp_parent_spend}=    Get Json Value    ${dimension_parents}    /${index1}/total_spend_corrected
    \    ${temp_parent_spend}=    Convert to Number   ${temp_parent_spend}    1
    \    Run Keyword If     '${parentID_apiResult}'=='${temp_parent_id}'    Should Be Equal as Numbers     ${spend_apiResult}    ${temp_parent_spend}




#---------------------------------------------------------------------------------------------------------------

##################################
#end pac1.3
####################
#pac1.4.1
###################
Get Campaign Details From DB
    [Arguments]     ${campaignId}=1
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select id,name,status,start_time_ui,end_time_ui,zoneinfo_time_zone,external_campaign_id,insertion_order,control_gp_size from campaign where id='${campaignId}'
    @{query_results2}     Query    select ad_taxonomy_id,ad_taxonomy_level1_id from campaign_taxonomy_levels where campaign_id='${campaignId}';
    ${campaign_details}=        Create Dictionary           campaign_id=${queryResults[0][0]}
    ...                                                     campaign_name=${queryResults[0][1]}
    ...                                                     campaign_status=${queryResults[0][2]}
    ...                                                     campaign_start_time=${queryResults[0][3]}
    ...                                                     campaign_end_time=${queryResults[0][4]}
    ...                                                     campaign_zoneinfo_time_zone=${queryResults[0][5]}
    ...                                                     campaign_external_campaign_id=${queryResults[0][6]}
    ...                                                     campaign_insertion_order=${queryResults[0][7]}
    ...                                                     campaign_control_gp_size=${queryResults[0][8]}
    ...                                                     campaign_vertical=${queryResults2[0][0]}
    ...                                                     campaign_segment=${queryResults2[0][1]}
    Set Test Variable       ${campaign_details_db}          ${campaign_details}
    Disconnect From Database

Compare Campaign API vs DB
    ${db_campaign_id}=                      Get From Dictionary             ${campaign_details_db}              campaign_id
    ${db_campaign_name}=                    Get From Dictionary             ${campaign_details_db}              campaign_name
    ${db_campaign_status}=                  Get From Dictionary             ${campaign_details_db}              campaign_status
    ${db_campaign_start_time}=              Get From Dictionary             ${campaign_details_db}              campaign_start_time
    ${db_campaign_end_time}=                Get From Dictionary             ${campaign_details_db}              campaign_end_time
    ${db_campaign_time_zone}=               Get From Dictionary             ${campaign_details_db}              campaign_zoneinfo_time_zone
    ${db_campaign_external_campaign_id}=    Get From Dictionary             ${campaign_details_db}              campaign_external_campaign_id
    ${db_campaign_insertion_order}=         Get From Dictionary             ${campaign_details_db}              campaign_insertion_order
    ${db_campaign_control_gp_size}=         Get From Dictionary             ${campaign_details_db}              campaign_control_gp_size
    ${db_campaign_vertical}=                Get From Dictionary             ${campaign_details_db}              campaign_vertical
    ${db_campaign_segment}=                 Get From Dictionary             ${campaign_details_db}              campaign_segment
    ${db_campaign_id}=                      Convert To String               ${db_campaign_id}
    ${db_campaign_status}=                  Convert To String               ${db_campaign_status}
    ${db_campaign_vertical}=                Convert To String               ${db_campaign_vertical}
    ${db_campaign_segment}=                 Convert To String               ${db_campaign_segment}
    ${db_campaign_control_gp_size}=         Convert To String               ${db_campaign_control_gp_size}

    Json Value Should Equal     ${body}     /campaign/id                ${db_campaign_id}
    Json Value Should Equal     ${body}     /campaign/name              "${db_campaign_name}"
    Json Value Should Equal     ${body}     /campaign/status            ${db_campaign_status}
    #Json Value Should Equal        ${body}     /campaign/startDate         ${db_campaign_start_time}
    #Json Value Should Equal        ${body}     /campaign/endDate               ${db_campaign_end_time}
    ${api_campaign_start_date}=         Get Json Value      ${body}     /campaign/startDate
    ${api_campaign_end_date}=           Get Json Value      ${body}     /campaign/endDate
    Compare Date Time DB vs API         DB_date_time=${db_campaign_start_time}    API_date_time=${api_campaign_start_date}
    Compare Date Time DB vs API         DB_date_time=${db_campaign_end_time}    API_date_time=${api_campaign_end_date}
    #Json Value Should Equal        ${body}     /campaign/timezone              ${db_campaign_time_zone}
    ${api_campaign_timezone}=           Get Json Value      ${body}     /campaign/timezone
    Compare Timezone DB vs API      DB_timezone=${db_campaign_time_zone}            API_timezone=${api_campaign_timezone}
    Json Value Should Equal     ${body}     /campaign/externalId            "${db_campaign_external_campaign_id}"
    Json Value Should Equal     ${body}     /campaign/insertionOrder        "${db_campaign_insertion_order}"
    Json Value Should Equal     ${body}     /campaign/controlGroupSize      ${db_campaign_control_gp_size}
    Json Value Should Equal     ${body}     /campaign/vertical              ${db_campaign_vertical}
    Json Value Should Equal     ${body}     /campaign/segment               ${db_campaign_segment}

    #Advertiser ID, Advertiser Name,accesscontrol, storevisits,demodatasource,demohidchartId check are missing

Compare Date Time DB vs API
    [Arguments]     ${DB_date_time}=2015-06-11 00:00
    ...             ${API_date_time}="06/11/2015 00:00"
    Log    ${API_date_time}
    Log    ${DB_date_time}
    ${API_date_time}=    Remove String    ${API_date_time}    "
    Log    ${API_date_time}
    ${time_difference}    Subtract Date From Date
    ...                     date1=${DB_date_time}
    ...                     date2=${API_date_time}
    ...                     date1_format=%Y-%m-%d %H:%M:%S
    ...                     date2_format=%m/%d/%Y %H:%M:%S
    Log    ${time_difference}
    ${time_difference}=    Evaluate    abs(${time_difference})
    Should Be True    ${time_difference} <= 60

    #${db_converted_date_time}=         Convert Date        ${DB_date_time}         date_format=%Y-%m-%d %H:%M
    #${db_converted_date_time}=         Convert Date        ${db_converted_date_time}       datetime
    #Log    ${db_converted_date_time}
    #Run Keyword If     ${db_converted_date_time.second} > 30
    #${api_converted_date_time}=        Convert Date        ${api_converted_date_time}      date_format=%m/%d/%Y %H:%M:%S
    #${api_converted_date_time}=            Convert Date        ${api_converted_date_time}      date_format=%m/%d/%Y %H:%M
    #${api_converted_date_time}=            Convert Date        ${api_converted_date_time}      datetime
    #Log    ${api_converted_date_time}
    #Should Be Equal            ${db_converted_date_time.year}      ${api_converted_date_time.year}
    #Should Be Equal            ${db_converted_date_time.month}     ${api_converted_date_time.month}
    #Should Be Equal            ${db_converted_date_time.day}       ${api_converted_date_time.day}
    #Should Be Equal            ${db_converted_date_time.hour}      ${api_converted_date_time.hour}
    #Should Be Equal            ${db_converted_date_time.minute}    ${api_converted_date_time.minute}
    #Should Be Equal            ${db_converted_date_time.second}    ${api_converted_date_time.second}

Compare Timezone DB vs API
    [Arguments]     ${DB_timezone}=GMT              ${API_timezone}="G"
    Run Keyword If  '${DB_timezone}'=='GMT'                         Set Test Variable       ${DB_timezone_short}        "G"
    Run Keyword If  '${DB_timezone}'=='America/New_York'            Set Test Variable       ${DB_timezone_short}        "E"
    Run Keyword If  '${DB_timezone}'=='America/Chicago'             Set Test Variable       ${DB_timezone_short}        "C"
    Run Keyword If  '${DB_timezone}'=='America/Denver'              Set Test Variable       ${DB_timezone_short}        "M"
    Run Keyword If  '${DB_timezone}'=='America/Los_Angeles'         Set Test Variable       ${DB_timezone_short}        "P"
    Run Keyword If  '${DB_timezone}'=='America/Anchorage'           Set Test Variable       ${DB_timezone_short}        "A"
    Run Keyword If  '${DB_timezone}'=='Pacific/Honolulu'            Set Test Variable       ${DB_timezone_short}        "H"
    Should Be Equal         ${DB_timezone_short}            ${API_timezone}

#######
#PAC1.4.2
#1.4.2 Get master option list for store visits
##########################
Get Master Option List For Store Visits via DB
    [Arguments]     ${datasource_id}=1
    ...             ${insights_ui_flag}=true
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(*) from target_poi_name where datasource_id = ${datasource_id} and insights_ui_flag = ${insights_ui_flag}
    @{query_results2}     Query     select count(*) from target_poi_category where `id` in (select poi_category_id from target_poi_name where datasource_id = ${datasource_id} and insights_ui_flag = ${insights_ui_flag});
    Set Test Variable    ${store_visist_count_db}      ${queryResults[0][0]}
    Set Test Variable    ${store_visist_category_count_db}      ${queryResults2[0][0]}
    Disconnect From Database


#######################
#pac1.4.3
########################
Get Master Option List For Audience Insights via DB
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(*) from target_datasource_provider where audience_insight=1 and enabled=1;
    Set Test Variable    ${db_audience_insight_count}      ${queryResults[0][0]}
    Disconnect From Database


#######################
#pac1.4.4 Get master option list for ad taxonomy
#
Get Master Option List For Ad Taxonomy
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select count(*) from `ad_industry_taxonomy`;
    @{query_results2}     Query     select count(*) from `ad_industry_taxonomy_level1`;
    Set Test Variable    ${db_taxonomy_vertical}      ${queryResults[0][0]}
    Set Test Variable    ${db_taxonomy_segment}      ${queryResults2[0][0]}
    Disconnect From Database


##################################
#pac1.4.6 Create Campaign

Create New Campaign via API
    [Arguments]     ${campaign_name}=PAC_regression_campaign
    ...             ${campaign_status}=1
    ...             ${campaign_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${campaign_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${campaign_timezone}=G
    ...             ${campaign_external_id}="BVIexternalid"
    ...             ${campaign_io}=6624
    ...             ${campaign_channelId}=null
    ...             ${campaign_storeVisitDatasource}=1
    ...             ${campaign_vertical}=32
    ...             ${campaign_segment}=4303
    ...             ${campaign_congrol_group_size}=0
    ...             ${campaign_advertiser_id}=
    ...             ${campaign_access_control}=15                       #separate by ,
    ...             ${campaign_store_visit}={"topSelection": true, "poiNameId": 2370}                       #separate by ,
    ...             ${campaign_demo_data_source}=7
    ...             ${campaign_demohide_chart_id}=4, 6              #separate by ,
    ...             ${getCampaignIDFlag}=1
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${uri}=/pac-api/campaign/campaign?username=${QA_CATALINA_USER}
    #Log        ${QA_PAC}
    #Log        ${QA_PAC_PORT}
    Get Start Date
    Log    ${REGRESSION_START_DATE}
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    Log         ${uri}
    #${headers}=    Create Dictionary     Content-type=application/json   Accept=application/json
    Log     ${campaign_start_date_time}
    Log     ${campaign_end_date_time}
    Set Test Variable       ${data}     {"name":"${campaign_name}","status":${campaign_status},"startDate":"${campaign_start_date_time}","endDate":"${campaign_end_date_time}","timezone":"${campaign_timezone}","externalId":${campaign_external_id},"insertionOrder":"${campaign_io}","channelId":${campaign_channelId},"storeVisitDatasource":${campaign_storeVisitDatasource},"vertical":${campaign_vertical},"segment":${campaign_segment},"controlGroupSize":${campaign_congrol_group_size},"advertiserId":${campaign_advertiser_id},"accessControl":[${campaign_access_control}],"storeVisits":[${campaign_store_visit}],"demoDatasource":${campaign_demo_data_source},"demoHideChartId":[${campaign_demohide_chart_id}]}
    Log     ${data}
    ${missing_count}=           Get Count           ${data}         MISSING
    Log     ${missing_count}
    Run Keyword If      '${missing_count}'>='1'        Remove Json Key Contain MISSING
    Log         ${data}
    Run Keyword If  '${response_code}'=='200'   Set Test Variable       ${success}      true
    Run Keyword If  '${response_code}'=='400'   Set Test Variable       ${success}      false
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    # ${parent_campaign_id}=       Get JSON Value      ${body}     /campaign/id
    # Set Suite Variable      ${Campaign_Id}       ${parent_campaign_id}
    Log    ${getCampaignIDFlag}
    Run Keyword If    "${getCampaignIDFlag}"=="1"    Set Test Variable       @{parent_campaign_id}       Get JSON Value      ${body}     /campaign/id
    Run Keyword If    "${getCampaignIDFlag}"=="1"    Set Suite Variable      ${Campaign_Id}       ${parent_campaign_id}
    Run Keyword If    '${response_code}'=='200'       Create New Campaign Response Validation 200   campaign_name=${campaign_name}
    ...             campaign_status=${campaign_status}
    ...             campaign_start_date_time=${campaign_start_date_time}
    ...             campaign_end_date_time=${campaign_end_date_time}
    ...             campaign_timezone=${campaign_timezone}
    ...             campaign_external_id=${campaign_external_id}
    ...             campaign_io=${campaign_io}
    ...             campaign_channelId=${campaign_channelId}
    ...             campaign_storeVisitDatasource=${campaign_storeVisitDatasource}
    ...             campaign_vertical=${campaign_vertical}
    ...             campaign_segment=${campaign_segment}
    ...             campaign_congrol_group_size=${campaign_congrol_group_size}
    ...             campaign_advertiser_id=${campaign_advertiser_id}
    ...             campaign_access_control=${campaign_access_control}                      #separate by ,
    ...             campaign_store_visit=${campaign_store_visit}                            #separate by ,
    ...             campaign_demo_data_source=${campaign_demo_data_source}
    ...             campaign_demohide_chart_id=${campaign_demohide_chart_id}                #separate by ,
    ...             success=${success}
    Run Keyword If          '${response_code}'=='400'   Should Match Regexp     ${body}     "success":false


Remove Json Key Contain MISSING
    ${data}=        Remove String       ${data}     "name":"MISSING",
    ${data}=        Remove String       ${data}     "status":MISSING,
    ${data}=        Remove String       ${data}     "startDate":"MISSING",
    ${data}=        Remove String       ${data}     "endDate":"MISSING",
    ${data}=        Remove String       ${data}     "timezone":"MISSING",
    ${data}=        Remove String       ${data}     "externalId":"MISSING",
    ${data}=        Remove String       ${data}     "insertionOrder":"MISSING",
    ${data}=        Remove String       ${data}     "channelId":MISSING
    ${data}=        Remove String       ${data}     "storeVisitDatasource":MISSING,
    ${data}=        Remove String       ${data}     "vertical":MISSING,
    ${data}=        Remove String       ${data}     "segment":MISSING,
    ${data}=        Remove String       ${data}     "controlGroupSize":MISSING,
    ${data}=        Remove String       ${data}     "advertiserId":MISSING,
    ${data}=        Remove String       ${data}     "accessControl":[MISSING],
    ${data}=        Remove String       ${data}     "storeVisits":[MISSING],
    ${data}=        Remove String       ${data}     "demoDatasource":MISSING,
    ${data}=        Remove String       ${data}     "demoHideChartId":[MISSING],
    Set Test Variable       ${data}     ${data}


Create New Campaign Response Validation 200
    [Arguments]     ${campaign_name}=
    ...             ${campaign_status}=
    ...             ${campaign_start_date_time}=
    ...             ${campaign_end_date_time}=
    ...             ${campaign_timezone}=
    ...             ${campaign_external_id}=
    ...             ${campaign_io}=
    ...             ${campaign_channelId}=
    ...             ${campaign_storeVisitDatasource}=
    ...             ${campaign_vertical}=
    ...             ${campaign_segment}=
    ...             ${campaign_congrol_group_size}=
    ...             ${campaign_advertiser_id}=
    ...             ${campaign_access_control}=                     #separate by ,
    ...             ${campaign_store_visit}=                            #separate by ,
    ...             ${campaign_demo_data_source}=
    ...             ${campaign_demohide_chart_id}=              #separate by ,
    ...             ${success}=
    Log     ${body}
    Log    ${campaign_name}
    Run Keyword If  '${campaign_access_control}'=='MISSING'     Set Test Variable       ${campaign_access_control}      ${EMPTY}
    Json Value Should Equal     ${body}     /success                            ${success}
    Json Value Should Equal     ${body}     /campaign/name                      "${campaign_name}"
# Commented due to CM-477
    # Run Keyword If '${campaign_status}'=='MISSING'    ${campaign_status}=    Evaluate   '${campaign_status}'.replace("MISSING", '1')
    # Run Keyword If '${campaign_status}'=='null'   ${campaign_status}=    Evaluate   '${campaign_status}'.replace('null', '1')
    # Json Value Should Equal       ${body}     /campaign/status                    ${campaign_status}
    # Json Value Should Equal       ${body}     /campaign/startDate                 "${campaign_start_date_time}"
    # Json Value Should Equal       ${body}     /campaign/endDate                   "${campaign_end_date_time}"
    Json Value Should Equal     ${body}     /campaign/timezone                  "${campaign_timezone}"
    Run Keyword If      '${campaign_external_id}'=='MISSING'    Json Value Should Equal     ${body}     /campaign/externalId                null
    Run Keyword Unless  '${campaign_external_id}'=='MISSING'    Json Value Should Equal     ${body}     /campaign/externalId                ${campaign_external_id}
    Run Keyword If      '${campaign_io}'=='MISSING'             Json Value Should Equal     ${body}     /campaign/insertionOrder            null
    Run Keyword Unless  '${campaign_io}'=='MISSING'             Json Value Should Equal     ${body}     /campaign/insertionOrder            "${campaign_io}"

    Json Value Should Equal     ${body}     /campaign/channelId    ${campaign_channelId}
    Json Value Should Equal     ${body}     /campaign/vertical    ${campaign_vertical}
    Run Keyword If      '${campaign_segment}'=='MISSING'    Json Value Should Equal     ${body}     /campaign/segment           null
    Run Keyword Unless  '${campaign_segment}'=='MISSING'    Json Value Should Equal     ${body}     /campaign/segment           ${campaign_segment}

    Json Value Should Equal     ${body}     /campaign/controlGroupSize          ${campaign_congrol_group_size}
    Run Keyword If    "${campaign_advertiser_id}"!="MISSING"    Json Value Should Equal     ${body}     /campaign/advertiserId              ${campaign_advertiser_id}
    Run Keyword If  '${campaign_access_control}'=='MISSING'   Json Value Should Equal     ${body}     /campaign/accessControl             []
    Run Keyword Unless  '${campaign_access_control}'=='MISSING'   Json Value Should Equal     ${body}     /campaign/accessControl             [${campaign_access_control}]
    #store visit validation is unique.
    #Json Value Should Equal        ${body}     /campaign/storeVisits               [${campaign_store_visit}]
    Json Value Should Equal     ${body}     /campaign/demoDatasource            ${campaign_demo_data_source}
    Json Value Should Equal     ${body}     /campaign/demoHideChartId           [${campaign_demohide_chart_id}]
    ${campaignId}=      Get Json Value      ${body}                             /campaign/id
    Set Test Variable                       ${campaignId}                       ${campaignId}
    Log     ${campaign_storeVisitDatasource}
    ${campaign_storeVisitDatasource}=       Evaluate    '${campaign_storeVisitDatasource}'.replace("MISSING",'2')
    ${campaign_storeVisitDatasource}=       Evaluate    '${campaign_storeVisitDatasource}'.replace('null','2')
    Log     ${campaign_storeVisitDatasource}
    Json Value Should Equal  ${body}  /campaign/storeVisitDatasource  ${campaign_storeVisitDatasource}




Delete New Campaign via DB
    [Arguments]     ${campaign_name}=PAC_regression_campaign
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    Log    ${campaign_name}
    @{query_results}     Query    select id from `campaign` where name like '%${campaign_name}%';
    Disconnect From Database
    ${count}=           Get Length  ${query_results}
    :FOR    ${index}    IN RANGE   0    ${count}
    \       Log     Index: ${index}
    \       ${temp_campaign_id}=        Set Variable  ${query_results[${index}][0]}
    \       Cleanup Campaign From DB By Campaign ID     campaign_id=${temp_campaign_id}
    \       sleep   3s
#Using new method to remove ads and creative first before removing campaign
#           Run Keyword And Ignore Error            Remove Campaign By CampaignID               campaign_id=${temp_campaign_id}

###################################
#pac1.4.7 Update Campaign
Update New Campaign via API
    [Arguments]     ${campaign_name}=PAC_regression_campaign
    ...             ${campaign_status}=1
    ...             ${campaign_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${campaign_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${campaign_timezone}=G
    ...             ${campaign_external_id}="BVIexternalid"
    ...             ${campaign_io}=6624
    ...             ${campaign_channelId}=null
    ...             ${campaign_storeVisitDatasource}=    #[{"poiNameId": 999,"topSelection": true}, {"poiNameId": 2371,"topSelection": true}]
    ...             ${campaign_vertical}=32
    ...             ${campaign_segment}=4303
    ...             ${campaign_congrol_group_size}=0
    ...             ${campaign_advertiser_id}=
    ...             ${campaign_access_control}=15                         #separate by ,
    ...             ${campaign_store_visit}=                            #separate by ,
    ...             ${campaign_demo_data_source}=7
    ...             ${campaign_demohide_chart_id}=4, 6              #separate by ,
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${uri}=/pac-api/campaign/campaign/${campaignId}?username=${QA_CATALINA_USER}
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #Set Test Variable  ${uri}      /pac-api/campaign/campaign/${campaignId}?username=${QA_DEFAULT_USER}
    Log         ${uri}
    #${headers}    Create Dictionary     Content-type=application/json       Accept=application/json
    Set Test Variable       ${data}     {"name":"${campaign_name}","status":${campaign_status},"startDate":"${campaign_start_date_time}","endDate":"${campaign_end_date_time}","timezone":"${campaign_timezone}","externalId":${campaign_external_id},"insertionOrder":"${campaign_io}","channelId":${campaign_channelId},"storeVisitDatasource":${campaign_storeVisitDatasource},"vertical":${campaign_vertical},"segment":${campaign_segment},"controlGroupSize":${campaign_congrol_group_size},"advertiserId":${campaign_advertiser_id},"accessControl":[${campaign_access_control}],"storeVisits":[${campaign_store_visit}],"demoDatasource":${campaign_demo_data_source},"demoHideChartId":[${campaign_demohide_chart_id}]}
    ${missing_count}=           Get Count           ${data}         MISSING
    Run Keyword If      '${missing_count}'>='1'        Remove Json Key Contain MISSING
    Log             ${data}
    #${resp}=    RequestsLibrary.Put Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    Run Keyword If  '${response_code}'=='200'   Set Test Variable       ${success}      true
    Run Keyword If  '${response_code}'=='400'   Set Test Variable       ${success}      false
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PUT                             #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Log    ${campaign_name}
    Run Keyword If          '${response_code}'=='200'   Create New Campaign Response Validation 200    campaign_name=${campaign_name}
    ...             campaign_name=${campaign_name}
    ...             campaign_status=${campaign_status}
    ...             campaign_start_date_time=${campaign_start_date_time}
    ...             campaign_end_date_time=${campaign_end_date_time}
    ...             campaign_timezone=${campaign_timezone}
    ...             campaign_external_id=${campaign_external_id}
    ...             campaign_io=${campaign_io}
    ...             campaign_channelId=${campaign_channelId}
    ...             campaign_storeVisitDatasource=${campaign_storeVisitDatasource}
    ...             campaign_vertical=${campaign_vertical}
    ...             campaign_segment=${campaign_segment}
    ...             campaign_congrol_group_size=${campaign_congrol_group_size}
    ...             campaign_advertiser_id=${campaign_advertiser_id}
    ...             campaign_access_control=${campaign_access_control}                      #separate by ,
    ...             campaign_store_visit=${campaign_store_visit}                            #separate by ,
    ...             campaign_demo_data_source=${campaign_demo_data_source}
    ...             campaign_demohide_chart_id=${campaign_demohide_chart_id}                #separate by ,
    ...             success=${success}
    Run Keyword If          '${response_code}'=='400'   Should Match Regexp     ${body}     "success":false





###############################
#PAC1.4.9
Patch 1.4.9 Partial Update a Campaign
    [Arguments]     ${attribute}=
    ...             ${value}=
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${reason_code}=
    ...             ${reason_desc}=
    ...             ${errorDetail_reason_code}=
    ...             ${errorDetail_reason_desc}=
    ...             ${errorDetail_field}=
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    Log     ${uri}
    Set Test Variable       ${data}     {"attribute":${attribute}, "value":${value}}
    Log        ${data}
    ${missing_count}=   Get Count   ${data}     "MISSING"
    Run Keyword If      '${missing_count}'>='1'        Remove Json Key Contain MISSING for 1.4.9
    Log        ${data}
    Set Test Variable       ${final_data}     {"updateList":[${data}]}
    Log     ${final_data}
    #${resp}    RequestsLibrary.PATCH Request    docker   ${uri}        data=${final_data}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    #Run Keyword If  '${response_code}'=='400'       Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Set Test Variable       ${success}      true
    Run Keyword If  '${response_code}'=='400'   Set Test Variable       ${success}      false
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PATCH                               #GET, POST, PUT
    ...            data=${final_data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Run Keyword If  '${response_code}'=='400'       Should Match Regexp  ${body}  "reason_code":${reason_code}
    Run Keyword If  '${response_code}'=='400'       Should Match Regexp  ${body}  "reason_desc":${reason_desc}
    Run Keyword If  '${response_code}'=='200'       Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${reason_code}'=='400-999'     Check Multiple Error Handling for PAC1.4.9


Remove Json Key Contain MISSING for 1.4.9
    ${data1}=    Remove String   ${data}     "attribute":"MISSING",
    ${data1}=    Remove String   ${data1}     "value":"MISSING"
    ${data1}=       Evaluate    '${data1}'.replace(", }",'}')
    Set Test Variable       ${data}     ${data1}    #{"attribute":${attribute}, "value":${value}}
    Log        ${data}


Check Multiple Error Handling for PAC1.4.9
    Run Keyword If  '${errorDetail_reason_code}'='NA'   Should Match Regexp  ${body}  "errorDetail/reason_desc":${errorDetail_reason_desc}
    Run Keyword If  '${errorDetail_reason_code}'='NA'   Should Match Regexp  ${body}  Should Match Regexp  ${body}  "errorDetail/field":${errorDetail_field}
    Run Keyword If  '${errorDetail_reason_code}'='700-801'   Should Match Regexp  ${body}  "errorDetail/reason_desc":${errorDetail_reason_desc}
    Run Keyword If  '${errorDetail_reason_code}'='700-801'   Should Match Regexp  ${body}  Should Match Regexp  ${body}  "errorDetail/field":${errorDetail_field}



##################################
#PAC 1.5.1 advertiser name

Create Advertiser
    [Arguments]     ${uri}=     ${data}=    ${expected_status_code}=200     ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log   ${data}
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Set Test Variable      ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If     '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If      '${expected_status_code}'=='200'        Get Advertiser ID From Response
    Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}

Get Advertiser ID From Response
    ${advertiser_id}=       Get Json Value          ${body}         /advertiser/id
    Set Suite Variable      ${advertiser_id}        ${advertiser_id}

xxxDelete New Advertiser via DB
    [Arguments]     ${name}=QATEST
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string     delete from rhino.partner where name like '${name}%';
    Disconnect From Database

#################################
#PAC 1.5.2 Update advertiser name

Update Advertiser
    [Arguments]     ${uri}=     ${data}=    ${expected_status_code}=200     ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Put Request     docker     ${uri}     data=${data}     headers=${headers}
    #Set Test Variable      ${resp}     ${resp}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If     '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless     '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PUT                             #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}

###############################
# PAC 1.5.3 check advertiser name exists or not

Get Advertiser
    [Arguments]     ${uri}=     ${data}=    ${expected_status_code}=200     ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}         headers=${headers}
    #Set Test Variable      ${resp}     ${resp}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If     '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless     '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}

##################################

#PAC 1.6.2 get a list of household segment given a group id.
Extract datasourceSegments for HH segments
    [Arguments]     ${datasourceSegment_result}=${body}         ${datasource_id}=NA     ${datasource_name}=NA
    Log     ${datasourceSegment_result}
    Log     ${datasource_id}
    Set Test Variable       ${DatasourceSegment_index_found}            NA
    ${datasourceSegment_array}=             Get Json Value              ${datasourceSegment_result}         /datasourceSegment
    Log     ${datasourceSegment_array}
    ${datasourceSegment_count}=         Get Count               ${datasourceSegment_array}              "datasourceId"
    :FOR    ${index}    IN RANGE   0    ${datasourceSegment_count}
    \       Log     Index: ${index}
    \       ${string_temp}=             Get Json Value      ${datasourceSegment_result}     /datasourceSegment/${index}/datasourceId
    \       ${segments}=            Get JSON Value       ${datasourceSegment_result}       /datasourceSegment/${index}/segments
    \       Run Keyword If      '${string_temp}'=='${datasource_id}'    Set Test Variable       ${datasourceSegment_found}          ${index}
    \       Log    ${datasourceSegment_found}
    \       Run Keyword If      '${string_temp}'=='${datasource_id}'    Set Test Variable       ${segments_found}          ${segments}
    \       Log    ${segments_found}
    Log     Found Parent at position: ${datasourceSegment_found}
    Log     Found Segments : ${segments_found}
    Json Value Should Equal     ${datasourceSegment_result}     /datasourceSegment/${datasourceSegment_found}/datasourceName        ${datasource_name}


Validate Datasources has not value enabled as 1
    [Arguments]    ${datasourceName}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select enabled from `target_datasource` where datasource_name like '${datasourceName}';
    Set Test Variable    ${enabled_db}      ${query_results[0][0]}
    Disconnect From Database
    Should Not Be Equal    ${enabled_db}    1



##################################
# PAC 1.6.3 Get device segment master list
Extract datasourceSegments
    [Arguments]     ${datasourceSegment_result}=${body}         ${datasource_id}=NA     ${datasource_name}=NA
    Log     ${datasourceSegment_result}
    Log     ${datasource_id}
    Set Test Variable       ${DatasourceSegment_index_found}            NA
    ${datasourceSegment_array}=             Get Json Value              ${datasourceSegment_result}         /datasourceSegment
    Log     ${datasourceSegment_array}
    ${datasourceSegment_count}=         Get Count               ${datasourceSegment_array}              "datasourceId"
    :FOR    ${index}    IN RANGE   0    ${datasourceSegment_count}
    \       Log     Index: ${index}
    \       ${string_temp}=     Get Json Value      ${datasourceSegment_result}     /datasourceSegment/${index}/datasourceId
    \       ${segments}=            Get JSON Value       ${datasourceSegment_result}       /datasourceSegment/${index}/segments
    \       Run Keyword If      '${string_temp}'=='${datasource_id}'    Set Test Variable       ${datasourceSegment_found}          ${index}
    \       Run Keyword If      '${string_temp}'=='${datasource_id}'    Set Test Variable       ${segments_found}          ${segments}
    Log     Found Parent at position: ${datasourceSegment_found}
    Log     Found Segments : ${segments_found}
    Json Value Should Equal     ${datasourceSegment_result}     /datasourceSegment/${datasourceSegment_found}/datasourceName        ${datasource_name}


##################################
# PAC1.6.4 Create a new parent adgroup

Create Parent Adgroup via API
    [Arguments]     ${parent_name}=PAC_regression_parent
    ...             ${parent_status}=1
    ...             ${parent_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${parent_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${parent_timezone}=G
    ...             ${parent_campaign_id}=${campaignID}
    ...             ${parent_impression_goal}=10000
    ...             ${parent_externalID}="BVTExternalID"
    ...             ${parent_ip_fc_overall}=50
    ...             ${parent_ip_fc_daily}=40
    ...             ${parent_ip_fc_days}=1
    ...             ${parent_hh_overall}=30
    ...             ${parent_hh_daily}=30
    ...             ${parent_hh_days}=1
    ...             ${parent_device_overall}=40
    ...             ${parent_device_daily}=40
    ...             ${parent_device_days}=1
    ...             ${parent_measurement}=[12, 14]
    ...             ${parent_datapartner}=17
    ...             ${parent_ctrVcrOptimization}=
    ...             ${parent_eligibility}=false
    ...             ${parent_ctrOptimization}=0
    ...             ${parent_ctrVcrGoal}=null
    ...             ${parent_viewability}=null      #whole block of data
    ...             ${parent_is_conversion_tracked}=false                           #true or false
    ...             ${parent_targeting_hh_segment}=             #whole block of data
    ...             ${parent_targeting_boost}=true              #true or false
    ...             ${parent_targeting_device_segment}=             #whole block of data
    ...             ${parent_targeting_geofence_segment}=null               #whole block of data
    ...             ${parent_targeting_geofence_segment_exclude}=null               #true or false
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${getParentIDFlag}=1
    ...             ${HHMMSS_Flag}=0
    Log        ${QA_PAC}
    Log        ${QA_PAC_PORT}
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    Set Test Variable   ${uri}      pac-api/parent-adgroup/parent-adgroup
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    Run Keyword If    '${parent_ctrVcrOptimization}' != 'MISSING'    Set Test Variable    ${parent_ctrVcrOptimization}    {"eligibility": ${parent_eligibility}, "ctrOptimization": ${parent_ctrOptimization}, "goal": ${parent_ctrVcrGoal}}
    Run Keyword If    '${parent_ctrOptimization}' == 'MISSING'    Set Test Variable    ${parent_ctrVcrOptimization}    {"goal": ${parent_ctrVcrGoal}}
    Run Keyword If    '${parent_ctrVcrGoal}' == 'MISSING'    Set Test Variable    ${parent_ctrVcrOptimization}    {"ctrOptimization": ${parent_ctrOptimization}}
    Run Keyword If    '${parent_eligibility}' == 'MISSING'    Set Test Variable    ${parent_eligibility}    {"eligibility": ${parent_eligibility}}
    Set Test Variable       ${data}     {"name":"${parent_name}","status":${parent_status},"startDate":"${parent_start_date_time}","endDate":"${parent_end_date_time}","timezone":"${parent_timezone}","campaignId":${parent_campaign_id},"impressionGoal":${parent_impression_goal},"externalId":${parent_externalID},"ipFcOverall":${parent_ip_fc_overall},"ipFcDaily":${parent_ip_fc_daily},"ipFcDays":${parent_ip_fc_days},"hhFcOverall":${parent_hh_overall},"hhFcDaily":${parent_hh_daily},"hhFcDays":${parent_hh_days},"deviceFcOverall":${parent_device_overall},"deviceFcDaily":${parent_device_daily},"deviceFcDays":${parent_device_days},"measurement":${parent_measurement},"datapartner":${parent_datapartner},"ctrVcrOptimization": ${parent_ctrVcrOptimization},"viewability":${parent_viewability},"isConversionTracked":${parent_is_conversion_tracked},"targeting":{"householdSegments":[${parent_targeting_hh_segment}],"boost":${parent_targeting_boost},"deviceSegments":[${parent_targeting_device_segment}],"geofenceSegment":${parent_targeting_geofence_segment},"geofenceSegmentExcluded":${parent_targeting_geofence_segment_exclude}}}
    ${missing_count}=           Get Count           ${data}         MISSING
    Run Keyword If      '${missing_count}'>='1'     Remove Json Key Contain MISSING for Parent Adgroup via API
    Log             ${data}
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    #Json Value Should Equal      ${body}       /success        ${success}
    # ${parent_id}=       Get JSON Value      ${body}     /parent/id
    # Set Suite Variable      ${Parent_id}       ${parent_id}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Log    ${getParentIDFlag}
    Run Keyword If    "${getParentIDFlag}"=="1"    Set Test Variable       @{parent_id}      Get JSON Value      ${body}     /parent/id
    Run Keyword If    "${getParentIDFlag}"=="1"    Set Suite Variable      ${Parent_id}       ${parent_id}
    Run Keyword If    '${resp.status_code}'=='200'   Validate Parent Adgroup Data for response 200      parent_name=${parent_name}
    ...             parent_status=${parent_status}
    ...             parent_start_date_time=${parent_start_date_time}
    ...             parent_end_date_time=${parent_end_date_time}
    ...             parent_timezone=${parent_timezone}
    ...             parent_campaign_id=${parent_campaign_id}
    ...             parent_impression_goal=${parent_impression_goal}
    ...             parent_externalID=${parent_externalID}
    ...             parent_ip_fc_overall=${parent_ip_fc_overall}
    ...             parent_ip_fc_daily=${parent_ip_fc_daily}
    ...             parent_ip_fc_days=${parent_ip_fc_days}
    ...             parent_hh_overall=${parent_hh_overall}
    ...             parent_hh_daily=${parent_hh_daily}
    ...             parent_hh_days=${parent_hh_days}
    ...             parent_device_overall=${parent_device_overall}
    ...             parent_device_daily=${parent_device_daily}
    ...             parent_device_days=${parent_device_days}
    ...             parent_measurement=${parent_measurement}
    ...             parent_datapartner=${parent_datapartner}
    ...             parent_ctrOptimization=${parent_ctrOptimization}
    ...             parent_eligibility=${parent_eligibility}
    ...             parent_ctrVcrGoal=${parent_ctrVcrGoal}
    ...             parent_ctrVcrOptimization=${parent_ctrVcrOptimization}
    ...             parent_viewability=${parent_viewability}
    ...             parent_is_conversion_tracked=${parent_is_conversion_tracked}
    ...             parent_targeting_hh_segment=${parent_targeting_hh_segment}
    ...             parent_targeting_boost=${parent_targeting_boost}
    ...             parent_targeting_device_segment=${parent_targeting_device_segment}
    ...             parent_targeting_geofence_segment=${parent_targeting_geofence_segment}
    ...             parent_targeting_geofence_segment_exclude=${parent_targeting_geofence_segment_exclude}
    ...             HHMMSS_Flag=${HHMMSS_Flag}

Validate Parent Adgroup Data for response 200
    [Arguments]     ${parent_name}=
    ...             ${parent_status}=
    ...             ${parent_start_date_time}=
    ...             ${parent_end_date_time}=
    ...             ${parent_timezone}=
    ...             ${parent_campaign_id}=
    ...             ${parent_impression_goal}=
    ...             ${parent_externalID}=
    ...             ${parent_ip_fc_overall}=
    ...             ${parent_ip_fc_daily}=
    ...             ${parent_ip_fc_days}=
    ...             ${parent_hh_overall}=
    ...             ${parent_hh_daily}=
    ...             ${parent_hh_days}=
    ...             ${parent_device_overall}=
    ...             ${parent_device_daily}=
    ...             ${parent_device_days}=
    ...             ${parent_measurement}=
    ...             ${parent_datapartner}=
    ...             ${parent_ctrOptimization}=
    ...             ${parent_eligibility}=
    ...             ${parent_ctrVcrGoal}=
    ...             ${parent_ctrVcrOptimization}=
    ...             ${parent_viewability}=
    ...             ${parent_is_conversion_tracked}=
    ...             ${parent_targeting_hh_segment}=
    ...             ${parent_targeting_boost}=
    ...             ${parent_targeting_device_segment}=
    ...             ${parent_targeting_geofence_segment}=
    ...             ${parent_targeting_geofence_segment_exclude}=
    ...             ${HHMMSS_Flag}=
    Log     ${body}
    Json Value Should Equal  ${body}  /parent/name   "${parent_name}"
    ${response_start_date}=     Get JSON Value      ${body}  /parent/startDate
    ${response_end_date}=     Get JSON Value      ${body}  /parent/endDate
    Log    ${HHMMSS_Flag}
    Run Keyword If   '${HHMMSS_Flag}'=='0'      Should Be Equal As Strings    ${response_start_date}      "${parent_start_date_time}:00"
    Run Keyword If   '${HHMMSS_Flag}'=='0'      Should Be Equal As Strings    ${response_end_date}        "${parent_end_date_time}:59"
    Run Keyword If   '${HHMMSS_Flag}'=='1'      Should Be Equal As Strings    ${response_start_date}      "${parent_start_date_time}"
    Run Keyword If   '${HHMMSS_Flag}'=='2'      Should Be Equal As Strings    ${response_end_date}        "${parent_end_date_time}"

    Json Value Should Equal  ${body}  /parent/timezone  "${parent_timezone}"
    Json Value Should Equal  ${body}  /parent/campaignId  ${parent_campaign_id}

    ${parent_impression_goal}=       Evaluate    '${parent_impression_goal}'.replace("MISSING",'null')
    Json Value Should Equal  ${body}  /parent/impressionGoal   "${parent_impression_goal}"
    Json Value Should Equal  ${body}  /parent/externalId  ${parent_externalID}
    Json Value Should Equal  ${body}  /parent/ipFcOverall  ${parent_ip_fc_overall}

    ${parent_ip_fc_daily}=       Evaluate    '${parent_ip_fc_daily}'.replace("MISSING",'null')
    Json Value Should Equal  ${body}  /parent/ipFcDaily  ${parent_ip_fc_daily}

    ${parent_ip_fc_days}=       Evaluate    '${parent_ip_fc_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/ipFcDays  ${parent_ip_fc_days}

    Json Value Should Equal  ${body}  /parent/hhFcOverall  ${parent_hh_overall}
    Json Value Should Equal  ${body}  /parent/hhFcDaily  ${parent_hh_daily}

    ${parent_hh_days}=       Evaluate    '${parent_hh_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/hhFcDays  ${parent_hh_days}

    Json Value Should Equal  ${body}  /parent/deviceFcOverall  ${parent_device_overall}
    Json Value Should Equal  ${body}  /parent/deviceFcDaily  ${parent_device_daily}

    ${parent_device_days}=       Evaluate    '${parent_device_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/deviceFcDays  ${parent_device_days}

    Json Value Should Equal  ${body}  /parent/measurement   ${parent_measurement}
    Json Value Should Equal  ${body}  /parent/datapartner  ${parent_datapartner}

    Run Keyword If    '${parent_ctrVcrGoal}' == 'MISSING'    Set Test Variable    ${parent_ctrVcrOptimization}    {"eligibility": ${parent_eligibility}, "ctrOptimization": ${parent_ctrOptimization}, "goal": null}
    Json Value Should Equal  ${body}  /parent/ctrVcrOptimization  ${parent_ctrVcrOptimization}
#   Json Value Should Equal  ${body}  /parent/viewability  ${parent_viewability}

    ${parent_is_conversion_tracked}=    Evaluate    '${parent_is_conversion_tracked}'.replace('1','true').replace('0','false')
    Json Value Should Equal  ${body}  /parent/isConversionTracked  ${parent_is_conversion_tracked}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_hh_segment}
    Json Value Should Equal  ${body}  /parent/targeting/boost  ${parent_targeting_boost}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_device_segment}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_hh_segment}

    Run Keyword If  '${parent_targeting_geofence_segment}'==""      Evaluate    "${parent_targeting_geofence_segment}".replace("", null)
    ...    Json Value Should Equal  ${body}  /parent/targeting/geofenceSegment  ${parent_targeting_geofence_segment}
    Run Keyword If  '${parent_targeting_geofence_segment}'=="MISSING"      Evaluate    "${parent_targeting_geofence_segment}".replace("MISSING", 'null')
    ...    Json Value Should Equal  ${body}  /parent/targeting/geofenceSegment  ${parent_targeting_geofence_segment}
    Json Value Should Equal  ${body}  /parent/targeting/geofenceSegmentExcluded  ${parent_targeting_geofence_segment_exclude}



Remove Json Key Contain MISSING for Parent Adgroup via API
    ${data}=        Remove String       ${data}     "name":"MISSING",
    ${data}=        Remove String       ${data}     "status":MISSING,
    ${data}=        Remove String       ${data}     "startDate":"MISSING",
    ${data}=        Remove String       ${data}     "endDate":"MISSING",
    ${data}=        Remove String       ${data}     "timezone":"MISSING",
    ${data}=        Remove String       ${data}     "campaignId":MISSING,
    ${data}=        Remove String       ${data}     "impressionGoal":MISSING,
    ${data}=        Remove String       ${data}     "externalId":"MISSING",
    ${data}=        Remove String       ${data}     "ipFcOverall":MISSING,
    ${data}=        Remove String       ${data}     "ipFcDaily":MISSING,
    ${data}=        Remove String       ${data}     "ipFcDays":MISSING,
    ${data}=        Remove String       ${data}     "hhFcOverall":[MISSING],
    ${data}=        Remove String       ${data}     "hhFcDaily":[MISSING],
    ${data}=        Remove String       ${data}     "hhFcDays":MISSING,
    ${data}=        Remove String       ${data}     "deviceFcOverall":[MISSING],
    ${data}=        Remove String       ${data}     "deviceFcDaily":[MISSING],
    ${data}=        Remove String       ${data}     "deviceFcDays":[MISSING],
    ${data}=        Remove String       ${data}     "measurement":[MISSING],
    ${data}=        Remove String       ${data}     "datapartner":[MISSING],
    ${data}=        Remove String       ${data}     "viewability":{MISSING},
    ${data}=        Remove String       ${data}     "requirementType":MISSING,
    ${data}=        Remove String       ${data}     "measurableGoal":MISSING,
    ${data}=        Remove String       ${data}     "viewableGoal":MISSING,
    ${data}=        Remove String       ${data}     "viPercentage":MISSING,
    ${data}=        Remove String       ${data}     "extrapolate":"MISSING",
    ${data}=        Remove String       ${data}     "isConversionTracked":[MISSING],
    ${data}=        Remove String       ${data}     "householdSegments":[MISSING],
    ${data}=        Remove String       ${data}     "boost":[MISSING],
    ${data}=        Remove String       ${data}     "deviceSegments":[MISSING],
    ${data}=        Remove String       ${data}     "geofenceSegment":"MISSING",
    ${data}=        Remove String       ${data}     "geofenceSegmentExcluded":[MISSING],
    # ${data}=        Remove String       ${data}     "ctrVcrOptimization":[MISSING],
    # ${data}=        Remove String       ${data}     "ctrOptimization":MISSING,
    # ${data}=        Remove String       ${data}     "goal":MISSING,
    ${data}=        Evaluate    '${data}'.replace(", }",'}').replace(",}",'}')
    Set Test Variable       ${data}     ${data}



Delete New Parent Adgroup via DB
    [Arguments]         ${parentName}=PAC_regression_parent
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select id from `ad_group` where name like '${parentName}%';
    Disconnect From Database
    ${count}=           Get Length  ${query_results}
    :FOR    ${index}    IN RANGE   0    ${count}
    \       Log     Index: ${index}
    \       ${temp_parent_id}=      Set Variable  ${query_results[${index}][0]}
    \       Remove AdGroup By BundleID          ag_bundle_id=${temp_parent_id}


Get Parent adgroup details from DB
    [Arguments]     ${search_name}=${parent_name}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_parentAdGroup}     Query    select a.id, a.name,cast(a.status as char) as status,a.start_date,a.end_date,case zoneinfo_time_zone when "GMT" then "G" when "America/New_York" then "E" when "America/Chicago" then "C" when "America/Denver" then "M" when "America/Los_Angeles" then "P" when "America/Anchorage" then "A" when "Pacific/Honolulu" then "H" end as zoneinfo_time_zone, cast(a.campaign_id as character) as campaign_id, a.ioimpressiongoal, a.external_id, IFNULL(a.ip_freq_cap_overall_units,'null') as ip_freq_cap_overall_units, IFNULL(a.ip_freq_cap_daily_units,'null') as ip_freq_cap_daily_units, IFNULL(a.ip_freq_cap_days,'null') as ip_freq_cap_days, IFNULL(a.household_freq_cap_overall_units,'null') as household_freq_cap_overall_units, IFNULL(a.household_freq_cap_daily_units,'null') as household_freq_cap_daily_units, IFNULL(a.household_freq_cap_days,'null') as household_freq_cap_days, IFNULL(a.freq_cap_overall_units,'null') as freq_cap_overall_units, IFNULL(a.freq_cap_daily_units,'null') as freq_cap_daily_units, IFNULL(a.freq_cap_days,'null') as freq_cap_days, c.measurement_datasource_id as measurement_id, a.data_partner_id, b.ctr_opt as ctrOptimization, case is_conversion_tracked when 0 then 'false' when 1 then 'true' end as is_conversion_tracked,a.custom_targeting from `ad_group` as a join `adgroup_optimization` as b on a.id = b.adgroup_id join adgroups_measurement_datasource as c on a.id = c.adgroup_id where a.name like '${search_name}';
    ${Parent_adgroup_details}=   Create Dictionary      id=${query_results_parentAdGroup[0][0]}
    ...                                                 name=${query_results_parentAdGroup[0][1]}
    ...                                                 status=${query_results_parentAdGroup[0][2]}
    ...                                                 start_date=${query_results_parentAdGroup[0][3]}
    ...                                                 end_date=${query_results_parentAdGroup[0][4]}
    ...                                                 zoneinfo_time_zone=${query_results_parentAdGroup[0][5]}
    ...                                                 campaign_id=${query_results_parentAdGroup[0][6]}
    ...                                                 ioimpressiongoal=${query_results_parentAdGroup[0][7]}
    ...                                                 external_id=${query_results_parentAdGroup[0][8]}
    ...                                                 ip_freq_cap_overall_units=${query_results_parentAdGroup[0][9]}
    ...                                                 ip_freq_cap_daily_units=${query_results_parentAdGroup[0][10]}
    ...                                                 ip_freq_cap_days=${query_results_parentAdGroup[0][11]}
    ...                                                 household_freq_cap_overall_units=${query_results_parentAdGroup[0][12]}
    ...                                                 household_freq_cap_daily_units=${query_results_parentAdGroup[0][13]}
    ...                                                 household_freq_cap_days=${query_results_parentAdGroup[0][14]}
    ...                                                 freq_cap_overall_units=${query_results_parentAdGroup[0][15]}
    ...                                                 freq_cap_daily_units=${query_results_parentAdGroup[0][16]}
    ...                                                 freq_cap_days=${query_results_parentAdGroup[0][17]}
    ...                                                 measurement_id=${query_results_parentAdGroup[0][18]}
    ...                                                 data_partner_id=${query_results_parentAdGroup[0][19]}
    ...                                                 optimize_bundle=${query_results_parentAdGroup[0][20]}
    ...                                                 is_conversion_tracked=${query_results_parentAdGroup[0][21]}
    ...                                                 custom_targeting=${query_results_parentAdGroup[0][22]}
    Set Test Variable       ${Parent_adgroup_db}        ${Parent_adgroup_details}
    Disconnect From Database

Compare Parent Adgroup API vs DB
    ${id}                       Get From Dictionary     ${Parent_adgroup_db}    id
    ${id}=                      Convert To Integer   ${id}
    ${response_id}=    Get Json Value         ${body}         /parent/id
    ${response_id}=                      Convert To Integer   ${response_id}
    Should Be Equal      ${response_id}      ${id}

    ${db_name}=                 Get From Dictionary     ${Parent_adgroup_db}    name
    Json Value Should Equal     ${body}     /parent/name                    "${db_name}"

    ${db_status}=               Get From Dictionary     ${Parent_adgroup_db}    status
    ${db_status}=               Convert To String  ${db_status}
    Json Value Should Equal     ${body}     /parent/status                  ${db_status}

    #${db_start_date}=          Get From Dictionary     ${Parent_adgroup_db}    start_date
    #${db_conv_start_date}=     Convert datetime        ${db_start_date}            date_format='%m/%d/%Y %H:%M'
    #${db_conv_start_date}=     Convert Date            ${db_conv_start_date}       datetime    exclude_millis=yes
    #Json Value Should Equal    ${body}     /parent/startDate               "${db_conv_start_date}"

    #${db_end_date}=            Get From Dictionary     ${Parent_adgroup_db}    end_date
    #${db_conv_end_date}=       Convert Date        ${db_end_date}          date_format=%m/%d/%Y %H:%M
    #${db_conv_end_date}=       Convert Date        ${db_conv_end_date}     datetime
    #Json Value Should Equal    ${body}     /parent/endDate                 "${db_conv_end_date}"

    ${db_timezone}=             Get From Dictionary     ${Parent_adgroup_db}    zoneinfo_time_zone
    Json Value Should Equal     ${body}     /parent/timezone                "${db_timezone}"

    ${db_campaign_id}=          Get From Dictionary     ${Parent_adgroup_db}    campaign_id
    ${db_campaign_id}=          Convert To String  ${db_campaign_id}
    Json Value Should Equal     ${body}     /parent/campaignId              ${db_campaign_id}

    ${db_impressionGoal}=       Get From Dictionary     ${Parent_adgroup_db}    ioimpressiongoal
    ${db_impressionGoal}=       Convert To String   ${db_impressionGoal}
    Json Value Should Equal     ${body}     /parent/impressionGoal          "${db_impressionGoal}"

    ${db_externalId}=           Get From Dictionary     ${Parent_adgroup_db}    external_id
    ${db_externalId}=           Convert To String   ${db_externalId}
    Json Value Should Equal     ${body}     /parent/externalId              "${db_externalId}"

    ${db_ipFcOverall}=          Get From Dictionary     ${Parent_adgroup_db}    ip_freq_cap_overall_units
    ${db_ipFcOverall}=          Convert To String  ${db_ipFcOverall}
    #Json Value Should Equal    ${body}     /parent/ipFcOverall             ${db_ipFcOverall}

    ${db_ipFcDaily}=            Get From Dictionary     ${Parent_adgroup_db}    ip_freq_cap_daily_units
    #Json Value Should Equal    ${body}     /parent/ipFcDaily               ${db_ipFcDaily}

    ${db_ipFcDays}=             Get From Dictionary     ${Parent_adgroup_db}    ip_freq_cap_days
    ${db_ipFcDays}=             Convert To String  ${db_ipFcDays}
    Json Value Should Equal     ${body}     /parent/ipFcDays                ${db_ipFcDays}

    ${db_hhFcOverall}=          Get From Dictionary     ${Parent_adgroup_db}    household_freq_cap_overall_units
    ${db_hhFcOverall}=          Convert To String  ${db_hhFcOverall}
    Json Value Should Equal     ${body}     /parent/hhFcOverall         ${db_hhFcOverall}

    ${db_hhFcDaily}=            Get From Dictionary     ${Parent_adgroup_db}    household_freq_cap_daily_units
    ${db_hhFcDaily}=            Convert To String  ${db_hhFcDaily}
    Json Value Should Equal     ${body}     /parent/hhFcDaily           ${db_hhFcDaily}

    ${db_hhFcDays}=             Get From Dictionary     ${Parent_adgroup_db}    household_freq_cap_days
    ${db_hhFcDays}=             Convert To String  ${db_hhFcDays}
    Json Value Should Equal     ${body}     /parent/hhFcDays            ${db_hhFcDays}

    ${db_deviceFcOverall}=      Get From Dictionary     ${Parent_adgroup_db}    freq_cap_overall_units
    ${db_deviceFcOverall}=             Convert To String  ${db_deviceFcOverall}
    Json Value Should Equal     ${body}     /parent/deviceFcOverall         ${db_deviceFcOverall}

    ${db_deviceFcDaily}=        Get From Dictionary     ${Parent_adgroup_db}    freq_cap_daily_units
    ${db_deviceFcDaily}=             Convert To String  ${db_deviceFcDaily}
    Json Value Should Equal     ${body}     /parent/deviceFcDaily           ${db_deviceFcDaily}

    ${db_deviceFcDays}=         Get From Dictionary     ${Parent_adgroup_db}    freq_cap_days
    ${db_deviceFcDays}=             Convert To String  ${db_deviceFcDays}
    Json Value Should Equal     ${body}     /parent/deviceFcDays            ${db_deviceFcDays}

    ${db_measurement}=          Get From Dictionary     ${Parent_adgroup_db}    measurement_id
    ${db_measurement}=             Convert To String    ${db_measurement}
    Json Value Should Equal     ${body}     /parent/measurement             [${db_measurement}]

    ${db_datapartner}=          Get From Dictionary     ${Parent_adgroup_db}    data_partner_id
    ${db_datapartner}=             Convert To String  ${db_datapartner}
    Json Value Should Equal     ${body}     /parent/datapartner             ${db_datapartner}

    ${db_ctrOptimization}=      Get From Dictionary     ${Parent_adgroup_db}    optimize_bundle
    ${db_ctrOptimization}=             Convert To String  ${db_ctrOptimization}
    Json Value Should Equal     ${body}     /parent/ctrVcrOptimization/ctrOptimization         ${db_ctrOptimization}

    ${db_isConversionTracked}=  Get From Dictionary     ${Parent_adgroup_db}   is_conversion_tracked
    #${db_isConversionTracked}=             Convert To String  ${db_isConversionTracked}
    Json Value Should Equal     ${body}     /parent/isConversionTracked     ${db_isConversionTracked}

    #${db_targeting}=           Get From Diectionary        ${Parent_adgroup_db}    custom_targeting


# This is useful for comparison API with another API.
Get parent adgroups detail And Compare Result
    ${parent_groupid}=     Get Json Value   ${body}   /parent/id
    Set Test Variable   ${body1.6.4}    ${body}
    Set Test Variable   ${uri}      /pac-api/parent-adgroup/parent-adgroup/${parent_groupid}
    #${result}=  RequestsLibrary.Get Request  docker     ${uri}
    #Log    Response: '${result.content}'
     PAC API        uri=${uri}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=200                     #normally 200 for working condition, 400 for failure
    ...            success=true

    Set Suite Variable       ${body1.6.1}     ${body}
    #Should Be Equal As Strings   ${result.status_code}   200

    ${Response_id}=      Get Json Value         ${body1.6.1}   /parent/id
    Should Be Equal      ${parent_groupid}      ${Response_id}

    ${parent_name}=      Get Json Value         ${body1.6.4}         /parent/name
    ${Response_name}=    Get Json Value         ${body1.6.1}        /parent/name
    Should Be Equal      ${parent_name}         ${Response_name}

    ${parent_status}=    Get Json Value         ${body1.6.4}         /parent/status
    ${Response_status}=  Get Json Value         ${body1.6.1}    /parent/status
    Should Be Equal      ${parent_status}       ${Response_status}

    ${parent_startDate}=    Get Json Value         ${body1.6.4}         /parent/startDate
    ${Response_startDate}=  Get Json Value         ${body1.6.1}    /parent/startDate
    Should Be Equal      ${parent_startDate}       ${Response_startDate}

    ${parent_endDate}=    Get Json Value         ${body1.6.4}         /parent/endDate
    ${Response_endDate}=  Get Json Value         ${body1.6.1}    /parent/endDate
    Should Be Equal      ${parent_endDate}       ${Response_endDate}

    ${parent_timezone}=    Get Json Value         ${body1.6.4}         /parent/timezone
    ${Response_timezone}=  Get Json Value         ${body1.6.1}    /parent/timezone
    Should Be Equal      ${parent_timezone}       ${Response_timezone}

    ${parent_impressionGoal}=    Get Json Value         ${body1.6.4}         /parent/impressionGoal
    ${Response_impressionGoal}=  Get Json Value         ${body1.6.1}    /parent/impressionGoal
    Should Be Equal      ${parent_impressionGoal}       ${Response_impressionGoal}

    ${parent_externalId}=    Get Json Value         ${body1.6.4}         /parent/externalId
    ${Response_externalId}=  Get Json Value         ${body1.6.1}    /parent/externalId
    Should Be Equal      ${parent_externalId}       ${Response_externalId}

    ${parent_ipFcOverall}=    Get Json Value         ${body1.6.4}         /parent/ipFcOverall
    ${Response_ipFcOverall}=  Get Json Value         ${body1.6.1}    /parent/ipFcOverall
    Should Be Equal      ${parent_ipFcOverall}       ${Response_ipFcOverall}

    ${parent_ipFcDaily}=    Get Json Value         ${body1.6.4}         /parent/ipFcDaily
    ${Response_ipFcDaily}=  Get Json Value         ${body1.6.1}    /parent/ipFcDaily
    Should Be Equal      ${parent_ipFcDaily}       ${Response_ipFcDaily}

    ${parent_ipFcDays}=    Get Json Value         ${body1.6.4}         /parent/ipFcDays
    ${Response_ipFcDays}=  Get Json Value         ${body1.6.1}    /parent/ipFcDays
    Should Be Equal      ${parent_ipFcDays}       ${Response_ipFcDays}

    ${parent_hhFcOverall}=    Get Json Value         ${body1.6.4}         /parent/hhFcOverall
    ${Response_hhFcOverall}=  Get Json Value         ${body1.6.1}    /parent/hhFcOverall
    Should Be Equal      ${parent_hhFcOverall}       ${Response_hhFcOverall}

    ${parent_hhFcDaily}=    Get Json Value         ${body1.6.4}         /parent/hhFcDaily
    ${Response_hhFcDaily}=  Get Json Value         ${body1.6.1}    /parent/hhFcDaily
    Should Be Equal      ${parent_hhFcDaily}       ${Response_hhFcDaily}

    ${parent_hhFcDays}=    Get Json Value         ${body1.6.4}         /parent/hhFcDays
    ${Response_hhFcDays}=  Get Json Value         ${body1.6.1}    /parent/hhFcDays
    Should Be Equal      ${parent_hhFcDays}       ${Response_hhFcDays}

    ${parent_deviceFcOverall}=    Get Json Value         ${body1.6.4}         /parent/deviceFcOverall
    ${Response_deviceFcOverall}=  Get Json Value         ${body1.6.1}    /parent/deviceFcOverall
    Should Be Equal      ${parent_deviceFcOverall}       ${Response_deviceFcOverall}

    ${parent_deviceFcDaily}=    Get Json Value         ${body1.6.4}         /parent/deviceFcDaily
    ${Response_deviceFcDaily}=  Get Json Value         ${body1.6.1}    /parent/deviceFcDaily
    Should Be Equal      ${parent_deviceFcDaily}       ${Response_deviceFcDaily}

    ${parent_deviceFcDays}=    Get Json Value         ${body1.6.4}         /parent/deviceFcDays
    ${Response_deviceFcDays}=  Get Json Value         ${body1.6.1}    /parent/deviceFcDays
    Should Be Equal      ${parent_deviceFcDays}       ${Response_deviceFcDays}

    ${parent_measurement}=    Get Json Value         ${body1.6.4}         /parent/measurement
    ${Response_measurement}=  Get Json Value         ${body1.6.1}    /parent/measurement
    Should Be Equal      ${parent_measurement}       ${Response_measurement}

    ${parent_datapartner}=    Get Json Value         ${body1.6.4}         /parent/datapartner
    ${Response_datapartner}=  Get Json Value         ${body1.6.1}    /parent/datapartner
    Should Be Equal      ${parent_datapartner}       ${Response_datapartner}

    ${parent_viewability}=    Get Json Value         ${body1.6.4}         /parent/viewability
    ${Response_viewability}=  Get Json Value         ${body1.6.1}    /parent/viewability
    Should Be Equal      ${parent_viewability}       ${Response_viewability}

    ${parent_viewability_status}=    Get Json Value         ${body1.6.4}         /parent/viewability/status
    ${Response_viewability_status}=  Get Json Value         ${body1.6.1}    /parent/viewability/status
    Should Be Equal      ${parent_viewability_status}       ${Response_viewability_status}

    ${parent_isConversionTracked}=    Get Json Value         ${body1.6.4}         /parent/isConversionTracked
    ${Response_isConversionTracked}=  Get Json Value         ${body1.6.1}    /parent/isConversionTracked
    Should Be Equal      ${parent_isConversionTracked}       ${Response_isConversionTracked}

    ${parent_conversionTrackingPixels}=    Get Json Value         ${body1.6.4}         /parent/conversionTrackingPixels
    ${Response_conversionTrackingPixels}=  Get Json Value         ${body1.6.1}    /parent/conversionTrackingPixels
    Should Be Equal      ${parent_conversionTrackingPixels}       ${Response_conversionTrackingPixels}

    ${parent_targeting}=    Get Json Value         ${body1.6.4}         /parent/targeting
    ${Response_targeting}=  Get Json Value         ${body1.6.1}    /parent/targeting
    Should Be Equal      ${parent_targeting}       ${Response_targeting}

    ${parent_targeting_HHSegments}=    Get Json Value         ${body1.6.4}         /parent/targeting/householdSegments
    ${Response_targeting_HHSegments}=  Get Json Value         ${body1.6.1}    /parent/targeting/householdSegments
    Should Be Equal      ${parent_targeting_HHSegments}       ${Response_targeting_HHSegments}

    ${parent_targeting_HH_boost}=    Get Json Value         ${body1.6.4}         /parent/targeting/boost
    ${Response_targeting_HH_boost}=  Get Json Value         ${body1.6.1}    /parent/targeting/boost
    Should Be Equal      ${parent_targeting_HH_boost}       ${Response_targeting_HH_boost}

    ${parent_targeting_HH_boost}=    Get Json Value         ${body1.6.4}         /parent/targeting/boost
    ${Response_targeting_HH_boost}=  Get Json Value         ${body1.6.1}    /parent/targeting/boost
    Should Be Equal      ${parent_targeting_HH_boost}       ${Response_targeting_HH_boost}

    ${parent_targeting_HH_deviceSegments}=    Get Json Value         ${body1.6.4}         /parent/targeting/deviceSegments
    ${Response_targeting_HH_deviceSegments}=  Get Json Value         ${body1.6.1}    /parent/targeting/deviceSegments
    Should Be Equal      ${parent_targeting_HH_deviceSegments}       ${Response_targeting_HH_deviceSegments}

    ${parent_targeting_HH_geofenceSegment}=    Get Json Value         ${body1.6.4}         /parent/targeting/geofenceSegment
    ${Response_targeting_HH_geofenceSegment}=  Get Json Value         ${body1.6.1}    /parent/targeting/geofenceSegment
    Should Be Equal      ${parent_targeting_HH_geofenceSegment}       ${Response_targeting_HH_geofenceSegment}

    ${parent_targeting_HH_geofenceSegmentExcluded}=    Get Json Value         ${body1.6.4}         /parent/targeting/geofenceSegmentExcluded
    ${Response_targeting_HH_geofenceSegmentExcluded}=  Get Json Value         ${body1.6.1}    /parent/targeting/geofenceSegmentExcluded
    Should Be Equal      ${parent_targeting_HH_geofenceSegmentExcluded}       ${Response_targeting_HH_geofenceSegmentExcluded}

    ${parent_childAdGroups}=    Get Json Value         ${body1.6.4}         /parent/childAdGroups
    ${Response_childAdGroups}=  Get Json Value         ${body1.6.1}    /parent/childAdGroups
    Should Be Equal      ${parent_childAdGroups}       ${Response_childAdGroups}



Confirm DB Value is correct for goal in Database for optimization
    [Arguments]     ${ParentName}=
    ...             ${ctr_Optimization}=
    ...             ${goal}=
    ...             ${isNullFlag}=false
    Log    ${ParentName}
    Log    ${ctr_Optimization}

    Run Keyword If    '${isNullFlag}' == 'false'    Set Test Variable    ${Query}    select distinct goal from adgroup_optimization where adgroup_id = (select id from ad_group where name = '${ParentName}') and ctr_opt = ${ctr_Optimization};

    Run Keyword If    '${isNullFlag}' == 'true'    Set Test Variable    ${Query}    select distinct isnull(goal) as goal from adgroup_optimization where adgroup_id = (select id from ad_group where name = '${ParentName}') and ctr_opt = ${ctr_Optimization};

    Log    ${Query}

    Connect To Database     ${DB_API_MODULE_NAME}
    ...                     ${DB_NAME_RHINO}
    ...                     ${DB_USER}
    ...                     ${DB_PASSWORD}
    ...                     ${DB_HOST}
    ...                     ${DB_PORT}
    @{query_results}     Query    ${Query}
    Set Test Variable    ${DB_Goal}    ${query_results[0][0]}
    Log    ${DB_Goal}
    Disconnect From Database

    Should Be Equal As Strings    ${DB_Goal}    ${goal}




##################################
#PAC1.6.5 Update a parent adgroup
##################################

Update Parent Adgroup via API
    [Arguments]     ${response_parent_name}=
    ...             ${response_parent_status}=1
    ...             ${response_parent_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${response_parent_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${response_parent_timezone}=G
    ...             ${response_parent_campaign_id}=${Campaign_Id}
    ...             ${response_parent_impression_goal}=10000
    ...             ${response_parent_externalID}=BVT012345678
    ...             ${response_parent_ip_fc_overall}=50
    ...             ${response_parent_ip_fc_daily}=40
    ...             ${response_parent_ip_fc_days}=1
    ...             ${response_parent_hh_overall}=30
    ...             ${response_parent_hh_daily}=30
    ...             ${response_parent_hh_days}=1
    ...             ${response_parent_device_overall}=40
    ...             ${response_parent_device_daily}=40
    ...             ${response_parent_device_days}=1
    ...             ${response_parent_measurement}=[12]
    ...             ${response_parent_datapartner}=17
    ...             ${response_parent_ctrVcrOptimization}=
    ...             ${response_parent_ctrOptimization}=0
    ...             ${response_parent_ctrVcrGoal}=null
    ...             ${response_parent_eligibility}=false
    ...             ${response_parent_viewability}=null      #whole block of data
    ...             ${response_parent_is_conversion_tracked}=false                          #true or false
    ...             ${response_parent_targeting_hh_segment}=                #whole block of data
    ...             ${response_parent_targeting_boost}=false                #true or false
    ...             ${response_parent_targeting_device_segment}=                #whole block of data
    ...             ${response_parent_targeting_geofence_segment}=null              #whole block of data
    ...             ${response_parent_targeting_geofence_segment_exclude}=null              #true or false
    ...             ${updated_response_code}=200
    ...             ${updated_success}=true
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json       Accept=application/json
    ${parent_groupid}=     Get Json Value   ${body}   /parent/id
    Log     ParentID:${parent_groupid}

    Set Test Variable       ${uri1}         pac-api/parent-adgroup/parent-adgroup/${parent_groupid}
    Log         ${response_parent_viewability}

    Log    ${response_parent_ctrVcrOptimization}
    Log    ${response_parent_ctrOptimization}
    Log    ${response_parent_ctrVcrGoal}
    Log    ${response_parent_eligibility}

    Run Keyword If    '${response_parent_ctrVcrOptimization}' != 'MISSING'    Set Test Variable    ${response_parent_ctrVcrOptimization}    {"eligibility": ${response_parent_eligibility}, "ctrOptimization": ${response_parent_ctrOptimization}, "goal": ${response_parent_ctrVcrGoal}}
    Run Keyword If    '${response_parent_ctrOptimization}' == 'MISSING'    Set Test Variable    ${response_parent_ctrVcrOptimization}    {"eligibility": ${response_parent_eligibility}, "goal": ${response_parent_ctrVcrGoal}}
    Run Keyword If    '${response_parent_ctrVcrGoal}' == 'MISSING'    Set Test Variable    ${response_parent_ctrVcrOptimization}    {"eligibility": ${response_parent_eligibility}, "ctrOptimization": ${response_parent_ctrOptimization}}
    Run Keyword If    '${response_parent_eligibility}' == 'MISSING'    Set Test Variable    ${response_parent_ctrVcrOptimization}    {"ctrOptimization": ${response_parent_ctrOptimization}}
    Log    ${response_parent_ctrVcrOptimization}

    Set Test Variable       ${data}        {"name":"${response_parent_name}","status":${response_parent_status},"startDate":"${response_parent_start_date_time}","endDate":"${response_parent_end_date_time}","timezone":"${response_parent_timezone}","campaignId":${response_parent_campaign_id},"impressionGoal":${response_parent_impression_goal},"externalId":"${response_parent_externalID}","ipFcOverall":${response_parent_ip_fc_overall},"ipFcDaily":${response_parent_ip_fc_daily},"ipFcDays":${response_parent_ip_fc_days},"hhFcOverall":${response_parent_hh_overall},"hhFcDaily":${response_parent_hh_daily},"hhFcDays":${response_parent_hh_days},"deviceFcOverall":${response_parent_device_overall},"deviceFcDaily":${response_parent_device_daily},"deviceFcDays":${response_parent_device_days},"measurement":${response_parent_measurement},"datapartner":${response_parent_datapartner},"ctrVcrOptimization": ${response_parent_ctrVcrOptimization},"viewability":${response_parent_viewability},"isConversionTracked":${response_parent_is_conversion_tracked},"targeting":{"householdSegments":[${response_parent_targeting_hh_segment}],"boost":${response_parent_targeting_boost},"deviceSegments":[${response_parent_targeting_device_segment}],"geofenceSegment":${response_parent_targeting_geofence_segment},"geofenceSegmentExcluded":${response_parent_targeting_geofence_segment_exclude}}}
    ${missing_count1}=          Get Count           ${data}            MISSING
    Run Keyword If      '${missing_count1}'>='1'       Remove Json Key Contain MISSING for Parent Adgroup via API
    Log                 ${data}
    #${result1}=  RequestsLibrary.Put Request  docker     ${uri1}     data=${data}     headers=${headers}
    PAC API        uri=${uri1}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PUT                             #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${updated_response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${updated_success}
    Set Test Variable   ${result1}  ${resp}
    Log     ${result1}
    Set Suite Variable      ${body}    ${result1.content}
    Log     ${body}
    Should Be Equal As Strings   ${result1.status_code}   ${updated_response_code}
    Json Value Should Equal      ${body}       /success        ${updated_success}

    Run Keyword If    '${response_parent_ctrVcrGoal}' == 'MISSING'    Set Test Variable    ${response_parent_ctrVcrOptimization}    {"eligibility": ${response_parent_eligibility}, "ctrOptimization": ${response_parent_ctrOptimization}, "goal": null}

    Run Keyword If  '${result1.status_code}'=='200'   Validate Parent Adgroup Data for response 200 for Update parent adgroup       parent_name=${response_parent_name}
    ...             parent_status=${response_parent_status}
    ...             parent_start_date_time=${response_parent_start_date_time}
    ...             parent_end_date_time=${response_parent_end_date_time}
    ...             parent_timezone=${response_parent_timezone}
    ...             parent_campaign_id=${response_parent_campaign_id}
    ...             parent_impression_goal=${response_parent_impression_goal}
    ...             parent_externalID=${response_parent_externalID}
    ...             parent_ip_fc_overall=${response_parent_ip_fc_overall}
    ...             parent_ip_fc_daily=${response_parent_ip_fc_daily}
    ...             parent_ip_fc_days=${response_parent_ip_fc_days}
    ...             parent_hh_overall=${response_parent_hh_overall}
    ...             parent_hh_daily=${response_parent_hh_daily}
    ...             parent_hh_days=${response_parent_hh_days}
    ...             parent_device_overall=${response_parent_device_overall}
    ...             parent_device_daily=${response_parent_device_daily}
    ...             parent_device_days=${response_parent_device_days}
    ...             parent_measurement=${response_parent_measurement}
    ...             parent_datapartner=${response_parent_datapartner}
    ...             parent_ctrVcrOptimization=${response_parent_ctrVcrOptimization}
    ...             parent_viewability=${response_parent_viewability}
    ...             parent_is_conversion_tracked=${response_parent_is_conversion_tracked}
    ...             parent_targeting_hh_segment=${response_parent_targeting_hh_segment}
    ...             parent_targeting_boost=${response_parent_targeting_boost}
    ...             parent_targeting_device_segment=${response_parent_targeting_device_segment}
    ...             parent_targeting_geofence_segment=${response_parent_targeting_geofence_segment}
    ...             parent_targeting_geofence_segment_exclude=${response_parent_targeting_geofence_segment_exclude}



Validate Parent Adgroup Data for response 200 for Update parent adgroup
    [Arguments]     ${parent_name}=
    ...             ${parent_status}=
    ...             ${parent_start_date_time}=
    ...             ${parent_end_date_time}=
    ...             ${parent_timezone}=
    ...             ${parent_campaign_id}=
    ...             ${parent_impression_goal}=
    ...             ${parent_externalID}=
    ...             ${parent_ip_fc_overall}=
    ...             ${parent_ip_fc_daily}=
    ...             ${parent_ip_fc_days}=
    ...             ${parent_hh_overall}=
    ...             ${parent_hh_daily}=
    ...             ${parent_hh_days}=
    ...             ${parent_device_overall}=
    ...             ${parent_device_daily}=
    ...             ${parent_device_days}=
    ...             ${parent_measurement}=
    ...             ${parent_datapartner}=
    ...             ${parent_ctrVcrOptimization}=
    ...             ${parent_viewability}=
    ...             ${parent_is_conversion_tracked}=
    ...             ${parent_targeting_hh_segment}=
    ...             ${parent_targeting_boost}=
    ...             ${parent_targeting_device_segment}=
    ...             ${parent_targeting_geofence_segment}=
    ...             ${parent_targeting_geofence_segment_exclude}=
    ...             ${HHMMSS_Flag}=
    Log     ${body}
    Json Value Should Equal  ${body}  /parent/name   "${parent_name}"
    ${response_start_date}=     Get JSON Value      ${body}  /parent/startDate
    ${response_end_date}=     Get JSON Value      ${body}  /parent/endDate
    Log    ${HHMMSS_Flag}
    Run Keyword If   '${HHMMSS_Flag}'=='0'      Should Be Equal As Strings    ${response_start_date}      "${parent_start_date_time}:00"
    Run Keyword If   '${HHMMSS_Flag}'=='0'      Should Be Equal As Strings    ${response_end_date}        "${parent_end_date_time}:59"
    Run Keyword If   '${HHMMSS_Flag}'=='1'      Should Be Equal As Strings    ${response_start_date}      "${parent_start_date_time}"
    Run Keyword If   '${HHMMSS_Flag}'=='2'      Should Be Equal As Strings    ${response_end_date}        "${parent_end_date_time}"

    Json Value Should Equal  ${body}  /parent/timezone  "${parent_timezone}"
    #Json Value Should Equal  ${body}  /parent/campaignId  ${parent_campaign_id}

    ${parent_impression_goal}=       Evaluate    '${parent_impression_goal}'.replace("MISSING",'null')
    Json Value Should Equal  ${body}  /parent/impressionGoal   "${parent_impression_goal}"
    Json Value Should Equal  ${body}  /parent/externalId  "${parent_externalID}"
    Json Value Should Equal  ${body}  /parent/ipFcOverall  ${parent_ip_fc_overall}

    ${parent_ip_fc_daily}=       Evaluate    '${parent_ip_fc_daily}'.replace("MISSING",'null')
    Json Value Should Equal  ${body}  /parent/ipFcDaily  ${parent_ip_fc_daily}

    ${parent_ip_fc_days}=       Evaluate    '${parent_ip_fc_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/ipFcDays  ${parent_ip_fc_days}

    Json Value Should Equal  ${body}  /parent/hhFcOverall  ${parent_hh_overall}
    Json Value Should Equal  ${body}  /parent/hhFcDaily  ${parent_hh_daily}

    ${parent_hh_days}=       Evaluate    '${parent_hh_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/hhFcDays  ${parent_hh_days}

    Json Value Should Equal  ${body}  /parent/deviceFcOverall  ${parent_device_overall}
    Json Value Should Equal  ${body}  /parent/deviceFcDaily  ${parent_device_daily}

    ${parent_device_days}=       Evaluate    '${parent_device_days}'.replace('null','1').replace("MISSING", '1')
    Json Value Should Equal  ${body}  /parent/deviceFcDays  ${parent_device_days}

    Json Value Should Equal  ${body}  /parent/measurement  ${parent_measurement}
    Json Value Should Equal  ${body}  /parent/datapartner  ${parent_datapartner}
    Json Value Should Equal  ${body}  /parent/ctrVcrOptimization  ${parent_ctrVcrOptimization}
#   Json Value Should Equal  ${body}  /parent/viewability  ${parent_viewability}
    Json Value Should Equal  ${body}  /parent/isConversionTracked  ${parent_is_conversion_tracked}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_hh_segment}
    Json Value Should Equal  ${body}  /parent/targeting/boost  ${parent_targeting_boost}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_device_segment}
#   Json Value Should Equal  ${body}  /parent/endDate  ${parent_targeting_hh_segment}

    Run Keyword If  '${parent_targeting_geofence_segment}'==""      Evaluate    "${parent_targeting_geofence_segment}".replace("", null)
    ...     Json Value Should Equal  ${body}  /parent/targeting/geofenceSegment  ${parent_targeting_geofence_segment}
    Run Keyword If  '${parent_targeting_geofence_segment}'=="MISSING"      Evaluate    "${parent_targeting_geofence_segment}".replace("MISSING", 'null')
    ...     Json Value Should Equal  ${body}  /parent/targeting/geofenceSegment  ${parent_targeting_geofence_segment}
    Json Value Should Equal  ${body}  /parent/targeting/geofenceSegmentExcluded  ${parent_targeting_geofence_segment_exclude}


#################################
# PAC 1.6.6 Partially Update a parent adgroup

Partially Update Parent Adgroup via API
    [Arguments]         ${uri}=
    ...                 ${request_body}=
    ...                 ${partial_response_code}=NA
    ...                 ${partial_success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json       Accept=application/json
    Log             ${uri}
    Log             ${request_body}
    #${resp}=    RequestsLibrary.PATCH Request     docker     ${uri}     data=${request_body}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${partial_response_code}
    #Json Value Should Equal      ${body}       /success        ${partial_success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PATCH                               #GET, POST, PUT
    ...            data=${request_body}
    ...            expected_status_code=${partial_response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${partial_success}



#################################
#PAC1.6.8
Get Campaign ID from DB for PAC1.6.8 by Campaign Name
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select CAST(id AS UNSIGNED) as id from campaign where name='${campaign_name}'
    ${campaign_id_db}=        Create Dictionary           campaign_id=${queryResults[0][0]}
    ${campaignId}=            Get From Dictionary     ${campaign_id_db}    campaign_id
    Log     ${campaignId}
    Disconnect From Database


Get Parent Adgroup ID from DB for PAC1.6.8 by Parent Adgroup Name
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query    select CAST(id AS UNSIGNED) as id, left(start_date, 10) as start_date, left(end_date, 10) as end_date from ad_group where name='${parent_name}'
    ${parent_id_db}=        Create Dictionary       id=${queryResults[0][0]}
    ...                                             start_date=${queryResults[0][1]}
    ...                                             end_date=${queryResults[0][2]}
    ${ParentAdgroupID}=     Get From Dictionary     ${parent_id_db}    id
    ${ParentStartDate}=   Get From Dictionary     ${parent_id_db}    start_date
    ${ParentEndDate}=   Get From Dictionary     ${parent_id_db}    end_date
    Log     ${ParentAdgroupID}
    Disconnect From Database
    Set Test Variable   ${parent_id}    ${ParentAdgroupID}
    Set Test Variable   ${ParentStartDate}    ${ParentStartDate}
    Set Test Variable   ${ParentEndDate}    ${ParentEndDate}


Validate Active Parent Adgroup Result For Campaign
    Log  ${body}
    ${activeParentAdGroupList}=    Get Json Value         ${body}         /activeParentAdGroupList
    Log  ${activeParentAdGroupList}
    Should Be Equal As Strings        ${activeParentAdGroupList}       [{"startDate": "${ParentStartDate}", "endDate": "${ParentEndDate}", "id": ${parent_id}, "name": "${parent_name}"}]

    # Should Be Equal As Strings  ${body.activeParentAdGroupList}   [{"id":${expected_id},"name":"${expected_name}","startDate":"${expected_start_date}","endDate":"${expected_end_date}"}]
    # Json Value Should Equal  ${body}  /activeParentAdGroupList/id       ${expected_id}
    # Json Value Should Equal  ${body}  /activeParentAdGroupList/name     "${expected_name}"
    # Json Value Should Equal  ${body}  /activeParentAdGroupList/id       "${expected_start_date}"
    # Json Value Should Equal  ${body}  /activeParentAdGroupList/id       "${expected_end_date}"


#################################
#PAC1.6.9
Archive a parent adgroup
    [Arguments]     ${adgroupId}=
    ...             ${url}=
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${reason_code}=
    ...             ${reason_desc}=
    #Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    Log   ${adgroupId}
    #${resp}=  RequestsLibrary.Delete Request    docker     ${url}       headers=${headers}
    #Log     ${resp}
    #Set Suite Variable      ${body}    ${resp.content}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${url}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=DELETE                              #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='200'   Json Value Should Equal    ${body}    /archiveId        ${adgroupId}
    Run Keyword If  '${response_code}'=='400'   Json Value Should Equal    ${body}    /success          false
    Run Keyword If  '${response_code}'=='400'   Json Value Should Equal    ${body}    /reason_code      ${reason_code}
    Run Keyword If  '${response_code}'=='400'   Json Value Should Equal    ${body}    /reason_desc      ${reason_desc}

Delete Archived Parent Adgroup via DB
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string      update rhino.ad_group set status = 1 where status = 3 and name like 'PAC_regression_parent%';
    execute_sql_string      commit;
    Disconnect From Database
    Delete New Parent Adgroup via DB

#################################
#PAC1.6.10


Create a new campaign for PAC1.6.10
    [Arguments]     ${campaign_name}=PAC_regression_campaign_1610_001
    Set Test Variable       ${username}         ${QA_DEFAULT_USER}
    Get Start Date
    Create New Campaign via API         campaign_name=${campaign_name}
    ...                                 campaign_start_date_time=${todaysDate}
    ${Campaign_Id}=       Get JSON Value      ${body}     /campaign/id
    Set Suite Variable      ${campaignId}       ${Campaign_Id}
    Log         ${todaysDate}



Create Parent adgroup using Clone API
    [Arguments]     ${new_parent_name}="new_cloned_child"
    ...             ${campaignId}=
    ...             ${start_date}=${todays_date} 04:30
    ...             ${end_date}=${REGRESSION_END_DATE} 04:30
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session              docker    https://${QA_PAC}:${QA_PAC_PORT}
    ${parent_id}=     Get Json Value   ${body}   /parent/id
    Set Test Variable           ${uri}      pac-api/parent-adgroup/parent-adgroup/${parent_id}/clone/${campaignId}
    #${headers}                  Create Dictionary     Content-type=application/json     Accept=application/json
    Set Test Variable           ${data}     {"name":"${new_parent_name}","startDate":"${start_date}","endDate":"${end_date}"}
    ${missing_count}=           Get Count   ${data}         MISSING
    Run Keyword If              '${missing_count}'>='1'        Remove Json Key Contain MISSING for Parent Adgroup via API
    Log                         ${data}
    #${resp}=    RequestsLibrary.POST Request     docker     ${uri}     data=${data}   headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log    ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Run Keyword If    'resp.status_code'=='200'   ${parent_id}=    Evaluate    ${parent_id}+1
    Run Keyword If    'resp.status_code'=='200'   Run Keyword If     'resp.status_code'=='200'       ${parent_id}=   Convert To String   ${parent_id}
    Run Keyword If    'resp.status_code'=='200'   Set Test Variable       ${parent_id}       ${parent_id}
    Run Keyword If    'resp.status_code'=='400'   Should Match Regexp         ${body}    "success":false
    Run Keyword If    'resp.status_code'=='200'   Json Value Should Equal     ${body}    /parentId                  ${parentId}
    Run Keyword If    'resp.status_code'=='200'   Json Value Should Equal     ${body}    /campaignId                  ${campaignId}



Delete Clone parent via DB
    [Arguments]     ${name}=PAC_regression_clone_parent
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string     delete FROM rhino.ad_group where name like '${name}%';
    Disconnect From Database



Validate Viewability Comparison between Parent Adgroup and Clone Parent Adgroup
    [Arguments]     ${parentID}=
    ...             ${CloneParentID}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_parentAdGroup}     Query    SELECT requirement_type, measurable_goal, viewable_goal, vi_percentage, extrapolate FROM rhino.viewability_optimization where ad_group_id = ${parentID};
    ${Parent_adgroup_details}=   Create Dictionary      requirement_type=${query_results_parentAdGroup[0][0]}
    ...                                                 measurable_goal=${query_results_parentAdGroup[0][1]}
    ...                                                 viewable_goal=${query_results_parentAdGroup[0][2]}
    ...                                                 vi_percentage=${query_results_parentAdGroup[0][3]}
    ...                                                 extrapolate=${query_results_parentAdGroup[0][4]}
    Set Test Variable       ${Parent_adgroup_db}        ${Parent_adgroup_details}
    ${Parent_requirement_type}=     Get From Dictionary     ${Parent_adgroup_details}    requirement_type
    ${Parent_measurable_goal}=      Get From Dictionary     ${Parent_adgroup_details}    measurable_goal
    ${Parent_viewable_goal}=        Get From Dictionary     ${Parent_adgroup_details}    viewable_goal
    ${Parent_vi_percentage}=        Get From Dictionary     ${Parent_adgroup_details}    vi_percentage
    ${Parent_extrapolate}=          Get From Dictionary     ${Parent_adgroup_details}    extrapolate

    @{query_results_cloned_parentAdGroup}     Query    SELECT requirement_type, measurable_goal, viewable_goal, vi_percentage, extrapolate FROM rhino.viewability_optimization where ad_group_id = ${CloneParentID};
    ${clone_Parent_adgroup_details}=   Create Dictionary      clone_requirement_type=${query_results_cloned_parentAdGroup[0][0]}
    ...                                                 clone_measurable_goal=${query_results_cloned_parentAdGroup[0][1]}
    ...                                                 clone_viewable_goal=${query_results_cloned_parentAdGroup[0][2]}
    ...                                                 clone_vi_percentage=${query_results_cloned_parentAdGroup[0][3]}
    ...                                                 clone_extrapolate=${query_results_cloned_parentAdGroup[0][4]}
    Set Test Variable       ${cloned_Parent_adgroup_db}        ${clone_Parent_adgroup_details}
    ${Cloned_Parent_requirement_type}=     Get From Dictionary     ${cloned_Parent_adgroup_db}    clone_requirement_type
    ${Cloned_Parent_measurable_goal}=      Get From Dictionary     ${cloned_Parent_adgroup_db}    clone_measurable_goal
    ${Cloned_Parent_viewable_goal}=        Get From Dictionary     ${cloned_Parent_adgroup_db}    clone_viewable_goal
    ${Cloned_Parent_vi_percentage}=        Get From Dictionary     ${cloned_Parent_adgroup_db}    clone_vi_percentage
    ${Cloned_Parent_extrapolate}=          Get From Dictionary     ${cloned_Parent_adgroup_db}    clone_extrapolate
    Disconnect From Database
    Should Be Equal as Strings    ${Parent_requirement_type}    ${Cloned_Parent_requirement_type}
    Should Be Equal as Strings    ${Parent_measurable_goal}     ${Cloned_Parent_measurable_goal}
    Should Be Equal as Strings    ${Parent_viewable_goal}       ${Cloned_Parent_viewable_goal}
    Should Be Equal as Strings    ${Parent_vi_percentage}       ${Cloned_Parent_vi_percentage}
    Should Be Equal as Strings    ${Parent_extrapolate}         ${Cloned_Parent_extrapolate}


Validate Optimization Comparison between Parent Adgroup and Clone Parent Adgroup
    [Arguments]     ${parentID}=
    ...             ${CloneParentID}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_parentAdGroup}     Query    SELECT ctr_opt FROM rhino.adgroup_optimization where adgroup_id = ${parentID};
    ${Parent_adgroup_details}=   Create Dictionary      ctr_opt=${query_results_parentAdGroup[0][0]}
    Set Test Variable       ${Parent_adgroup_db}        ${Parent_adgroup_details}
    ${Parent_Optimization}=     Get From Dictionary     ${Parent_adgroup_db}    ctr_opt

    @{query_results_cloned_parentAdGroup}     Query    SELECT ctr_opt FROM rhino.adgroup_optimization where adgroup_id = ${CloneParentID};
    ${clone_Parent_Optimization}=   Create Dictionary      ctr_opt=${query_results_cloned_parentAdGroup[0][0]}
    Set Test Variable       ${cloned_Parent_adgroup_db}        ${clone_Parent_Optimization}
    ${Cloned_Parent_Optimization}=     Get From Dictionary     ${cloned_Parent_adgroup_db}    ctr_opt
    Disconnect From Database
    Should Be Equal as Strings    ${Parent_Optimization}    ${Cloned_Parent_Optimization}


#---------------------------------------------------------------------------------------------------------------
# 1.6.12 Get BreadCrumb Trail for Parent Adgroup.
#---------------------------------------------------------------------------------------------------------------
Get BreadCrumb Trail for Parent Adgroup
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log    ${body}
    #Run Keyword If  '${response_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${response_code}
    #Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Set Test Variable   ${keywords}     success,transaction_id,advId,advName,campId,campName,padgId,padgName
    Run Keyword If    '${response_code}'=='200'    Validate List Of Keywords   ${body}    ${keywords}

#---------------------------------------------------------------------------------------------------------------


#################################
#PAC1.7.1
Get Day Of Week Master Data List From API
    [Arguments]     ${uri}=     ${expected_status_code}=200     ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    #${resp}=    Get Request     docker  ${uri}          headers=${headers}
    #Set Test Variable       ${resp}     ${resp}
    #${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Run Keyword If  '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    #Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${expected_status_code}                     #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.1 Data for options


Validate PAC1.7.1 Data for options
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "sun"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "mon"
    Json Value Should Equal     ${body}     /options/2/id         4
    Json Value Should Equal     ${body}     /options/2/name       "tue"
    Json Value Should Equal     ${body}     /options/3/id         5
    Json Value Should Equal     ${body}     /options/3/name       "wed"
    Json Value Should Equal     ${body}     /options/4/id         6
    Json Value Should Equal     ${body}     /options/4/name       "thu"
    Json Value Should Equal     ${body}     /options/5/id         7
    Json Value Should Equal     ${body}     /options/5/name       "fri"
    Json Value Should Equal     ${body}     /options/6/id         8
    Json Value Should Equal     ${body}     /options/6/name       "sat"


########################
#PAC1.7.2

Get 1.7.2 Get time of day master data
    [Arguments]     ${uri}=pac-api/child-adgroup/time-of-days
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.2 Data for response 200


Validate PAC1.7.2 Data for response 200
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "00"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "01"
    Json Value Should Equal     ${body}     /options/2/id         4
    Json Value Should Equal     ${body}     /options/2/name       "02"
    Json Value Should Equal     ${body}     /options/3/id         5
    Json Value Should Equal     ${body}     /options/3/name       "03"
    Json Value Should Equal     ${body}     /options/4/id         6
    Json Value Should Equal     ${body}     /options/4/name       "04"
    Json Value Should Equal     ${body}     /options/5/id         7
    Json Value Should Equal     ${body}     /options/5/name       "05"
    Json Value Should Equal     ${body}     /options/6/id         8
    Json Value Should Equal     ${body}     /options/6/name       "06"
    Json Value Should Equal     ${body}     /options/7/id         9
    Json Value Should Equal     ${body}     /options/7/name       "07"
    Json Value Should Equal     ${body}     /options/8/id         10
    Json Value Should Equal     ${body}     /options/8/name       "08"
    Json Value Should Equal     ${body}     /options/9/id         11
    Json Value Should Equal     ${body}     /options/9/name       "09"
    Json Value Should Equal     ${body}     /options/10/id         12
    Json Value Should Equal     ${body}     /options/10/name       "10"
    Json Value Should Equal     ${body}     /options/11/id         13
    Json Value Should Equal     ${body}     /options/11/name       "11"
    Json Value Should Equal     ${body}     /options/12/id         14
    Json Value Should Equal     ${body}     /options/12/name       "12"
    Json Value Should Equal     ${body}     /options/13/id         15
    Json Value Should Equal     ${body}     /options/13/name       "13"
    Json Value Should Equal     ${body}     /options/14/id         16
    Json Value Should Equal     ${body}     /options/14/name       "14"
    Json Value Should Equal     ${body}     /options/15/id         17
    Json Value Should Equal     ${body}     /options/15/name       "15"
    Json Value Should Equal     ${body}     /options/16/id         18
    Json Value Should Equal     ${body}     /options/16/name       "16"
    Json Value Should Equal     ${body}     /options/17/id         19
    Json Value Should Equal     ${body}     /options/17/name       "17"
    Json Value Should Equal     ${body}     /options/18/id         20
    Json Value Should Equal     ${body}     /options/18/name       "18"
    Json Value Should Equal     ${body}     /options/19/id         21
    Json Value Should Equal     ${body}     /options/19/name       "19"
    Json Value Should Equal     ${body}     /options/20/id         22
    Json Value Should Equal     ${body}     /options/20/name       "20"
    Json Value Should Equal     ${body}     /options/21/id         23
    Json Value Should Equal     ${body}     /options/21/name       "21"
    Json Value Should Equal     ${body}     /options/22/id         24
    Json Value Should Equal     ${body}     /options/22/name       "22"
    Json Value Should Equal     ${body}     /options/23/id         25
    Json Value Should Equal     ${body}     /options/23/name       "23"




#############################
Get 1.7.3 Get time of day master data
    [Arguments]     ${uri}=pac-api/child-adgroup/private-marketplace
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.3 Data for response 200


Validate PAC1.7.3 Data for response 200
    Json Value Should Equal     ${body}     /options/0/id         369
    Json Value Should Equal     ${body}     /options/0/name       "Twitter MoPub"
    Json Value Should Equal     ${body}     /options/1/id         370
    Json Value Should Equal     ${body}     /options/1/name       "Oath One Mobile"
    Json Value Should Equal     ${body}     /options/2/id         395
    Json Value Should Equal     ${body}     /options/2/name       "BrightRoll Mobile Exchange"
    Json Value Should Equal     ${body}     /options/3/id         475
    Json Value Should Equal     ${body}     /options/3/name       "Smaato"
    Json Value Should Equal     ${body}     /options/4/id         481
    Json Value Should Equal     ${body}     /options/4/name       "PubMatic Exchange"
    Json Value Should Equal     ${body}     /options/5/id         489
    Json Value Should Equal     ${body}     /options/5/name       "Oath One Video"
    Json Value Should Equal     ${body}     /options/6/id         496
    Json Value Should Equal     ${body}     /options/6/name       "Oath One Display"
    Json Value Should Equal     ${body}     /options/7/id         498
    Json Value Should Equal     ${body}     /options/7/name       "Rubicon"
    Json Value Should Equal     ${body}     /options/8/id         521
    Json Value Should Equal     ${body}     /options/8/name       "Chocolate"
    Json Value Should Equal     ${body}     /options/9/id         606
    Json Value Should Equal     ${body}     /options/9/name       "SpotXchange"
    Json Value Should Equal     ${body}     /options/10/id         705
    Json Value Should Equal     ${body}     /options/10/name      "OpenX"

    Json Value Should Equal     ${body}     /auctionOverride/0/id         1
    Json Value Should Equal     ${body}     /auctionOverride/0/name       "First Price"
    Json Value Should Equal     ${body}     /auctionOverride/1/id         2
    Json Value Should Equal     ${body}     /auctionOverride/1/name       "Second Price"
    Json Value Should Equal     ${body}     /auctionOverride/2/id         3
    Json Value Should Equal     ${body}     /auctionOverride/2/name       "Fixed Value"


##############################
#PAC1.7.4
################
Get 1.7.4 Get time of day master data
    [Arguments]     ${uri}=pac-api/child-adgroup/video-stream-position
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.4 Data for response 200


Validate PAC1.7.4 Data for response 200
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "Pre-roll"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "Mid-roll"
    Json Value Should Equal     ${body}     /options/2/id         4
    Json Value Should Equal     ${body}     /options/2/name       "Post-roll"
    Json Value Should Equal     ${body}     /options/3/id         5
    Json Value Should Equal     ${body}     /options/3/name       "Interstitial"




#######################
#PAC1.7.5
Get 1.7.5 Get device manufacturers master data list using API
    [Arguments]     ${uri}=pac-api/child-adgroup/device-manufacturer
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Should Match Regexp     ${body}     [{"id": 4, "name": "Apple", "subOptions": [{"id": 7, "name": "iPhone"}, {"id": 10, "name": "iPod Touch"}, {"id": 165, "name": "iPad"}, {"id": 13803, "name": "iPhoneOS MMS Client"}, {"id": 253556, "name": "QuickTime Agent"}]}


############################
Get 1.7.6 Get device OS and the supported device OS versions master data list using API
    [Arguments]     ${uri}=/pac-api/child-adgroup/device-os
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Should Match Regexp  ${body}   [{"id": 4, "name": "Windows Phone OS", "versions": [{"id": 35, "name": "7.0"}, {"id": 36, "name": "7.10"}, {"id": 37, "name": "8.0"}, {"id": 59, "name": "8.10"}, {"id": 60, "name": "10.0"}]



##################################
Get 1.7.7 Get device types master data list using API
    [Arguments]     ${uri}=pac-api/child-adgroup/device-type
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Should Match Regexp  ${body}   [{"id": 2, "name": "phone"}, {"id": 3, "name": "tablet"}, {"id": 4, "name": "others"}]


Get 1.7.8 Get geographic request master list data using API
    [Arguments]     ${uri}=pac-api/child-adgroup/geographic-request
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.8 Country List
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.8 dmaList
    Run keyword If  '${resp.status_code}'=='200'    Validate PAC1.7.8 stateList


Validate PAC1.7.8 Country List
    ${CountryList_Response}=    Get Json Value         ${body}         /countryList
    Set Test Variable   ${CountryList}    {"id": 2, "name": "United States"}
    Should Match Regexp  ${CountryList_Response}    ${CountryList}
    Set Test Variable   ${CountryList}    {"id": 3, "name": "Canada"}
    Should Match Regexp  ${CountryList_Response}    ${CountryList}


Validate PAC1.7.8 dmaList
    ${dmaList_Response}=    Get Json Value         ${body}         /dmaList
    Set Test Variable   ${dmaList}    {"dmaCode": "662", "id": 529, "dmaArea": "Abilene-Sweetwater, TX"}
    Should Match Regexp  ${dmaList_Response}    ${dmaList}
    Set Test Variable   ${dmaList}    {"dmaCode": "525", "id": 531, "dmaArea": "Albany, GA"}
    Should Match Regexp  ${dmaList_Response}    ${dmaList}
    Set Test Variable   ${dmaList}    {"dmaCode": "532", "id": 530, "dmaArea": "Albany-Schenectady-Troy, NY"}
    Should Match Regexp  ${dmaList_Response}    ${dmaList}
    Set Test Variable   ${dmaList}    {"dmaCode": "800", "id": 540, "dmaArea": "Bakersfield, CA"}
    Should Match Regexp  ${dmaList_Response}    ${dmaList}


Validate PAC1.7.8 stateList
    ${stateList_Response}=    Get Json Value         ${body}         /stateList
    Set Test Variable   ${stateList}    {"fullName": "Alabama", "id": 2}
    Should Match Regexp  ${stateList_Response}    ${stateList}
    Set Test Variable   ${stateList}    {"fullName": "Alaska", "id": 3}
    Should Match Regexp  ${stateList_Response}    ${stateList}
    Set Test Variable   ${stateList}    {"fullName": "Arizona", "id": 4}
    Should Match Regexp  ${stateList_Response}    ${stateList}
    Set Test Variable   ${stateList}    {"fullName": "Arkansas", "id": 5}
    Should Match Regexp  ${stateList_Response}    ${stateList}


Get 1.7.9 Get get targeting category master data list using API
    [Arguments]     ${uri}=pac-api/child-adgroup/targeting-category
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.9 categoryList
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.9 trafficTypeList


Validate PAC1.7.9 categoryList
    ${categoryList_Response}=    Get Json Value         ${body}         /categoryList
    # Set Test Variable   ${categoryList}    {"id": 101, "name": "African American"}
    # Should Match Regexp  ${categoryList_Response}    ${categoryList}
    # Set Test Variable   ${categoryList}    {"id": 19, "name": "African American Legacy"}
    # Should Match Regexp  ${categoryList_Response}    ${categoryList}
    # Set Test Variable   ${categoryList}    {"id": 2, "name": "Automotive Legacy"}
    # Should Match Regexp  ${categoryList_Response}    ${categoryList}
    Set Test Variable   ${categoryList}    {"id": 102, "name": "Automotive"}
    Should Match Regexp  ${categoryList_Response}    ${categoryList}
    Set Test Variable   ${categoryList}    {"id": 114, "name": "News"}
    Should Match Regexp  ${categoryList_Response}    ${categoryList}
    Set Test Variable   ${categoryList}    {"id": 110, "name": "Food and Cooking"}
    Should Match Regexp  ${categoryList_Response}    ${categoryList}
    Set Test Variable   ${categoryList}    {"id": 123, "name": "Environment"}
    Should Match Regexp  ${categoryList_Response}    ${categoryList}
    Set Test Variable   ${categoryList}    {"id": 124, "name": "Government"}
    Should Match Regexp  ${categoryList_Response}    ${categoryList}


Validate PAC1.7.9 trafficTypeList
    ${trafficTypeList_Response}=    Get Json Value         ${body}         /trafficTypeList
    Set Test Variable   ${trafficTypeList}    null
    Should Match Regexp  ${trafficTypeList_Response}    ${trafficTypeList}


Get 1.7.10 Get Targeting Traffic Type master data using API
    [Arguments]     ${uri}=pac-api/child-adgroup/targeting-traffic
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.10 trafficTypeList


Validate PAC1.7.10 trafficTypeList
    Json Value Should Equal     ${body}     /trafficTypeList/0/id         3
    Json Value Should Equal     ${body}     /trafficTypeList/0/name       "Mobile Web"
    Json Value Should Equal     ${body}     /trafficTypeList/1/id         4
    Json Value Should Equal     ${body}     /trafficTypeList/1/name       "App"
    Json Value Should Equal     ${body}     /trafficTypeList/2/id         5
    Json Value Should Equal     ${body}     /trafficTypeList/2/name       "Desktop"



#---------------------------------------------------------------------------------------
Get 1.7.11 Get targeting household request master data list using API
    [Arguments]     ${uri}=pac-api/child-adgroup/geographic-household-request
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json      Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.11 dmaList
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.11 stateList


Validate PAC1.7.11 dmaList
    Json Value Should Equal     ${body}     /dmaList/0/dmaCode        "662"
    Json Value Should Equal     ${body}     /dmaList/0/id             529
    Json Value Should Equal     ${body}     /dmaList/0/dmaArea       "Abilene-Sweetwater, TX"
    Json Value Should Equal     ${body}     /dmaList/1/dmaCode        "532"
    Json Value Should Equal     ${body}     /dmaList/1/id             530
    Json Value Should Equal     ${body}     /dmaList/1/dmaArea       "Albany-Schenectady-Troy, NY"
    Json Value Should Equal     ${body}     /dmaList/2/dmaCode        "525"
    Json Value Should Equal     ${body}     /dmaList/2/id             531
    Json Value Should Equal     ${body}     /dmaList/2/dmaArea       "Albany, GA"
    # Json Value Should Equal     ${body}     /dmaList/3/dmaCode        "800"
    # Json Value Should Equal     ${body}     /dmaList/3/id             540
    # Json Value Should Equal     ${body}     /dmaList/3/dmaArea       "Bakersfield, CA"


Validate PAC1.7.11 stateList
    Json Value Should Equal     ${body}     /stateList/0/id             2
    Json Value Should Equal     ${body}     /stateList/0/fullName       "Alabama"
    Json Value Should Equal     ${body}     /stateList/1/id             3
    Json Value Should Equal     ${body}     /stateList/1/fullName       "Alaska"
    Json Value Should Equal     ${body}     /stateList/2/id             4
    Json Value Should Equal     ${body}     /stateList/2/fullName       "Arizona"
    Json Value Should Equal     ${body}     /stateList/3/id             5
    Json Value Should Equal     ${body}     /stateList/3/fullName       "Arkansas"



Patch 1.7.12 Partial update a child adgroup
    [Arguments]     ${attribute}=
    ...             ${value}=
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    Log     ${uri}
    ${missing_count}=   Get Count   ${data}     MISSING
    Run Keyword If      '${missing_count}'>='1'        Remove Json Key Contain MISSING for 1.7.12
    Set Test Variable       ${data}     {"attribute":${attribute}, "value":${value}}
    Log        ${data}
    #${resp}    RequestsLibrary.PATCH Request    docker   ${uri}        data=${data}    headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            data=${data}
    ...            request_type=PATCH                               #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'    Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'    Json Value Should Equal  ${body}  /childId     ${adgroupId}


Remove Json Key Contain MISSING for 1.7.12
    ${data}=    Remove String   ${data}     "attribute":"MISSING",
    ${data}=    Remove String   ${data}     "value":"MISSING"


Get Parent And Campaign ID from DB
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_result}     Query    select bundle_parent_id as parentID, campaign_id as campaignId from rhino.ad_group where bundle=0 and id = ${adgroupId};
    ${DB_Result}=   Create Dictionary      parentID=${query_result[0][0]}
    ...                                    campaignId=${query_result[0][1]}
    Set Test Variable       ${query_result_db}          ${DB_Result}
    Disconnect From Database


Compare DB data Vs JSON response data
    ${parentID_db}      Get From Dictionary     ${query_result_db}    parentID
    ${response_parentID}=    Get Json Value         ${body}         /parentID
    Should Be Equal As Strings      ${response_parentID}      ${parentID_db}
    ${campaignId_db}    Get From Dictionary     ${query_result_db}    campaignId
    ${response_campaignId}=   Get Json Value         ${body}         /campaignId
    Should Be Equal As Strings      ${response_campaignId}      ${campaignId_db}



Get 1.7.12 Get Targeting Exchange Master data using API
    [Arguments]     ${uri}=pac-api/child-adgroup/exchange
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session      docker      https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}    Create Dictionary     Content-type=application/json       Accept=application/json
    #${resp}=    RequestsLibrary.Get Request     docker     ${uri}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.12 options


Validate PAC1.7.12 options
    Should Match Regexp    ${body}     {"id":375,"name":"4INFO Exchange"}
    Should Match Regexp    ${body}     {"id":369,"name":"Twitter MoPub"}
    Should Match Regexp    ${body}     {"id":606,"name":"SpotXchange"}
    Should Match Regexp    ${body}     {"id":424,"name":"AppNexus Microsoft"}
    # Should Match Regexp  ${body}     {"id":2031,"name":"Online"}
    # Should Match Regexp  ${body}     {"id":945,"name":"Online"}
    # Should Match Regexp  ${body}     {"id":850,"name":"Online"}
    # Should Match Regexp  ${body}     {"id":883,"name":"Online"}
    # Should Match Regexp  ${body}     {"id":798,"name":"Mobile Web"}



################

Get 1.7.13 Get time of day master data using API
    [Arguments]     ${uri}=pac-api/child-adgroup/time-of-day
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.13 options


Validate PAC1.7.13 options
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "00"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "01"
    Json Value Should Equal     ${body}     /options/2/id         46
    Json Value Should Equal     ${body}     /options/2/name       "02"
    Json Value Should Equal     ${body}     /options/3/id         47
    Json Value Should Equal     ${body}     /options/3/name       "03"
    Json Value Should Equal     ${body}     /options/4/id         26
    Json Value Should Equal     ${body}     /options/4/name       "04"
    Json Value Should Equal     ${body}     /options/5/id         27
    Json Value Should Equal     ${body}     /options/5/name       "05"
    Json Value Should Equal     ${body}     /options/6/id         28
    Json Value Should Equal     ${body}     /options/6/name       "06"
    Json Value Should Equal     ${body}     /options/7/id         29
    Json Value Should Equal     ${body}     /options/7/name       "07"
    Json Value Should Equal     ${body}     /options/8/id         30
    Json Value Should Equal     ${body}     /options/8/name       "08"
    Json Value Should Equal     ${body}     /options/9/id         31
    Json Value Should Equal     ${body}     /options/9/name       "09"
    Json Value Should Equal     ${body}     /options/10/id        32
    Json Value Should Equal     ${body}     /options/10/name      "10"
    Json Value Should Equal     ${body}     /options/11/id        33
    Json Value Should Equal     ${body}     /options/11/name      "11"
    Json Value Should Equal     ${body}     /options/12/id        34
    Json Value Should Equal     ${body}     /options/12/name      "12"
    Json Value Should Equal     ${body}     /options/13/id        35
    Json Value Should Equal     ${body}     /options/13/name      "13"
    Json Value Should Equal     ${body}     /options/14/id        36
    Json Value Should Equal     ${body}     /options/14/name      "14"
    Json Value Should Equal     ${body}     /options/15/id        37
    Json Value Should Equal     ${body}     /options/15/name      "15"
    Json Value Should Equal     ${body}     /options/16/id        38
    Json Value Should Equal     ${body}     /options/16/name      "16"
    Json Value Should Equal     ${body}     /options/17/id        39
    Json Value Should Equal     ${body}     /options/17/name      "17"
    Json Value Should Equal     ${body}     /options/18/id        40
    Json Value Should Equal     ${body}     /options/18/name      "18"
    Json Value Should Equal     ${body}     /options/19/id        41
    Json Value Should Equal     ${body}     /options/19/name      "19"
    Json Value Should Equal     ${body}     /options/20/id        42
    Json Value Should Equal     ${body}     /options/20/name      "20"
    Json Value Should Equal     ${body}     /options/21/id        43
    Json Value Should Equal     ${body}     /options/21/name      "21"
    Json Value Should Equal     ${body}     /options/22/id        44
    Json Value Should Equal     ${body}     /options/22/name      "22"
    Json Value Should Equal     ${body}     /options/23/id        45
    Json Value Should Equal     ${body}     /options/23/name      "23"



################################
# PAC 1.7.14 Get Targeting Carrier master data

Get 1.7.14 Get targeting carrier master data list using API
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.14 options


Validate PAC1.7.14 options
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "AT&T"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "Verizon"
    Json Value Should Equal     ${body}     /options/2/id         4
    Json Value Should Equal     ${body}     /options/2/name       "T-Mobile"
    Json Value Should Equal     ${body}     /options/3/id         5
    Json Value Should Equal     ${body}     /options/3/name       "Sprint"
    Json Value Should Equal     ${body}     /options/4/id         6
    Json Value Should Equal     ${body}     /options/4/name       "Other OTA Cellular"
    Json Value Should Equal     ${body}     /options/5/id         7
    Json Value Should Equal     ${body}     /options/5/name       "MetroPCS"

################################
# PAC 1.7.15 Get Targeting Language master data

Get 1.7.15 Get Targeting Language master data using API
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.15 options


Validate PAC1.7.15 options
    Json Value Should Equal     ${body}     /options/0/id         38
    Json Value Should Equal     ${body}     /options/0/name       "English"
    Json Value Should Equal     ${body}     /options/1/id         149
    Json Value Should Equal     ${body}     /options/1/name       "Spanish"


################################
# PAC 1.7.16 Get Targeting Location type master data

Get 1.7.16 Get Targeting Location type master data using API
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.16 options


Validate PAC1.7.16 options
    Json Value Should Equal     ${body}     /options/0/id         2
    Json Value Should Equal     ${body}     /options/0/name       "Undetermined"
    Json Value Should Equal     ${body}     /options/1/id         3
    Json Value Should Equal     ${body}     /options/1/name       "Away"
    Json Value Should Equal     ${body}     /options/2/id         4
    Json Value Should Equal     ${body}     /options/2/name       "Home"


################################
# PAC 1.7.17 Get trail log for Child Adgroup using API

Get 1.7.17 Get trail log for Child Adgroup using API
    [Arguments]     ${uri}=
    ...             ${childID}=
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Run Keyword If  '${response_code}'=='400'   Should Match Regexp  ${body}  "success":false
    Run Keyword If  '${response_code}'=='200'   Should Match Regexp  ${body}  "success":true
    Run Keyword If  '${response_code}'=='200'   Validate PAC1.7.17 for response code 200        ${childID}


Validate PAC1.7.17 for response code 200
    [Arguments]     ${childID}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_Campaign}     Query     select d.id as AdvID, d.name as AdvName, c.id as campaignID, c.name as campaignName, b.id as parentID, b.name as parentName, a.id as childID, a.name as childName from rhino.ad_group as a join rhino.ad_group as b on a.bundle_parent_id = b.id join rhino.campaign as c on b.campaign_id = c.id join rhino.partner as d on c.partner_id = d.id where a.id = ${childID};
    ${Query_details}=   Create Dictionary      advertiserID=${query_results_Campaign[0][0]}
    ...                                        advertiserName=${query_results_Campaign[0][1]}
    ...                                        campaignID=${query_results_Campaign[0][2]}
    ...                                        campaignName=${query_results_Campaign[0][3]}
    ...                                        parentID=${query_results_Campaign[0][4]}
    ...                                        parentName=${query_results_Campaign[0][5]}
    ...                                        childID=${query_results_Campaign[0][6]}
    ...                                        childName=${query_results_Campaign[0][7]}
    Set Test Variable       ${BreadCrumbChild}        ${Query_details}
    Disconnect From Database
    ${advertiserID}=     Get From Dictionary          ${BreadCrumbChild}    advertiserID
    ${advertiserID}=     Convert To Integer   ${advertiserID}
    ${advId}=            Get JSON Value      ${body}     /advId
    ${advId}=            Convert To Integer   ${advId}
    Should Be Equal      ${advertiserID}      ${advId}

    ${advertiserName}=         Get From Dictionary     ${BreadCrumbChild}    advertiserName
    Json Value Should Equal    ${body}     /advName     "${advertiserName}"

    ${campaignID_db}=             Get From Dictionary          ${BreadCrumbChild}    campaignID
    ${campaignID_db}=     Convert To Integer   ${campaignID_db}
    ${campId}=            Get JSON Value      ${body}     /campId
    ${campId}=            Convert To Integer   ${campId}
    Should Be Equal      ${campaignID_db}      ${campId}

    ${campaignName}=           Get From Dictionary      ${BreadCrumbChild}    campaignName
    Json Value Should Equal    ${body}     /campName     "${campaignName}"

    ${parentID_db}=             Get From Dictionary          ${BreadCrumbChild}    parentID
    ${parentID_db}=     Convert To Integer   ${parentID_db}
    ${padgId}=            Get JSON Value      ${body}     /padgId
    ${padgId}=            Convert To Integer   ${padgId}
    Should Be Equal      ${parentID_db}      ${padgId}

    ${parentName}=           Get From Dictionary     ${BreadCrumbChild}    parentName
    Json Value Should Equal    ${body}     /padgName     "${parentName}"

    ${childID_db}=             Get From Dictionary          ${BreadCrumbChild}    childID
    ${childID_db}=     Convert To Integer   ${childID_db}
    ${cadgId}=            Get JSON Value      ${body}     /cadgId
    ${cadgId}=            Convert To Integer   ${cadgId}
    Should Be Equal      ${childID_db}      ${cadgId}

    ${childName}=           Get From Dictionary     ${BreadCrumbChild}    childName
    Json Value Should Equal    ${body}     /cadgName     "${childName}"


#---------------------------------------------------------------------------------------------------------------
# 1.7.18 Get Targeting Cluster  master data
#---------------------------------------------------------------------------------------------------------------
Get Targeting Cluster master data
    [Arguments]     ${uri}=
    ...             ${response_code}=200
    ...             ${success}=NA
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=GET                             #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Set Test Variable   ${keywords}     success,transaction_id,options
    Run Keyword If    '${response_code}'=='200'    Validate List Of Keywords   ${body}    ${keywords}

#---------------------------------------------------------------------------------------------------------------
##################################
# PAC 1.8.1 Get child adgroup detail


Create a new campaign for PAC1.8.1
    [Arguments]         ${campaign_name}=PAC_regression_campaign_181_1
    ...                 ${parentName}=PAC_regression_parent_181_01
    ...                 ${campaign_advertiser_id}=
    Get Start Date
    Set Test Variable       ${username}         ${QA_DEFAULT_USER}
    Log     ${campaign_name}
    Create New Campaign via API         campaign_name=${campaign_name}
    ...                                 campaign_start_date_time=${todaysDate}
    ...                                 campaign_advertiser_id=${campaign_advertiser_id}
    ${parent_campaign_id}       Get JSON Value      ${body}     /campaign/id
    Set Suite Variable      ${Campaign_Id}       ${parent_campaign_id}
    Create Parent Adgroup via API       parent_name=${parentName}
    ...                                 parent_start_date_time=${todaysDate}
    ...                                 parent_campaign_id=${Campaign_Id}
    ...                                 response_code=200
    ${parentID}=        Get JSON Value      ${body}     /parent/id
    Set Suite Variable      ${parent_ID}        ${parentID}

Validate List Of Keywords For PAC 1.8.1 for success code 200
    ${child}=  Get Json Value  ${body}     /child
    Set Test Variable   ${keywords}     id,name,status,parentId,campaignId,startDate,endDate,timezone,impressionGoal,cpm,domain,isBehavioralTargeted,fourInfoMargin,maxBidPrice,targeting,targetDayOfWeek,targetGeoState,targetGeoStateExcluded,targetGeoDMA,targetGeoDMAExcluded,targetGeoZipStr,targetHHState,targetHHStateExcluded,targetHHDMA,targetHHDMAExcluded,targetHHZipStr,targetGeoCountry,targetLanguage,targetStreamingPosition,targetLocation,targetCarrier,targetTrafficType,targetCategory,targetCategoryExcluded,targetDeviceManufacturer,targetDeviceModel,targetDeviceType,targetDeviceOS,targetDeviceOSVersion,targetExchange,targetExchangeExcluded,targetDeal
    Validate List Of Keywords   ${child}    ${keywords}

Validate Response For PAC 1.8.1 for success code 200
    [Arguments]         ${adgroupId}=
    ...                 ${child_status}=
    Json Value Should Equal     ${body}    /child/id    ${adgroupId}
    Json Value Should Equal     ${body}    /child/name   "${child_name}"
    Json Value Should Equal     ${body}    /child/status    ${child_status}
    Json Value Should Equal     ${body}    /child/parentId    ${child_parent_campaign_id}
    # Json Value Should Equal     ${body}    /child/campaignId
    Json Value Should Equal     ${body}    /child/startDate    "${child_start_date_time}"
    Json Value Should Equal     ${body}    /child/endDate      "${child_end_date_time}"
    Json Value Should Equal     ${body}    /child/timezone     "${child_timezone}"
    Json Value Should Equal     ${body}    /child/impressionGoal    "${child_impression_goal}"
    Json Value Should Equal     ${body}    /child/cpm     ${child_cmp}
    Json Value Should Equal     ${body}    /child/domain      "${child_domain}"
    Json Value Should Equal     ${body}    /child/isBehavioralTargeted      ${child_is_behavioral_targeted}
    # Json Value Should Equal     ${body}    /child/fourInfoMargin
    # Json Value Should Equal     ${body}    /child/maxBidPrice
    Json Value Should Equal     ${body}    /child/targeting/targetDayOfWeek    ${child_target_day_of_week}
    Json Value Should Equal     ${body}    /child/targeting/targetGeoState    ${child_target_geo_state}
    Json Value Should Equal     ${body}    /child/targeting/targetGeoStateExcluded    ${child_target_geo_state_exclude}
    # Json Value Should Equal     ${body}    /child/targeting/targetGeoDMA
    # Json Value Should Equal     ${body}    /child/targeting/targetGeoDMAExcluded
    # Json Value Should Equal     ${body}    /child/targeting/targetGeoZipStr
    # Json Value Should Equal     ${body}    /child/targeting/targetHHState
    # Json Value Should Equal     ${body}    /child/targeting/targetHHStateExcluded
    # Json Value Should Equal     ${body}    /child/targeting/targetHHDMA
    # Json Value Should Equal     ${body}    /child/targeting/targetHHDMAExcluded
    # Json Value Should Equal     ${body}    /child/targeting/targetHHZipStr
    Json Value Should Equal     ${body}    /child/targeting/targetGeoCountry    ${child_target_geo_country}
    Json Value Should Equal     ${body}    /child/targeting/targetLanguage    ${child_target_language}
    Json Value Should Equal     ${body}    /child/targeting/targetStreamingPosition    ${child_target_streaming_position}
    Json Value Should Equal     ${body}    /child/targeting/targetLocation    ${child_target_location}
    Json Value Should Equal     ${body}    /child/targeting/targetCarrier    ${child_target_carrier}
    Json Value Should Equal     ${body}    /child/targeting/targetTrafficType    ${child_target_traffic_type}
    Json Value Should Equal     ${body}    /child/targeting/targetCategory    ${child_target_category}
    Json Value Should Equal     ${body}    /child/targeting/targetCategoryExcluded    ${child_target_category_excluded}
    Json Value Should Equal     ${body}    /child/targeting/targetDeviceManufacturer    ${child_target_device_manufacturer}
    Json Value Should Equal     ${body}    /child/targeting/targetDeviceModel    ${child_target_device_model}
    Json Value Should Equal     ${body}    /child/targeting/targetDeviceType    ${child_target_device_type}
    Json Value Should Equal     ${body}    /child/targeting/targetDeviceOS    ${child_target_device_OS}
    Json Value Should Equal     ${body}    /child/targeting/targetDeviceOSVersion    ${child_target_device_OS_version}
    Json Value Should Equal     ${body}    /child/targeting/targetExchange    ${child_target_xchange}
    # Json Value Should Equal     ${body}    /child/targeting/targetExchangeExcluded
    # Json Value Should Equal     ${body}    /child/targeting/targetDeal/dealIds    "${child_deal_ids}"
    # Json Value Should Equal     ${body}    /child/targeting/targetDeal/auctionOverride    ${child_auction_override}
    # Json Value Should Equal     ${body}    /child/targeting/targetDeal/bidFloor    ${child_bid_floor}
    # Json Value Should Equal     ${body}    /child/targeting/targetDeal/exchange    ${child_exchange}





##################################

#PAC1.8.2 PAC API For Creat Child AdGroup
##################################

Create a new campaign for PAC1.8.2
    [Arguments]         ${campaign_name}=PAC_regression_campaign_182_01
    ...                 ${parentName}=PAC_regression_parent_182_01
    ...                 ${campaign_start_date_time}=${REGRESSION_START_DATE} 00:00:00
    ...                 ${campaign_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...                 ${parent_start_date_time}=${REGRESSION_START_DATE} 00:00:00
    ...                 ${parent_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...                 ${campaign_external_id}="BVI01234567"
    ...                 ${campaign_io}=6624
    ...                 ${campaign_access_control}=15
    ...                 ${HHMMSS_Flag}=0
    Set Test Variable       ${username}         ${QA_DEFAULT_USER}
    Log     ${campaign_name}
    Log     ${campaign_start_date_time}
    Log     ${parent_start_date_time}
    Create New Campaign via API         campaign_name=${campaign_name}
    ...                                 campaign_external_id=${campaign_external_id}
    ...                                 campaign_io=${campaign_io}
    ...                                 campaign_access_control=${campaign_access_control}
    ...                                 campaign_start_date_time=${campaign_start_date_time}
    ...                                 campaign_end_date_time=${campaign_end_date_time}
    ...                                 uri=/pac-api/campaign/campaign?username=${QA_CATALINA_USER}
    ${campaignid}       Get JSON Value      ${body}     /campaign/id
    Set Suite Variable      ${Campaign_Id}       ${campaignid}
    Create Parent Adgroup via API       parent_name=${parentName}
    ...                                 parent_start_date_time=${parent_start_date_time}
    ...                                 parent_end_date_time=${parent_end_date_time}
    ...                                 parent_campaign_id=${Campaign_Id}
    ...                                 HHMMSS_Flag=${HHMMSS_Flag}
    ...                                 response_code=200
    ${parent_ID}=        Get JSON Value      ${body}     /parent/id
    Set Suite Variable     ${parentID}    ${parent_ID}
    ${timezone}=        Get JSON Value      ${body}     /parent/timezone
    Set Suite Variable       ${campaign_timezone}      ${timezone}


Create Child Adgroup via API
    [Arguments]     ${child_name}=PAC_regression_child
    ...             ${child_status}=1
    ...             ${child_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${child_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${child_timezone}=G
    ...             ${child_parent_campaign_id}=1
    ...             ${child_impression_goal}=10000
    ...             ${fourInfoMargin}=0.01
    ...             ${child_cmp}=1.0
    ...             ${child_domain}=yahoo.com
    ...             ${child_is_behavioral_targeted}=false
    ...             ${child_targetTimeOfDayTimeZone}=null
    ...             ${child_targetdayofweek}=[9]
    ...             ${child_targetTimeOfDay}=null
    ...             ${child_targetTimeOfDayUser}=null
    ...             ${child_targetGeoState}=[2]
    ...             ${child_targetGeoStateExcluded}=null
    ...             ${child_targetGeoDMA}=[529]
    ...             ${child_targetGeoDMAExcluded}=null
    ...             ${child_targetGeoZipStr}=["95054"]
    ...             ${child_targetHHState}=[2]
    ...             ${child_targetHHStateExcluded}=null
    ...             ${child_targetHHDMA}=[529]
    ...             ${child_targetHHDMAExcluded}=null
    ...             ${child_targetHHZipStr}=["95054"]
    ...             ${child_targetGeoCountry}=[2]
    ...             ${child_targetDeviceType}=[2]
    ...             ${child_targetDeviceOS}=[2]
    ...             ${child_targetDeviceOSVersion}=[2]
    ...             ${child_targetDeviceManufacturer}=null
    ...             ${child_targetDeviceModel}=null
    ...             ${child_targetLanguage}=[38]
    ...             ${child_targetStreamingPosition}=null
    ...             ${child_targetLocation}=[2]
    ...             ${child_targetCarrier}=null
    ...             ${child_targetTrafficType}=[3]
    ...             ${child_targetCategory}=[114]
    ...             ${child_targetCategoryExcluded}=null
    ...             ${child_targetExchange}=null
    ...             ${child_targetExchangeExcluded}=null
    ...             ${child_targetCluster}=null
    ...             ${child_targetClusterExcluded}=null
    ...             ${child_targetDeal}=null
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    Set Test Variable       ${uri}      pac-api/child-adgroup/child-adgroup
    #${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    Set Test Variable       ${data}     {"name":"${child_name}","status":${child_status},"startDate":"${child_start_date_time}","endDate":"${child_end_date_time}","timezone":"${child_timezone}","parentId":${child_parent_campaign_id},"impressionGoal":${child_impression_goal},"fourInfoMargin":${fourInfoMargin},"cpm":${child_cmp},"domain":"${child_domain}","isBehavioralTargeted":${child_is_behavioral_targeted},"targetTimeOfDayTimeZone":${child_targetTimeOfDayTimeZone},"targeting":{"targetDayOfWeek":${child_targetdayofweek},"targetTimeOfDay":${child_targetTimeOfDay},"targetTimeOfDayUser":${child_targetTimeOfDayUser},"targetStreamingPosition":${child_target_streaming_position},"targetGeoState":${child_targetGeoState},"targetGeoStateExcluded":${child_targetGeoStateExcluded},"targetTrafficType":${child_targetTrafficType},"targetCategory":${child_target_category},"targetCategoryExcluded":${child_target_category_excluded},"targetGeoDMA":${child_targetGeoDMA},"targetGeoDMAExcluded":${child_targetGeoDMAExcluded},"targetGeoZipStr":${child_targetGeoZipStr},"targetHHState":${child_targetHHState},"targetHHStateExcluded":${child_targetHHStateExcluded},"targetHHDMA":${child_targetHHDMA},"targetHHDMAExcluded":${child_targetHHDMAExcluded},"targetHHZipStr":${child_targetHHZipStr},"targetGeoCountry":${child_targetGeoCountry},"targetDeviceType":${child_targetDeviceType},"targetDeviceOS":${child_targetDeviceOS},"targetDeviceOSVersion":${child_targetDeviceOSVersion},"targetDeviceManufacturer":${child_targetDeviceManufacturer},"targetDeviceModel":${child_targetDeviceModel},"targetLanguage":${child_targetLanguage},"targetLocation":${child_targetLocation},"targetCarrier":${child_targetCarrier},"targetExchange":${child_targetExchange},"targetExchangeExcluded":${child_targetExchangeExcluded},"targetCluster":${child_targetCluster},"targetClusterExcluded":${child_targetClusterExcluded},"targetDeal":${child_targetDeal}}}
    Log    ${data}
    ${missing_count}=    Get Count    ${data}    MISSING
    Run Keyword If    '${missing_count}'>='1'    Remove Json Key Contain MISSING for Create child Adgroup via API    ${data}    ${missing_count}
    Log             ${data}
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Log     ${body}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    Run Keyword If  '${response_code}'=='200'   Set Test Variable   ${success}    true
    Run Keyword If  '${response_code}'=='400'   Set Test Variable   ${success}    false
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            data=${data}
    ...            request_type=POST                                #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}


Remove Json Key Contain MISSING for Create child Adgroup via API
    [Arguments]       ${data}=    ${missing_count}=
    Log    ${missing_count}
    Log    ${data}
    ${data}=    Remove String    ${data}    "name":"MISSING",
    ${data}=    Remove String    ${data}    "status":MISSING,
    ${data}=    Remove String    ${data}    "startDate":"MISSING",
    ${data}=    Remove String    ${data}    "endDate":"MISSING",
    ${data}=    Remove String    ${data}    "timezone":"MISSING",
    ${data}=    Remove String    ${data}    "parentId":MISSING,
    ${data}=    Remove String    ${data}    "impressionGoal":MISSING,
    ${data}=    Remove String    ${data}    "fourInfoMargin":MISSING,
    ${data}=    Remove String    ${data}    "cpm":MISSING,
    ${data}=    Remove String    ${data}    "domain":MISSING,
    ${data}=    Remove String    ${data}    "isBehavioralTargeted":MISSING,
    ${data}=    Remove String    ${data}    "targetTimeOfDayTimeZone":MISSING,
    ${data}=    Remove String    ${data}    "targetDayOfWeek":[MISSING],
    ${data}=    Remove String    ${data}    "targetTimeOfDay":MISSING,
    ${data}=    Remove String    ${data}    "targetTimeOfDayUser":MISSING,
    ${data}=    Remove String    ${data}    "targetGeoState":[MISSING],
    ${data}=    Remove String    ${data}    "targetGeoStateExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetGeoDMA":[MISSING],
    ${data}=    Remove String    ${data}    "targetGeoDMAExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetGeoZipStr":[MISSING],
    ${data}=    Remove String    ${data}    "targetHHState":[MISSING],
    ${data}=    Remove String    ${data}    "targetHHStateExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetHHDMA":[MISSING],
    ${data}=    Remove String    ${data}    "targetHHDMAExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetHHZipStr":[MISSING],
    ${data}=    Remove String    ${data}    "targetGeoCountry":[MISSING],
    ${data}=    Remove String    ${data}    "targetDeviceType":[MISSING],
    ${data}=    Remove String    ${data}    "targetDeviceOS":[MISSING],
    ${data}=    Remove String    ${data}    "targetDeviceOSVersion":[MISSING],
    ${data}=    Remove String    ${data}    "targetDeviceManufacturer":MISSING,
    ${data}=    Remove String    ${data}    "targetDeviceModel":MISSING,
    ${data}=    Remove String    ${data}    "targetLanguage":[MISSING],
    ${data}=    Remove String    ${data}    "targetStreamingPosition":MISSING,
    ${data}=    Remove String    ${data}    "targetLocation":[MISSING],
    ${data}=    Remove String    ${data}    "targetCarrier":MISSING,
    ${data}=    Remove String    ${data}    "targetTrafficType":[MISSING],
    ${data}=    Remove String    ${data}    "targetCategory":[MISSING],
    ${data}=    Remove String    ${data}    "targetCategoryExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetExchange":MISSING,
    ${data}=    Remove String    ${data}    "targetExchangeExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetCluster":[MISSING],
    ${data}=    Remove String    ${data}    "targetClusterExcluded":MISSING,
    ${data}=    Remove String    ${data}    "targetDeal":MISSING
    ${data}=        Evaluate    '${data}'.replace(", }",'}').replace(",}",'}')
    Set Test Variable       ${data}     ${data}
    Log    ${data}


############################
#PAC 1.8.3 Update a child adgroup
############

Update Child Adgroup via API
    [Arguments]     ${child_groupid}=1
    ...             ${child_campaignid}=1
    ...             ${response_child_name}=PAC_regression_child
    ...             ${response_child_status}=1
    ...             ${response_child_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...             ${response_child_end_date_time}=${REGRESSION_END_DATE} 23:59
    ...             ${response_child_timezone}=G
    ...             ${response_child_parent_campaign_id}=1
    ...             ${response_child_impression_goal}=10000
    ...             ${response_child_fourInfoMargin}=0.01
    ...             ${response_child_cmp}=1.0
    ...             ${response_child_domain}=yahoo.com
    ...             ${response_child_is_behavioral_targeted}=false
    ...             ${response_child_screen_type}=1
    ...             ${response_child_targetTimeOfDayTimeZone}=null
    ...             ${response_child_targetdayofweek}=[9]
    ...             ${response_child_targetTimeOfDay}=null
    ...             ${response_child_targetTimeOfDayUser}=null
    ...             ${response_child_targetGeoState}=[2]
    ...             ${response_child_targetGeoStateExcluded}=null
    ...             ${response_child_targetGeoDMA}=[529]
    ...             ${response_child_targetGeoDMAExcluded}=null
    ...             ${response_child_targetGeoZipStr}=["95054"]
    ...             ${response_child_targetHHState}=[2]
    ...             ${response_child_targetHHStateExcluded}=null
    ...             ${response_child_targetHHDMA}=[529]
    ...             ${response_child_targetHHDMAExcluded}=null
    ...             ${response_child_targetHHZipStr}=["95054"]
    ...             ${response_child_targetGeoCountry}=[2]
    ...             ${response_child_targetDeviceType}=[2]
    ...             ${response_child_targetDeviceOS}=[2]
    ...             ${response_child_targetDeviceOSVersion}=[2]
    ...             ${response_child_targetDeviceManufacturer}=null
    ...             ${response_child_targetDeviceModel}=null
    ...             ${response_child_targetLanguage}=[38]
    ...             ${response_child_targetStreamingPosition}=null
    ...             ${response_child_targetLocation}=[2]
    ...             ${response_child_targetCarrier}=null
    ...             ${response_child_targetTrafficType}=[3]
    ...             ${response_child_targetCategory}=[114]
    ...             ${response_child_targetCategoryExcluded}=null
    ...             ${response_child_targetExchange}=null
    ...             ${response_child_targetExchangeExcluded}=null
    ...             ${response_child_targetCluster}=null
    ...             ${response_child_targetClusterExcluded}=null
    ...             ${response_child_targetDeal}=null
    ...             ${updated_response_code}=200
    ...             ${updated_success}=true
    Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    ${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    Log   ${child_groupid}
    Set Test Variable       ${uri1}      pac-api/child-adgroup/child-adgroup/${child_groupid}
    Set Test Variable       ${data1}     {"name":"${response_child_name}","status":${response_child_status},"startDate":"${response_child_start_date_time}","endDate":"${response_child_end_date_time}","timezone":"${response_child_timezone}","parentId":${response_child_parent_campaign_id},"impressionGoal":${response_child_impression_goal},"fourInfoMargin":"${response_child_fourInfoMargin}","cpm":${response_child_cmp},"domain":"${response_child_domain}","isBehavioralTargeted":${response_child_is_behavioral_targeted},"targetTimeOfDayTimeZone":${response_child_targetTimeOfDayTimeZone},"targeting":{"targetDayOfWeek":${response_child_targetdayofweek},"targetTimeOfDay":${response_child_targetTimeOfDay},"targetTimeOfDayUser":${response_child_targetTimeOfDayUser},"targetGeoState":${response_child_targetGeoState},"targetGeoStateExcluded":${response_child_targetGeoStateExcluded},"targetGeoDMA":${response_child_targetGeoDMA},"targetGeoDMAExcluded":${response_child_targetGeoDMAExcluded},"targetGeoZipStr":${response_child_targetGeoZipStr},"targetHHState":${response_child_targetHHState},"targetHHStateExcluded":${response_child_targetHHStateExcluded},"targetHHDMA":${response_child_targetHHDMA},"targetHHDMAExcluded":${response_child_targetHHDMAExcluded},"targetHHZipStr":${response_child_targetHHZipStr},"targetGeoCountry":${response_child_targetGeoCountry},"targetDeviceType":${response_child_targetDeviceType},"targetDeviceOS":${response_child_targetDeviceOS},"targetDeviceOSVersion":${response_child_targetDeviceOSVersion},"targetDeviceManufacturer":${response_child_targetDeviceManufacturer},"targetDeviceModel":${response_child_targetDeviceModel},"targetLanguage":${response_child_targetLanguage},"targetStreamingPosition":${response_child_targetStreamingPosition},"targetLocation":${response_child_targetLocation},"targetCarrier":${response_child_targetCarrier},"targetTrafficType":${response_child_targetTrafficType},"targetCategory":${response_child_targetCategory},"targetCategoryExcluded":${response_child_targetCategoryExcluded},"targetExchange":${response_child_targetExchange},"targetExchangeExcluded":${response_child_targetExchangeExcluded},"targetCluster":${response_child_targetCluster},"targetClusterExcluded":${response_child_targetClusterExcluded},"targetDeal":${response_child_targetDeal}}}}
    ${missing_count1}=           Get Count           ${data1}         MISSING
    Run Keyword If      '${missing_count1}'>='1'        Remove Json Key Contain MISSING for update child Adgroup via API
    Log             ${data1}
    ${result1}=  RequestsLibrary.Put Request  docker     ${uri1}     data=${data1}     headers=${headers}
    #PAC API        uri=${uri1}                                         #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    #...               request_type=PUT                             #GET, POST, PUT
    #...               data=${data1}
    #...            expected_status_code=${updated_response_code}                       #normally 200 for working condition, 400 for failure
    #...            success=${updated_success}
    #Set Test Variable      ${result1}      ${resp}
    Log     ${result1}
    Log     ${data1}
    Set Suite Variable      ${response_body}    ${result1.content}
    Set Suite Variable       ${body}     ${result1.content}
    Log    ${body}
    Should Be Equal As Strings   ${result1.status_code}   ${updated_response_code}
    Run Keyword If  '${updated_response_code}'=='400'   Json Value Should Equal    ${response_body}    /success  false
    Run Keyword If  '${updated_response_code}'=='200'   Validate Update Child Adgroup API Data for response code 200
    ...             ${child_groupid}
    ...             ${response_child_parent_campaign_id}
    ...             ${child_campaignid}
    ...             ${response_child_parent_campaign_id}


Validate Update Child Adgroup API Data for response code 200
    [Arguments]     ${child_groupid}
    ...             ${child_parent_id}
    ...             ${child_campaignid}
    ...             ${response_child_parent_campaign_id}
    Run Keyword If      '${response_child_parent_campaign_id}'!='MISSING'       Validate Update Child Adgrop response data
    ...             ${child_groupid}
    ...             ${response_child_parent_campaign_id}
    ...             ${child_campaignid}


Validate Update Child Adgrop response data
    [Arguments]     ${child_groupid}
    ...             ${child_parent_id}
    ...             ${child_campaignid}
    ${childID}=     Get JSON Value      ${response_body}    /childId
    Should Be Equal As strings          ${child_groupid}                            ${childID}
    ${parent_id}=   Get JSON Value      ${response_body}    /parentID
    Should Be Equal As Strings          ${child_parent_id}        ${parent_id}
    ${campaignID}=  Get JSON Value      ${response_body}    /campaignId
    Should Be Equal As Strings          ${child_campaignid}        ${campaignID}



Remove Json Key Contain MISSING for update child Adgroup via API
    ${data1}=        Remove String       ${data1}     "name":"MISSING",
    ${data1}=        Remove String       ${data1}     "status":MISSING,
    ${data1}=        Remove String       ${data1}     "startDate":"MISSING",
    ${data1}=        Remove String       ${data1}     "endDate":"MISSING",
    ${data1}=        Remove String       ${data1}     ,"endDate":"MISSING"
    ${data1}=        Remove String       ${data1}     "timezone":"MISSING",
    ${data1}=        Remove String       ${data1}     "parentId":MISSING,
    ${data1}=        Remove String       ${data1}     "impressionGoal":MISSING,
    ${data1}=        Remove String       ${data1}     "cpm":MISSING,
    ${data1}=        Remove String       ${data1}     "domain":MISSING,
    ${data1}=        Remove String       ${data1}     "isBehavioralTargeted":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDayOfWeek":MISSING,
    ${data1}=        Remove String       ${data1}     "targetGeoState":MISSING,
    ${data1}=        Remove String       ${data1}     "targetGeoStateExcluded":MISSING,
    ${data1}=        Remove String       ${data1}     "targetGeoCountry":MISSING,
    ${data1}=        Remove String       ${data1}     "targetStreamingPosition":MISSING,
    ${data1}=        Remove String       ${data1}     "targetLocation":MISSING,
    ${data1}=        Remove String       ${data1}     "targetCarrier":MISSING,
    ${data1}=        Remove String       ${data1}     "targetTrafficType":MISSING,
    ${data1}=        Remove String       ${data1}     "targetCategory":MISSING,
    ${data1}=        Remove String       ${data1}     "targetCategoryExcluded":MISSING,
    ${data1}=        Remove String       ${data1}     "targetLanguage":MISSING,
    ${data1}=        Remove String       ${data1}     "targetExchange":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDeviceManufacturer":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDeviceModel":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDeviceType":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDeviceOS":MISSING,
    ${data1}=        Remove String       ${data1}     "targetDeviceOSVersion":MISSING,
    ${data1}=        Remove String       ${data1}     "dealIds":MISSING,
    ${data1}=        Remove String       ${data1}     "auctionOverride":MISSING,
    ${data1}=        Remove String       ${data1}     "bidFloor":MISSING,
    ${data1}=        Remove String       ${data1}     "exchange":MISSING
    ${data1}=        Evaluate    '${data1}'.replace(", }",'}').replace(",}",'}')
    Set Test Variable       ${data1}     ${data1}
    Log    ${data1}







############################
#PAC 1.8.4 Partial update a child adgroup
############


Partial Update Child Adgroup via API
    [Arguments]     ${attribute}="name"
    ...             ${value}="new_name"
    ...             ${updated_response_code}=200
    ...             ${updated_success}=NA
    Set Test Variable       ${username}         ${QA_DEFAULT_USER}
    #Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    ${child_groupid}=     Get Json Value   ${body}   /childId
    Log   ${child_groupid}
    Set Test Variable       ${uri1}      pac-api/child-adgroup/child-adgroup/${child_groupid}?username=${username}
    Set Test Variable       ${data1}     {"updateList":[{"attribute":"${attribute}","value":${value}}]}
    ${missing_count1}=           Get Count           ${data}         MISSING
    Run Keyword If      '${missing_count1}'>='1'        Remove Json Key Contain MISSING for partial update child Adgroup via API
    Log             ${data1}
    #${result1}=  RequestsLibrary.Patch Request  docker     ${uri1}     data=${data1}     headers=${headers}
    #Set Suite Variable      ${response_body}    ${result1.content}
    #Set Suite Variable       ${body}     ${result1.content}
    #Log    ${body}
    #Should Be Equal As Strings   ${result1.status_code}   ${updated_response_code}
    PAC API        uri=${uri1}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=PATCH                               #GET, POST, PUT
    ...            data=${data1}
    ...            expected_status_code=${updated_response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${updated_success}
    Set Suite Variable      ${response_body}    ${body}

    Run Keyword If  '${updated_response_code}'=='400'
    ...                                      Json Value Should Equal    ${response_body}    /success  false
    Run Keyword If  '${updated_response_code}'=='200'  Json Value Should Equal     ${response_body}    /childId  ${child_groupid}
    # Run Keyword If  '${updated_response_code}'=='200'  Json Value Should Equal     ${response_body}    /parentID  ${response_child_parent_campaign_id}



Remove Json Key Contain MISSING for partial update child Adgroup via API
    ${data1}=    Remove String   ${data}     "attribute":"MISSING",
    ${data1}=    Remove String   ${data1}     "value":"MISSING"
    ${data1}=       Evaluate    '${data1}'.replace(", }",'}')
    Set Test Variable       ${data}     ${data1}    #{"attribute":${attribute}, "value":${value}}
    Log        ${data}




############################
# PAC API 1.8.5

Create a new campaign for PAC1.8.5
    [Arguments]                     ${QA_TEST_ADVERTISER}=
    ...                             ${campaign_name_1}=PAC_regression_campaign_185_01
    ...                             ${campaign_name_2}=PAC_regression_campaign_185_02
    ...                             ${child_name}=PAC_regression_child_185_01_01
    ...                             ${new_child_name}=PAC_regression_clone_child_01_01
    ...                             ${campaign_advertiser_id}=
    ...                             ${campaign_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...                             ${parent_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...                             ${child_start_date_time}=${REGRESSION_START_DATE} 00:00
    ...                             ${end_date}=${REGRESSION_END_DATE} 23:59:59
    ...                             ${response_code}=200
    ...                             ${success}=NA
    #[Documentation]         Creating 1 campaign, 2 parent adgroup. Create 1 campaign with 1 parent adgroup
    Set Test Variable       ${username}         ${QA_DEFAULT_USER}
    #campaign #1
    Create Advertiser                           uri=/pac-api/partner/advertiser            data={"name": "${QA_TEST_ADVERTISER}"}



    Create New Campaign via API         campaign_name=${campaign_name_1}
    ...                                 campaign_start_date_time=${campaign_start_date_time}
    ...                                 campaign_advertiser_id=${advertiser_id}
    ${parent_campaign_id}       Get JSON Value      ${body}     /campaign/id

    ${campaignEndDate}=    Get JSON Value   ${body}   /campaign/endDate
    ${campaignEndDate}=       Evaluate    '${campaignEndDate}'.replace('"','')
    ${campaignEndDate}=    Get Substring   ${campaignEndDate}  0  -3
    Log    ${campaignEndDate}

    Set Suite Variable      ${campaign_id_1}       ${parent_campaign_id}
    Create Parent Adgroup via API       parent_name=PAC_regression_parent_185_01
    ...                                 parent_campaign_id=${Campaign_Id}
    ...                                 parent_start_date_time=${parent_start_date_time}
    ...                                 HHMMSS_Flag=0
    ...                                 response_code=200

    Sleep    20s
    ${parent_id_1_1}=        Get JSON Value      ${body}     /parent/id
    Set Suite Variable      ${parent_id_1_1}        ${parent_id_1_1}

    Create Parent Adgroup via API       parent_name=PAC_regression_parent_185_02
    ...                                 parent_campaign_id=${Campaign_Id}
    ...                                 parent_start_date_time=${parent_start_date_time}
    ...                                 HHMMSS_Flag=0
    ...                                 response_code=200

    Sleep    20s
    ${parent_id_1_2}=        Get JSON Value      ${body}     /parent/id
    Set Suite Variable      ${parent_id_1_2}        ${parent_id_1_2}
    Create Child Adgroup via API        child_name=${child_name}
    ...                                 child_parent_campaign_id=${parent_id_1_1}
    ...                                 child_start_date_time=${child_start_date_time}
    ...                                 response_code=200
    ${child_id_1_1}=        Get JSON Value      ${body}     /childId
    Set Suite Variable      ${child_id_1_1}        ${child_id_1_1}

    #campaign #2
    Create New Campaign via API         campaign_name=${campaign_name_2}
    ...                                 campaign_start_date_time=${campaign_start_date_time}
    ...                                 campaign_advertiser_id=${advertiser_id}

    ${parent_campaign_id}       Get JSON Value      ${body}     /campaign/id
    Set Suite Variable      ${campaign_id_2}       ${parent_campaign_id}
    Create Parent Adgroup via API       parent_name=PAC_regression_parent_185_01
    ...                                 parent_campaign_id=${Campaign_Id}
    ...                                 parent_start_date_time=${parent_start_date_time}
    ...                                 HHMMSS_Flag=0
    ...                                 response_code=200
    ${parent_id_2_1}=        Get JSON Value       ${body}     /parent/id
    Set Suite Variable       ${parent_id_2_1}     ${parent_id_2_1}
    Set Suite Variable       ${end_date}          ${REGRESSION_END_DATE} 23:59:59



Create Child adgroup using Clone API
    [Arguments]     ${current_child_id}=${child_id_1_1}
    ...             ${new_child_name}=new_cloned_child
    ...             ${parent_id}=${parent_id_1_1}
    ...             ${campaign_id}=${campaign_id_1}
    ...             ${start_date}=${REGRESSION_START_DATE} 00:00
    ...             ${end_date}=${REGRESSION_END_DATE} 23:59
    ...             ${response_code}=200
    ...             ${success}=NA
    Set Test Variable           ${uri}      pac-api/child-adgroup/child-adgroup/${current_child_id}/clone/${parent_id}
    Set Test Variable           ${data}     {"name":"${new_child_name}","startDate":"${start_date}","endDate":"${end_date}"}
    ${missing_count}=           Get Count   ${data}         MISSING
    Run Keyword If              '${missing_count}'>='1'       Remove Json Key Contain MISSING for Create child Adgroup via API     ${data}     ${missing_count}
    Log                         ${data}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    #Sleep    5s
    #as of release 10.7 we no longer return id, it will be in the form of email.
    #Run Keyword If  '${response_code}'=='200'   Json Value Should Equal     ${body}    /parentId       ${parent_id}
    #Run Keyword If  '${response_code}'=='200'   Json Value Should Equal     ${body}    /campaignId     ${campaign_id}
    #special rule: if child name is missing or null, we automatically use original name with word clone. Validation will not be done here, it will be done as part of test case.
    #Set Test Variable      ${child_name_valid}     true
    #Run Keyword If '${new_child_name}'=='MISSING' or '${new_child_name}'=='null' or '${new_child_name}'=='Null' or '${new_child_name}'=='NULL'   Set Test Variable     ${child_name_valid}     false
    #Run Keyword If  '${response_code}'=='200' and '${child_name_valid}'=='true'    Json Value Should Equal     ${body}    /childName      "${new_child_name}"

Compare Cloned Adgroup
    [Arguments]         ${adgroup_id_1}=
    ...                 ${adgroup_id_2}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query  select COUNT(*) from rhino.target_list where id in (select target_list_id from rhino.adgroup_targetlist where adgroup_id='${adgroup_id_1}');
    @{query_results2}    Query  select COUNT(*) from rhino.target_list where id in (select target_list_id from rhino.adgroup_targetlist where adgroup_id='${adgroup_id_2}');
    Disconnect From Database
    Should Be Equal     ${queryResults[0][0]}       ${queryResults2[0][0]}

Delete Clone child via DB
    [Arguments]     ${name}=PAC_regression_clone_child
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string     delete FROM rhino.ad_group where name like '${name}%';
    Disconnect From Database

Delete child via DB
    [Arguments]     ${name}=PAC_regression_child
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    execute_sql_string     delete FROM rhino.ad_group where name like '${name}%';
    Disconnect From Database





#######################
#PAC1.4.11
#######################
Archive_a_campaign
    [Arguments]     ${campaign_id}=
    ...             ${url}=
    ...             ${response_code}=200
    ...             ${success}=NA
    #Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    # ${campaign_id}=     Get Json Value   ${body}   /childId
    Log   ${campaign_id}
    Set Test Variable       ${uri1}      ${url}/${campaign_id}
    #${result1}=  RequestsLibrary.Delete Request  docker     ${uri1}       headers=${headers}
    #Log     ${result1}
    #Set Suite Variable      ${response_body}    ${result1.content}
    #Set Suite Variable       ${body}     ${result1.content}
    #Should Be Equal As Strings   ${result1.status_code}   ${response_code}
    PAC API        uri=${uri1}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=DELETE                              #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}
    Set Suite Variable       ${response_body}     ${body}
    Run Keyword If  '${response_code}'=='400'
    ...     Json Value Should Equal    ${response_body}    /success  false
    Run Keyword If  '${response_code}'=='200'  Json Value Should Equal     ${response_body}    /archiveId  ${campaign_id}


#######################
#PAC1.4.12 Get BreadCrumb Trail for Campaign

Get BreadCrumb trail log for Campaign
    [Arguments]         ${url}=
    ...                 ${campaignId}=
    ...                 ${status_code}=
    ...                 ${success}=
    Set Suite Variable       ${username}         ${QA_DEFAULT_USER}
    PAC API                                uri=${url}       request_type=GET
    ...                                     expected_status_code=${status_code}
    ...                                     success=${success}
    Run Keyword If      '${status_code}'=='200'      Compare response for Get BreadCrumb with DB
    ...         ${campaignId}

Compare response for Get BreadCrumb with DB
    [Arguments]     ${campaignId}=
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results_Campaign}     Query    select a.partner_id, b.name, a.id, a.name from rhino.campaign as a join rhino.partner as b on a.partner_id = b.id where a.id =${campaignId} ;
    ${Campaign_details}=   Create Dictionary      advertiserID=${query_results_Campaign[0][0]}
    ...                                           advertiserName=${query_results_Campaign[0][1]}
    ...                                           campaignID=${query_results_Campaign[0][2]}
    ...                                           campaignName=${query_results_Campaign[0][3]}
    Set Test Variable       ${BreadCrumb_db}        ${Campaign_details}
    Disconnect From Database
    ${advertiserID}=     Get From Dictionary          ${BreadCrumb_db}    advertiserID
    ${advertiserID}=     Convert To Integer   ${advertiserID}
    ${advId}=            Get JSON Value      ${body}     /advId
    ${advId}=            Convert To Integer   ${advId}
    Should Be Equal      ${advertiserID}      ${advId}

    ${advertiserName}=         Get From Dictionary          ${BreadCrumb_db}    advertiserName
    Json Value Should Equal    ${body}     /advName         "${advertiserName}"

    ${campaignID_db}=             Get From Dictionary          ${BreadCrumb_db}    campaignID
    ${campaignID_db}=     Convert To Integer   ${campaignID_db}
    ${campId}=            Get JSON Value      ${body}     /campId
    ${campId}=            Convert To Integer   ${campId}
    Should Be Equal      ${campaignID_db}      ${campId}

    ${campaignName}=           Get From Dictionary          ${BreadCrumb_db}    campaignName
    Json Value Should Equal    ${body}     /campName        "${campaignName}"




#######################
# 1.8.6 Archive a Child Adgroup

Archive_a_child_adgroup
    [Arguments]     ${child_groupid}=
    ...             ${url}=/pac-api/child-adgroup/child-adgroup
    ...             ${response_code}=200
    #Create Session       docker    https://${QA_PAC}:${QA_PAC_PORT}
    #${headers}       Create Dictionary     Content-type=application/json       Accept=application/json
    # ${child_groupid}=     Get Json Value   ${body}   /childId
    Log   ${child_groupid}
    Set Test Variable       ${uri1}      ${url}/${child_groupid}
    #${result1}=  RequestsLibrary.Delete Request  docker     ${uri1}       headers=${headers}
    #Log     ${result1}
    #Set Suite Variable      ${response_body}    ${result1.content}
    #Set Suite Variable       ${body}     ${result1.content}
    #Should Be Equal As Strings   ${result1.status_code}   ${response_code}
    PAC API        uri=${uri1}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=DELETE                              #GET, POST, PUT
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=NA
    Set Suite Variable       ${response_body}     ${body}
    Run Keyword If  '${response_code}'=='400'  Json Value Should Equal    ${response_body}      /success        false
    Run Keyword If  '${response_code}'=='200'  Json Value Should Equal     ${response_body}     /success        true
    Run Keyword If  '${response_code}'=='200'  Json Value Should Equal     ${response_body}     /archiveId      ${child_groupid}

Validate archived child adgroup
    [Arguments]     ${adgroup_id}=${child_groupid}
    Connect To Database     ${DB_API_MODULE_NAME}    ${DB_NAME_RHINO}    ${DB_USER}    ${DB_PASSWORD}    ${DB_HOST}   ${DB_PORT}
    @{query_results}     Query  select status from rhino.ad_group where id='${adgroup_id}';
    Disconnect From Database
    Should Be Equal     '${queryResults[0][0]}'     '3'

#######################
#PAC2.1.1

Cache Refresh Using API
    [Arguments]     ${uri}=     ${expected_status_code}=200     ${success}=NA
    Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    ${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    ${resp}=    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    Set Test Variable       ${resp}     ${resp}
    Log    Response: '${resp.content}'
     Set Suite Variable       ${body}     ${resp.content}
    # Run Keyword If  '${expected_status_code}'=='200'        Should Be Valid Json     ${body}
    Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
     #Run Keyword Unless  '${success}'=='NA'          Should Match Regexp     ${body}     "success":${success}
    #PAC API        uri=${uri}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    #...               request_type=GET                             #GET, POST, PUT
    #...            expected_status_code=${expected_status_code}                        #normally 200 for working condition, 400 for failure
    #...            success=${success}



##############################
#PAC2.1.2
Cache Details Using API
    [Arguments]     ${uri}=
    ...             ${cacheName}=
    ...             ${expected_status_code}=200
    ...             ${success}=NA
    Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    ${headers}    Create Dictionary     Content-Type=application/json       Accept=application/json
    ${resp}    RequestsLibrary.Get Request    docker   ${uri}    headers=${headers}
    Set Test Variable       ${resp}     ${resp}
    Log    Response: '${resp.content}'
    Set Suite Variable       ${body}     ${resp.content}
    Log     ${body}
    Should Be Equal As Strings    ${resp.status_code}    ${expected_status_code}
    #PAC API        uri=${uri}                                          #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    #...               request_type=GET                             #GET, POST, PUT
    #...            expected_status_code=${expected_status_code}                        #normally 200 for working condition, 400 for failure
    #...            success=${success}
    Log     ${cacheName}
    Run Keyword If      '${cacheName}'=='pac.target.day.of.week'            Validate PAC_2.1.2.1 Day of Week Cache Details
    Run Keyword If      '${cacheName}'=='pac.target.geo.country'            Validate PAC_2.1.2.2 Country Cache Details
    Run Keyword If      '${cacheName}'=='pac.target.geo.state'              Validate PAC_2.1.2.3 States Cache Details
    Run Keyword If      '${cacheName}'=='pac.target.geo.dma'                Validate PAC_2.1.2.4 DMA Cache Details
    Run Keyword If      '${cacheName}'=='pac.target.traffic.type'           Validate PAC_2.1.2.5 Traffic Type Cache Details
    Run Keyword If      '${cacheName}'=='pac.target.category'               Validate PAC_2.1.2.6 Category Cache_details
    Run Keyword If      '${cacheName}'=='pac.target.geo.zip'                Validate PAC_2.1.2.7 ZIP Cache_details
    Run Keyword If      '${cacheName}'=='pac.target.carrier'                Validate PAC_2.1.2.8 Target Carrier Cache details
    Run Keyword If      '${cacheName}'=='pac.target.language'               Validate PAC_2.1.2.9 Target Language Cache details
    Run Keyword If      '${cacheName}'=='pac.target.location'               Validate PAC_2.1.2.10 Target Location Cache details
    Run Keyword If      '${cacheName}'=='pac.target.exchange'               Validate PAC_2.1.2.11 Target Exchange Cache details
    Run Keyword If      '${cacheName}'=='pac.target.device.os'              Validate PAC_2.1.2.12 Target Device Os Cache details
    Run Keyword If      '${cacheName}'=='pac.target.device.type'            Validate PAC_2.1.2.13 Target Device Type Cache details
    Run Keyword If      '${cacheName}'=='pac.target.auction.override'       Validate PAC_2.1.2.14 Target Auction Override Cache details
    Run Keyword If      '${cacheName}'=='pac.target.supported.partner'      Validate PAC_2.1.2.15 Supported Partners Cache details
    Run Keyword If      '${cacheName}'=='pac.target.device.manufacturer'        Validate PAC_2.1.2.16 Target Device Manufacturer Cache details
    Run Keyword If      '${cacheName}'=='pac.target.video.stream.position'      Validate PAC_2.1.2.17 Video Stream Position Cache details
    Run Keyword If      '${cacheName}'=='pac.target.time.of.day.user'           Validate PAC_2.1.2.18 Target Time of Day User Cache details
    Run Keyword If      '${cacheName}'=='pac.target.time.of.day'            Validate PAC_2.1.2.19 Target Time of Day Cache details


Validate PAC_2.1.2.1 Day of Week Cache Details
    Should Match Regexp     ${body}     [ key = 6, value=com.adhaven.pac.model.TargetDayOfWeek@fb26f56, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetDayOfWeek@42a7b26a, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 7, value=com.adhaven.pac.model.TargetDayOfWeek@bab7f27, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 8, value=com.adhaven.pac.model.TargetDayOfWeek@2828df6d, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetDayOfWeek@69eceaba, version=1, hitCount=2, CreationTime = 1498169429847, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 4, value=com.adhaven.pac.model.TargetDayOfWeek@73f4a5a7, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772462 ]
    Should Match Regexp     ${body}     [ key = 3, value=com.adhaven.pac.model.TargetDayOfWeek@7946436c, version=1, hitCount=2, CreationTime = 1498169429852, LastAccessTime = 1498170772463 ]


Validate PAC_2.1.2.2 Country Cache Details
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetGeoCountry@2491a571, version=1, hitCount=4, CreationTime = 1500617135225, LastAccessTime = 1500617515556 ]
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetGeoCountry@73f14e8a, version=1, hitCount=4, CreationTime = 1500617135225, LastAccessTime = 1500617515556 ]
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetGeoCountry@73f14e8a, version=1, hitCount=4, CreationTime = 1500617135225, LastAccessTime = 1500617515556 ]
    Should Match Regexp     ${body}     [ key = 3, value=com.adhaven.pac.model.TargetGeoCountry@675b817d, version=1, hitCount=4, CreationTime = 1500617135225, LastAccessTime = 1500617515556 ]


Validate PAC_2.1.2.3 States Cache Details
    Should Match Regexp     ${body}     [ key = 22, value=com.adhaven.pac.model.TargetGeoState@72489bde, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 40, value=com.adhaven.pac.model.TargetGeoState@75cef0c8, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 49, value=com.adhaven.pac.model.TargetGeoState@613c987b, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 12, value=com.adhaven.pac.model.TargetGeoState@6707bce5, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 31, value=com.adhaven.pac.model.TargetGeoState@12fa75de, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 20, value=com.adhaven.pac.model.TargetGeoState@2c1c0703, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 27, value=com.adhaven.pac.model.TargetGeoState@7aabcf2d, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 6, value=com.adhaven.pac.model.TargetGeoState@1bd1b2ab, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 55, value=com.adhaven.pac.model.TargetGeoState@660d8851, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]
    Should Match Regexp     ${body}     [ key = 13, value=com.adhaven.pac.model.TargetGeoState@2d02933b, version=1, hitCount=2, CreationTime = 1500617135384, LastAccessTime = 1500617757144 ]


Validate PAC_2.1.2.4 DMA Cache Details
    Should Match Regexp     ${body}     [ key = 674, value=com.adhaven.pac.model.TargetGeoDMA@6e6377aa, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 582, value=com.adhaven.pac.model.TargetGeoDMA@4d94815d, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 620, value=com.adhaven.pac.model.TargetGeoDMA@5d17b682, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 613, value=com.adhaven.pac.model.TargetGeoDMA@3a1319, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 739, value=com.adhaven.pac.model.TargetGeoDMA@170d8d71, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 660, value=com.adhaven.pac.model.TargetGeoDMA@1ad0bbbf, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]
    Should Match Regexp     ${body}     [ key = 610, value=com.adhaven.pac.model.TargetGeoDMA@3b3c55f7, version=1, hitCount=2, CreationTime = 1500617135342, LastAccessTime = 1500618400225 ]


Validate PAC_2.1.2.5 Traffic Type Cache Details
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetTrafficType@75eb2ca, version=1, hitCount=2, CreationTime = 1500617135212, LastAccessTime = 1500618751305 ]
    Should Match Regexp     ${body}     [ key = 4, value=com.adhaven.pac.model.TargetTrafficType@155af83a, version=1, hitCount=2, CreationTime = 1500617135212, LastAccessTime = 1500618751305 ]
    Should Match Regexp     ${body}     [ key = 3, value=com.adhaven.pac.model.TargetTrafficType@5c753e82, version=1, hitCount=2, CreationTime = 1500617135212, LastAccessTime = 1500618751305 ]


Validate PAC_2.1.2.6 Category Cache details
    Should Match Regexp     ${body}     [ key = 12, value=com.adhaven.pac.model.TargetCategory@40310f3b, version=1, hitCount=2, CreationTime = 1500617135198, LastAccessTime = 1500618873871 ]
    Should Match Regexp     ${body}     [ key = 114, value=com.adhaven.pac.model.TargetCategory@197637e4, version=1, hitCount=2, CreationTime = 1500617135198, LastAccessTime = 1500618873871 ]
    Should Match Regexp     ${body}     [ key = 110, value=com.adhaven.pac.model.TargetCategory@fbcd22f, version=1, hitCount=2, CreationTime = 1500617135198, LastAccessTime = 1500618873871 ]


Validate PAC_2.1.2.7 ZIP Cache details
    Should Match Regexp     ${body}     [ key = 36738, value=16088, version=1, hitCount=2, CreationTime = 1500617135117, LastAccessTime = 1500619006876 ]
    Should Match Regexp     ${body}     [ key = 30072, value=12912, version=1, hitCount=2, CreationTime = 1500617135114, LastAccessTime = 1500619006876 ]
    Should Match Regexp     ${body}     [ key = 96038, value=40814, version=1, hitCount=2, CreationTime = 1500617135150, LastAccessTime = 1500619006876 ]


Validate PAC_2.1.2.8 Target Carrier Cache details
    Should Match Regexp     ${body}     [ key = 6, value=com.adhaven.pac.model.TargetCarrier@210d069b, version=1, hitCount=4, CreationTime = 1500655357726, LastAccessTime = 1500655360664 ]
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetCarrier@652216e4, version=1, hitCount=4, CreationTime = 1500655357726, LastAccessTime = 1500655360664 ]
    Should Match Regexp     ${body}     [ key = 7, value=com.adhaven.pac.model.TargetCarrier@5e2cbb10, version=1, hitCount=4, CreationTime = 1500655357726, LastAccessTime = 1500655360664 ]


Validate PAC_2.1.2.9 Target Language Cache details
    Should Match Regexp     ${body}     [ key = 38, value=com.adhaven.pac.model.TargetLanguage@411e5111, version=1, hitCount=4, CreationTime = 1500655357743, LastAccessTime = 1500655584512 ]
    Should Match Regexp     ${body}     [ key = 149, value=com.adhaven.pac.model.TargetLanguage@21fbc82, version=1, hitCount=4, CreationTime = 1500655357743, LastAccessTime = 1500655584512 ]


Validate PAC_2.1.2.10 Target Location Cache details
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetLocation@6d8ba95, version=1, hitCount=2, CreationTime = 1500655357767, LastAccessTime = 1500655798050 ]
    Should Match Regexp     ${body}     [ key = 4, value=com.adhaven.pac.model.TargetLocation@55c1f516, version=1, hitCount=2, CreationTime = 1500655357767, LastAccessTime = 1500655798050 ]


Validate PAC_2.1.2.11 Target Exchange Cache details
    Should Match Regexp     ${body}     [ key = 728, value=com.adhaven.pac.model.Partner@5bed0f30, version=1, hitCount=2, CreationTime = 1500655357875, LastAccessTime = 1500655898668 ]
    Should Match Regexp     ${body}     [ key = 520, value=com.adhaven.pac.model.Partner@76d69e0, version=1, hitCount=2, CreationTime = 1500655357875, LastAccessTime = 1500655898669 ]


Validate PAC_2.1.2.12 Target Device Os Cache details
    Should Match Regexp     ${body}     [ key = 6, value=com.adhaven.pac.model.TargetDeviceOS@7641f303, version=1, hitCount=2, CreationTime = 1500655335299, LastAccessTime = 1500656090742 ]
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetDeviceOS@3d62f179, version=1, hitCount=2, CreationTime = 1500655335299, LastAccessTime = 1500656090742 ]


Validate PAC_2.1.2.13 Target Device Type Cache details
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetDeviceType@6c3f82b9, version=1, hitCount=2, CreationTime = 1500655335232, LastAccessTime = 1500656188343 ]
    Should Match Regexp     ${body}     [ key = 4, value=com.adhaven.pac.model.TargetDeviceType@304b1687, version=1, hitCount=2, CreationTime = 1500655335232, LastAccessTime = 1500656188343 ]


Validate PAC_2.1.2.14 Target Auction Override Cache_details
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.AuctionOverride@61068587, version=1, hitCount=2, CreationTime = 1500655335199, LastAccessTime = 1500656384346 ]
    Should Match Regexp     ${body}     [ key = 1, value=com.adhaven.pac.model.AuctionOverride@32b656f3, version=1, hitCount=2, CreationTime = 1500655335199, LastAccessTime = 1500656384346 ]


Validate PAC_2.1.2.15 Supported Partners Cache details
    Should Match Regexp     ${body}     [ key = 489, value=com.adhaven.pac.model.Partner@74398cdb, version=1, hitCount=2, CreationTime = 1500655335187, LastAccessTime = 1500656549127 ]
    Should Match Regexp     ${body}     [ key = 475, value=com.adhaven.pac.model.Partner@37b59c8f, version=1, hitCount=2, CreationTime = 1500655335186, LastAccessTime = 1500656549127 ]


Validate PAC_2.1.2.16 Target Device Manufacturer Cache details
    Should Match Regexp     ${body}     [ key = 131, value=com.adhaven.pac.model.TargetDeviceManufacturer@2e854c2f, version=1, hitCount=2, CreationTime = 1500655335163, LastAccessTime = 1500656675379 ]
    Should Match Regexp     ${body}     [key = 595088, value=com.adhaven.pac.model.TargetDeviceManufacturer@6bd560aa, version=1, hitCount=2, CreationTime = 1500655335165, LastAccessTime = 1500656675379 ]


Validate PAC_2.1.2.17 Video Stream Position Cache details
    Should Match Regexp     ${body}     [ key = 5, value=com.adhaven.pac.model.TargetStreamingPosition@58f4c517, version=1, hitCount=2, CreationTime = 1500655329044, LastAccessTime = 1500656775345 ]
    Should Match Regexp     ${body}     [ key = 2, value=com.adhaven.pac.model.TargetStreamingPosition@5a693004, version=1, hitCount=2, CreationTime = 1500655329044, LastAccessTime = 1500656775345 ]


Validate PAC_2.1.2.18 Target Time of Day User Cache details
    Should Match Regexp     ${body}     [ key = 22, value=com.adhaven.pac.model.TargetTimeOfDayUser@2b60f11a, version=1, hitCount=2, CreationTime = 1500655329001, LastAccessTime = 1500656908136 ]
    Should Match Regexp     ${body}     [ key = 12, value=com.adhaven.pac.model.TargetTimeOfDayUser@1ecb24f2, version=1, hitCount=2, CreationTime = 1500655329001, LastAccessTime = 1500656908136 ]


Validate PAC_2.1.2.19 Target Time of Day Cache details
    Should Match Regexp     ${body}     [ key = 40, value=com.adhaven.pac.model.TargetTimeOfDay@4f67f86d, version=1, hitCount=2, CreationTime = 1500655328889, LastAccessTime = 1500656995978 ]
    Should Match Regexp     ${body}     [ key = 31, value=com.adhaven.pac.model.TargetTimeOfDay@74585d2d, version=1, hitCount=2, CreationTime = 1500655328889, LastAccessTime = 1500656995978 ]


#######################
#PAC1.9.1

Get 1.9.1 Get Search in campaign using API
    [Arguments]     ${uri}=
    ...             ${keyword}=
    ...             ${selection}=
    ...             ${id}=
    ...             ${name}=
    ...             ${type}=
    ...             ${allFlag}=0
    ...             ${response_code}=200
    ...             ${success}=NA
    ...             ${expected_reason_code}=NA
    ...             ${expected_reason_desc}=NA
    ...             ${expected_error_reason_desc}=NA
    ...             ${expected_field}=NA
    #Create Session   docker    https://${QA_PAC}:${QA_PAC_PORT}
    Log         ${uri}
    Log         ${keyword}
    Log         ${selection}
    #${headers}=    Create Dictionary     Content-type=application/json   Accept=application/json
    Set Test Variable       ${data}     {"keyword":${keyword},"selection":"${selection}"}
    Log         ${data}
    ${missing_count}=           Get Count           ${data}         "MISSING"
    Run Keyword If      '${missing_count}'>='1'        Remove Json Key Contain MISSING for PAC1.9.1
    Log         ${data}
    #${resp}=    RequestsLibrary.Post Request     docker     ${uri}     data=${data}     headers=${headers}
    #Log    Response: '${resp.content}'
    #Set Suite Variable       ${body}     ${resp.content}
    #Should Be Equal As Strings   ${resp.status_code}   ${response_code}
    PAC API        uri=${uri}                                           #api URL  user-management-api/permissions-internal/groups-and-default?userId=1
    ...            request_type=POST                                #GET, POST, PUT
    ...            data=${data}
    ...            expected_status_code=${response_code}                        #normally 200 for working condition, 400 for failure
    ...            success=${success}

    Run Keyword If      '${response_code}'=='200'     Validate PAC_1.9.1 error message for response code 200
    ...                 ${keyword}
    ...                 ${selection}


Validate PAC_1.9.1 error message for response code 200
    [Arguments]         ${keyword}
    ...                 ${selection}
    ${keyword_response}=    Get Json Value         ${body}      /keyword
    Should Be Equal      ${keyword_response}       ${keyword}
    ${selection_response}=    Get Json Value         ${body}      /selection
    Should Be Equal      ${selection_response}       "${selection}"



Remove Json Key Contain MISSING for PAC1.9.1
    ${data1}=    Remove String   ${data}     "keyword":"MISSING",
    ${data1}=    Remove String   ${data1}     "selection":MISSING
    ${data1}=       Evaluate    '${data1}'.replace(", }",'}')
    Set Test Variable       ${data}     ${data1}
    Log        ${data}


